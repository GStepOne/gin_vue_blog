<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.8.9" created="2024-05-22 01:41" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Akatsuki Sasori日志</title>
	<link>https://www.liritian.com</link>
	<description>沉淀知识是在成长道路上的最正确的选择。</description>
	<pubDate>Wed, 22 May 2024 01:41:49 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://www.liritian.com</wp:base_site_url>
	<wp:base_blog_url>https://www.liritian.com</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[jack_ss]]></wp:author_login><wp:author_email><![CDATA[124307954@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[jack_ss]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

				
	<generator>https://wordpress.org/?v=5.8.9</generator>

<image>
	<url>https://www.liritian.com/wp-content/uploads/2019/02/cropped-u33967122611314911401fm26gp0-1-32x32.jpg</url>
	<title>Akatsuki Sasori日志</title>
	<link>https://www.liritian.com</link>
	<width>32</width>
	<height>32</height>
</image>
		<item>
		<title><![CDATA[kratos 安装]]></title>
		<link>https://www.liritian.com/archives/kratos-%e5%ae%89%e8%a3%85/</link>
		<pubDate>Fri, 03 Mar 2023 09:52:34 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1674</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Kratos 一套轻量级 Go 微服务框架，包含大量微服务相关功能及工具。</p>
<p>github链接：<a href="https://github.com/go-kratos/kratos">https://github.com/go-kratos/kratos</a></p>
<p>前提条件：</p>
<ol>
<li>[安装golang]() <a href="https://golang.org/dl/">https://golang.org/dl/</a></li>
<li>安装protoc <a href="https://github.com/protocolbuffers/protobuf">https://github.com/protocolbuffers/protobuf</a></li>
<li>安装 protoc-gen-go <a href="https://github.com/protocolbuffers/protobuf-go">https://github.com/protocolbuffers/protobuf-go</a></li>
</ol>
<h3><strong>protobuf</strong></h3>
<p>&#x9;Protobuf（Protocol Buffer）是google 的一种数据交换的格式，它独立于语言，独立于平台。它是一种二进制的格式，比使用 xml 进行数据交换快许多。可以把它用于分布式应用之间的数据通信或者异构环境下的数据交换。作为一种效率和兼容性都很优秀的二进制数据传输格式，可以用于诸如网络传输、配置文件、数据存储等诸多领域</p>
<h3><strong>protoc</strong>&#x20;</h3>
<p>&#x9;protoc是protobuf文件（.proto）的编译器，可以借助这个工具把 .proto 文件转译成各种编程语言对应的源码，包含数据类型定义、调用接口等。</p>
<p>&#x9;protoc在设计上把protobuf和不同的语言解耦了，底层用c++来实现protobuf结构的存储，然后通过插件的形式来生成不同语言的源码。</p>
<p>可以把protoc的编译过程分成简单的两个步骤：</p>
<p>&#x9;1）解析.proto文件，转译成protobuf的原生数据结构在内存中保存；</p>
<p>&#x20;   2）把protobuf相关的数据结构传递给相应语言的编译插件，由插件负责根据接收到的protobuf原生结构渲染输出特定语言的模板。&#x9;</p>
<h3>&#x20;protoc-gen-go</h3>
<p>&#x9;protoc-gen-go是protobuf<strong>编译插件</strong>系列中的Go版本</p>
<p>由于众所周知的原因，这里可能需要一个代理才能下载一些，如果你恰好也用clash for windows ，</p>
<pre><code>1. 开启clash的允许局域网（默认端口是7890）

2.  点击允许局域网右边的icon （network ineterface）
    1.  以太网Address:1x.1x.7x.7x 记住这个ip 就是你的本机ip
3.  去虚拟机里设置http代理和https代理

set http_proxy=http://1x.1x.7x.7x:7890

set https_proxy=http://1x.1x.7x.7x:7890 
</code></pre>
<p>查看系统版本：lsb_release -a,如果你恰好也是ubuntu的fans</p>
<pre><code>Distributor ID: Ubuntu
Description:    Ubuntu 22.04 LTS
Release:    22.04
Codename:   jammy
</code></pre>
<p>准备工作：</p>
<ol>
<li>配置好golang的GOPATH</li>
<li>安装好扩展 sudo apt install autoconf automake libtool curl make  libprotobuf-dev protobuf-compiler gcc</li>
<li>
<p>安装protoc</p>
<ol>
<li>sudo wget <a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protobuf-all-3.19.4.tar.gz">https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protobuf-all-3.19.4.tar.gz</a></li>
<li>tar -zxvf protobuf-all-3.19.4.tar.gz</li>
<li>cd protobuf-3.19.4/</li>
<li>git submodule update --init --recursive</li>
<li>./autogen.sh</li>
<li>./configure</li>
<li>sudo make&#x20;</li>
<li>sudo make install</li>
<li>
<p>查看是否安装成功</p>
<ol>
<li>protoc --version&#x20;</li>
<li>出现 libprotoc 3.19.4  表示成功</li>
</ol>
</li>
</ol>
</li>
<li>
<p>安装protoc-gen-go</p>
<p>go install github.com/golang/protobuf/protoc-gen-go\@latest</p>
<p>go install google.golang.org/protobuf/cmd/protoc-gen-go\@latest 这个好使一点</p>
<p>是否安装成功：去\$GOPATH 下的bin目录下查看是否有protoc-gen-go 文件，存在证明安装成功</p>
</li>
<li>
<p>安装kratos</p>
<ol>
<li>
<p>go install 安装</p>
<ol>
<li>
<p>go install github.com/go-kratos/kratos/cmd/kratos/v2\@latest 这里其实安装的是kratos的命令&#x20;</p>
<p>kratos upgrade</p>
</li>
</ol>
</li>
<li>
<p>源码编译安装</p>
<ol>
<li>git clone <a href="https://github.com/go-kratos/kratos">https://github.com/go-kratos/kratos</a>
cd kratos
make install</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>&#x20;6. 创建一个服务 官网链接 <a href="https://go-kratos.dev/docs/getting-started/start">https://go-kratos.dev/docs/getting-started/start</a></p>
<pre><code># 创建项目模板
go env -w GO111MODULE=on

kratos new helloworld （# 使用默认模板创建项目

# 如在国内环境拉取失败, 可 -r 指定源
kratos new helloworld -r https://gitee.com/go-kratos/kratos-layout.git

# 进入项目目录
cd helloworld

# 拉取项目依赖
go mod download）

cd helloworld
# 拉取项目依赖
go mod download

# 生成proto模板
kratos proto add api/helloworld/helloworld.proto
# 生成proto源码
kratos proto client api/helloworld/helloworld.proto
# 生成server模板
kratos proto server api/helloworld/helloworld.proto -t internal/service

# 生成所有proto源码、wire等等
go generate ./...

# 运行程序
kratos run

测试一下接口

curl &#039;http://127.0.0.1:8000/helloworld/kratos&#039;

# 输出：
{
  &quot;message&quot;: &quot;Hello kratos&quot;
}
</code></pre>
<p>看起来一切顺利\~</p>
<p>哪有什么一帆风顺的事儿，记录一下踩过的坑</p>
<p>1 go install的时候一直超时，配置代理</p>
<p>2 kratos 命令识别不了，没有安装CLI的kratos （ go install github.com/go-kratos/kratos/cmd/kratos/v2\@latest）</p>
<p>3 直接clone git上的protoc 安装不了，还是使用源码安装的</p>
<p>4 go install 安装一些东西的时候会默认放到\$GOPATH下，这里配置的是go所在的项目的bin文件夹里面，开始环境变量没配置好</p>
<p>5  go build 超时 用go env -w GOPROXY=<a href="https://goproxy.cn">https://goproxy.cn</a></p>
<p>6 通过clone的源码，然后去go build 没能尝试成功</p>
<p>如果一直不成功 参考一下这篇文章 <a href="https://www.clownfish.site/post/2022-09-25-ubuntu20.04%E5%AE%89%E8%A3%85protoc-gen-go/">https://www.clownfish.site/post/2022-09-25-ubuntu20.04%E5%AE%89%E8%A3%85protoc-gen-go/</a>&#x20;</p>
<p>我没参考\~</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1674</wp:post_id>
		<wp:post_date><![CDATA[2023-03-03 17:52:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-03-03 09:52:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-03-03 17:52:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-03-03 09:52:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kratos-%e5%ae%89%e8%a3%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ClickHouse 初识]]></title>
		<link>https://www.liritian.com/archives/clickhouse-%e5%88%9d%e8%af%86/</link>
		<pubDate>Mon, 29 May 2023 15:24:34 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1677</guid>
		<description></description>
		<content:encoded><![CDATA[<p>第一次知道这个鬼东东是在18年交接的时候，同事在项目里用了clickhouse，当时也没有太在意，就百度了一下这个是什么，期间19年参加php第七届大会，好像也记得有人提到过clickhouse，陆陆续续的听说过，但没有全面了解过，直到最近同事说项目准备要用这个了，那就系统的了解一下这个东东是什么，能干什么以及它是怎么做到的。</p>
<p>···
目前国内社区火热，各个大厂纷纷跟进大规模使用：</p>
<pre><code>今日头条 内部用ClickHouse来做用户行为分析，内部一共几千个ClickHouse节点，单集群最大1200节点，总数据量几十PB，日增原始数据300TB左右。
腾讯内部用ClickHouse做游戏数据分析，并且为之建立了一整套监控运维体系。
携程内部从18年7月份开始接入试用，目前80%的业务都跑在ClickHouse上。每天数据增量十多亿，近百万次查询请求。
快手内部也在使用ClickHouse，存储总量大约10PB， 每天新增200TB， 90%查询小于3S。</code></pre>
<p>···</p>
<p><strong>what’s hell of clickhouse ？</strong></p>
<p>ClickHouse是俄罗斯的Yandex于2016年开源的一个用于联机分析(OLAP:Online Analytical Processing)的列式数据库管理系统(DBMS:Database Management System)，简称CK , 使用C++ 语言编写, 主要用于在线分析处理查询（OLAP），能够使用SQL查询实时生成分析数据报告。</p>
<p>ClickHouse是一个完全的列式数据库管理系统，允许在运行时创建表和数据库，加载数据和运行查询，而无需重新配置和重新启动服务器，支持线性扩展，简单方便，高可靠性，容错。它在大数据领域没有走 Hadoop 生态，而是采用 Local attached storage 作为存储，这样整个 IO 可能就没有 Hadoop 那一套的局限。它的系统在生产环境中可以应用到比较大的规模，因为它的线性扩展能力和可靠性保障能够原生支持 shard + replication 这种解决方案。它还提供了一些 SQL 直接接口，有比较丰富的原生 client。另外就是它比较快。</p>
<p>clickhouse的特性</p>
<ul>
<li>
<p>真正的列式数据库
ClickHouse不单单是一个数据库， 它是一个数据库管理系统。因为它允许在运行时创建表和数据库、加载数据和运行查询，而无需重新配置或重启服务</p>
</li>
<li>
<p>数据压缩
除了在磁盘空间和CPU消耗之间进行不同权衡的高效通用压缩编解码器之外，ClickHouse还提供针对特定类型数据的专用编解码器，这使得ClickHouse能够与更小的数据库(如时间序列数据库)竞争并超越它们</p>
</li>
<li>
<p>数据的磁盘存储
许多的列式数据库(如 SAP HANA, Google PowerDrill)只能在内存中工作，这种方式会造成比实际更多的设备预算。
ClickHouse被设计用于工作在传统磁盘上的系统，它提供每GB更低的存储成本，但如果可以使用SSD和内存，它也会合理的利用这些资源。
多核心并行处理
多核心并行处理，clickhouse会使用服务器上一切可用的资源， 单条 Query 就能利用整机所有 CPU。 极致的并行处理能力，极大的降低了查询延时。</p>
</li>
<li>
<p>多核心并行处理
ClickHouse 即使对于大量数据的查询也能够化整为零平行处理。但是有一个弊端就是对于单条查询使用多cpu，就不利于同时并发多条查询。所以对于高 qps 的查询业务并不是强项</p>
</li>
<li>
<p>多服务器分布式处理
其他列式数据库管理系统中，几乎没有一个支持分布式的查询处理。 在ClickHouse中，数据可以保存在不同的shard上，每一个shard都由一组用于容错的replica组成，查询可以并行地在所有shard上进行处理。这些对用户来说是透明的</p>
</li>
<li>
<p>支持SQL​
ClickHouse支持一种基于SQL的声明式查询语言，它在许多情况下与ANSI SQL标准相同。
支持的查询GROUP BY, ORDER BY, FROM, JOIN, IN以及非相关子查询。
相关(依赖性)子查询和窗口函数暂不受支持，但将来会被实现。
ClickHouse 像很多 OLAP 数据库一样，单表查询速度优于关联查询，而且 ClickHouse的两者差距更为明显。
关联查询：clickhouse会将右表加载到内存。</p>
</li>
<li>
<p>支持SQL
ClickHouse支持一种基于SQL的声明式查询语言，它在许多情况下与ANSI SQL标准相同。
支持的查询GROUP BY, ORDER BY, FROM, JOIN, IN以及非相关子查询。
相关(依赖性)子查询和窗口函数暂不受支持，但将来会被实现。</p>
</li>
<li>
<p>向量引擎
为了高效的使用CPU，数据不仅仅按列存储，同时还按向量(列的一部分)进行处理，这样可以更加高效地使用CPU。</p>
</li>
<li>
<p>实时的数据更新
ClickHouse支持在表中定义主键。为了使查询能够快速在主键中进行范围查找，数据总是以增量的方式有序的存储在MergeTree中。因此，数据可以持续不断地高效的写入到表中，并且写入的过程中不会存在任何加锁的行为。</p>
</li>
<li>
<p>索引
按照主键对数据进行排序，这将帮助ClickHouse在几十毫秒以内完成对数据特定值或范围的查找</p>
</li>
<li>
<p>适合在线查询
在线查询意味着在没有对数据做任何预处理的情况下以极低的延迟处理查询并将结果加载到用户的页面中。</p>
</li>
<li>
<p>支持近似计算
ClickHouse提供各种各样在允许牺牲数据精度的情况下对查询进行加速的方法：</p>
</li>
</ul>
<p>用于近似计算的各类聚合函数，如：distinct values, medians, quantiles
基于数据的部分样本进行近似查询。这时，仅会从磁盘检索少部分比例的数据。
不使用全部的聚合条件，通过随机选择有限个数据聚合条件进行聚合。这在数据聚合条件满足某些分布条件下，在提供相当准确的聚合结果的同时降低了计算资源的使用。</p>
<ul>
<li>
<p>自适应连接算法
ClickHouse支持自定义JOIN多个表，它更倾向于散列连接算法，如果有多个大表，则使用合并-连接算法</p>
</li>
<li>
<p>支持数据复制和数据完整性
ClickHouse使用异步的多主复制技术。当数据被写入任何一个可用副本后，系统会在后台将数据分发给其他副本，以保证系统在不同副本上保持相同的数据。在大多数情况下ClickHouse能在故障后自动恢复，在一些少数的复杂情况下需要手动恢复。</p>
</li>
<li>
<p>角色的访问控制
ClickHouse使用SQL查询实现用户帐户管理，并允许角色的访问控制，类似于ANSI SQL标准和流行的关系数据库管理系统。</p>
</li>
<li>
<p>没有什么事情是完美的，缺陷在于：
没有完整的事务支持。
缺少高频率，低延迟的修改或删除已存在数据的能力。仅能用于批量删除或修改数据，但这符合 GDPR。
稀疏索引使得ClickHouse不适合通过其键检索单行的点查询。</p>
<p>直观的感受下列式存储
<img src="https://www.liritian.com/wp-content/uploads/2023/05/351685374107_.pic_.jpg" alt="" /></p>
<p>相比于行式存储，列式存储在分析场景下有着许多优良的特性。</p>
</li>
</ul>
<p>1）如前所述，分析场景中往往需要读大量行但是少数几个列。在行存模式下，数据按行连续存储，所有列的数据都存储在一个block中，不参与计算的列在IO时也要全部读出，读取操作被严重放大。而列存模式下，只需要读取参与计算的列即可，极大的减低了IO cost，加速了查询。</p>
<p>2）同一列中的数据属于同一类型，压缩效果显著。列存往往有着高达十倍甚至更高的压缩比，节省了大量的存储空间，降低了存储成本。</p>
<p>3）更高的压缩比意味着更小的data size，从磁盘中读取相应数据耗时更短。</p>
<p>4）自由的压缩算法选择。不同列的数据具有不同的数据类型，适用的压缩算法也就不尽相同。可以针对不同列类型，选择最合适的压缩算法。</p>
<p>5）高压缩比，意味着同等大小的内存能够存放更多数据，系统cache效果更好。</p>
<p>官方数据显示，通过使用列存，在某些分析场景下，能够获得100倍甚至更高的加速效应。</p>
<p>ClickHouse支持在建表时，指定将数据按照某些列进行sort by。</p>
<p>排序后，保证了相同sort key的数据在磁盘上连续存储，且有序摆放。在进行等值、范围查询时，where条件命中的数据都紧密存储在一个或若干个连续的Block中，而不是分散的存储在任意多个Block， 大幅减少需要IO的block数量。另外，连续IO也能够充分利用操作系统page cache的预取能力，减少page fault。</p>
<ul>
<li>主键索引
ClickHouse支持主键索引，它将每列数据按照index granularity（默认8192行）进行划分，每个index granularity的开头第一行被称为一个mark行。主键索引存储该mark行对应的primary key的值。</li>
</ul>
<p>对于where条件中含有primary key的查询，通过对主键索引进行二分查找，能够直接定位到对应的index granularity，避免了全表扫描从而加速查询。</p>
<p>但是值得注意的是：ClickHouse的主键索引与MySQL等数据库不同，它并不用于去重，即便primary key相同的行，也可以同时存在于数据库中。要想实现去重效果，需要结合具体的表引擎ReplacingMergeTree、CollapsingMergeTree、VersionedCollapsingMergeTree实现，我们会在未来的文章系列中再进行详细解读。</p>
<ul>
<li>稀疏索引
（在kafka里面也有这个稀疏索引）
ClickHouse支持对任意列创建任意数量的稀疏索引。其中被索引的value可以是任意的合法SQL Expression，并不仅仅局限于对column value本身进行索引。之所以叫稀疏索引，是因为它本质上是对一个完整index granularity（默认8192行）的统计信息，并不会具体记录每一行在文件中的位置。目前支持的稀疏索引类型包括：</li>
</ul>
<p>minmax: 以index granularity为单位，存储指定表达式计算后的min、max值；在等值和范围查询中能够帮助快速跳过不满足要求的块，减少IO。
set(max_rows)：以index granularity为单位，存储指定表达式的distinct value集合，用于快速判断等值查询是否命中该块，减少IO。
ngrambf_v1(n, size_of_bloom_filter_in_bytes, number_of_hash_functions, random_seed)：将string进行ngram分词后，构建bloom filter，能够优化等值、like、in等查询条件。
tokenbf_v1(size_of_bloom_filter_in_bytes, number_of_hash_functions, random_seed)： 与ngrambf_v1类似，区别是不使用ngram进行分词，而是通过标点符号进行词语分割。
bloom_filter([false_positive])：对指定列构建bloom filter，用于加速等值、like、in等查询条件的执行。
数据Sharding</p>
<p>数据Sharding
ClickHouse支持单机模式，也支持分布式集群模式。在分布式模式下，ClickHouse会将数据分为多个分片，并且分布到不同节点上。不同的分片策略在应对不同的SQL Pattern时，各有优势。ClickHouse提供了丰富的sharding策略，让业务可以根据实际需求选用。</p>
<p>1） random随机分片：写入数据会被随机分发到分布式集群中的某个节点上。</p>
<p>2） constant固定分片：写入数据会被分发到固定一个节点上。</p>
<p>3）column value分片：按照某一列的值进行hash分片。</p>
<p>4）自定义表达式分片：指定任意合法表达式，根据表达式被计算后的值进行hash分片。</p>
<p>数据分片，让ClickHouse可以充分利用整个集群的大规模并行计算能力，快速返回查询结果。</p>
<p>更重要的是，多样化的分片功能，为业务优化打开了想象空间。比如在hash sharding的情况下，JOIN计算能够避免数据shuffle，直接在本地进行local join； 支持自定义sharding，可以为不同业务和SQL Pattern定制最适合的分片策略；利用自定义sharding功能，通过设置合理的sharding expression可以解决分片间数据倾斜问题等。</p>
<p>另外，sharding机制使得ClickHouse可以横向线性拓展，构建大规模分布式集群，从而具备处理海量数据的能力。</p>
<p>数据Partitioning
ClickHouse支持PARTITION BY子句，在建表时可以指定按照任意合法表达式进行数据分区操作，比如通过toYYYYMM()将数据按月进行分区、toMonday()将数据按照周几进行分区、对Enum类型的列直接每种取值作为一个分区等。</p>
<p>数据Partition在ClickHouse中主要有两方面应用：</p>
<p>在partition key上进行分区裁剪，只查询必要的数据。灵活的partition expression设置，使得可以根据SQL Pattern进行分区设置，最大化的贴合业务特点。
对partition进行TTL管理，淘汰过期的分区数据。
数据TTL
在分析场景中，数据的价值随着时间流逝而不断降低，多数业务出于成本考虑只会保留最近几个月的数据，ClickHouse通过TTL提供了数据生命周期管理的能力。</p>
<p>ClickHouse支持几种不同粒度的TTL：</p>
<p>数据TTL
在分析场景中，数据的价值随着时间流逝而不断降低，多数业务出于成本考虑只会保留最近几个月的数据，ClickHouse通过TTL提供了数据生命周期管理的能力。</p>
<p>ClickHouse支持几种不同粒度的TTL：</p>
<p>1） 列级别TTL：当一列中的部分数据过期后，会被替换成默认值；当全列数据都过期后，会删除该列。</p>
<p>2）行级别TTL：当某一行过期后，会直接删除该行。</p>
<p>3）分区级别TTL：当分区过期后，会直接删除该分区。</p>
<p>高吞吐写入能力
ClickHouse采用类LSM Tree的结构，数据写入后定期在后台Compaction。通过类LSM tree的结构，ClickHouse在数据导入时全部是顺序append写，写入后数据段不可更改，在后台compaction时也是多个段merge sort后顺序写回磁盘。顺序写的特性，充分利用了磁盘的吞吐能力，即便在HDD上也有着优异的写入性能。</p>
<p>官方公开benchmark测试显示能够达到50MB-200MB/s的写入吞吐能力，按照每行100Byte估算，大约相当于50W-200W条/s的写入速度。</p>
<p>有限支持delete、update
在分析场景中，删除、更新操作并不是核心需求。ClickHouse没有直接支持delete、update操作，而是变相支持了mutation操作，语法为alter table delete where filter_expr,alter table update col=val where filter_expr。</p>
<p>目前主要限制为删除、更新操作为异步操作，需要后台compation之后才能生效</p>
<p>主备同步
ClickHouse通过主备复制提供了高可用能力，主备架构下支持无缝升级等运维操作。而且相比于其他系统它的实现有着自己的特色：</p>
<p>1）默认配置下，任何副本都处于active模式，可以对外提供查询服务；</p>
<p>2）可以任意配置副本个数，副本数量可以从0个到任意多个；</p>
<p>3）不同shard可以配置不提供副本个数，用于解决单个shard的查询热点问题；
主备同步
ClickHouse通过主备复制提供了高可用能力，主备架构下支持无缝升级等运维操作。而且相比于其他系统它的实现有着自己的特色：</p>
<p>1）默认配置下，任何副本都处于active模式，可以对外提供查询服务；</p>
<p>2）可以任意配置副本个数，副本数量可以从0个到任意多个；</p>
<p>3）不同shard可以配置不提供副本个数，用于解决单个shard的查询热点问题；</p>
<p>ClickHouse计算层
ClickHouse在计算层做了非常细致的工作，竭尽所能榨干硬件能力，提升查询速度。它实现了单机多核并行、分布式计算、向量化执行与SIMD指令、代码生成等多种重要技术。</p>
<ul>
<li>多核并行
ClickHouse将数据划分为多个partition，每个partition再进一步划分为多个index granularity，然后通过多个CPU核心分别处理其中的一部分来实现并行数据处理。</li>
</ul>
<p>在这种设计下，单条Query就能利用整机所有CPU。极致的并行处理能力，极大的降低了查询延时。</p>
<ul>
<li>分布式计算
除了优秀的单机并行处理能力，ClickHouse还提供了可线性拓展的分布式计算能力。ClickHouse会自动将查询拆解为多个task下发到集群中，然后进行多机并行处理，最后把结果汇聚到一起。</li>
</ul>
<p>在存在多副本的情况下，ClickHouse提供了多种query下发策略：</p>
<p>随机下发：在多个replica中随机选择一个；
最近hostname原则：选择与当前下发机器最相近的hostname节点，进行query下发。在特定的网络拓扑下，可以降低网络延时。而且能够确保query下发到固定的replica机器，充分利用系统cache。
in order：按照特定顺序逐个尝试下发，当前一个replica不可用时，顺延到下一个replica。
first or random：在In Order模式下，当第一个replica不可用时，所有workload都会积压到第二个Replica，导致负载不均衡。first or random解决了这个问题：当第一个replica不可用时，随机选择一个其他replica，从而保证其余replica间负载均衡。另外在跨region复制场景下，通过设置第一个replica为本region内的副本，可以显著降低网络延时。
向量化执行与SIMD
ClickHouse不仅将数据按列存储，而且按列进行计算。传统OLTP数据库通常采用按行计算，原因是事务处理中以点查为主，SQL计算量小，实现这些技术的收益不够明显。但是在分析场景下，单个SQL所涉及计算量可能极大，将每行作为一个基本单元进行处理会带来严重的性能损耗：</p>
<p>1）对每一行数据都要调用相应的函数，函数调用开销占比高；</p>
<p>2）存储层按列存储数据，在内存中也按列组织，但是计算层按行处理，无法充分利用CPU cache的预读能力，造成CPU Cache miss严重；</p>
<p>3）按行处理，无法利用高效的SIMD指令；</p>
<p>ClickHouse实现了向量执行引擎（Vectorized execution engine），对内存中的列式数据，一个batch调用一次SIMD指令（而非每一行调用一次），不仅减少了函数调用次数、降低了cache miss，而且可以充分发挥SIMD指令的并行能力，大幅缩短了计算耗时。向量执行引擎，通常能够带来数倍的性能提升。</p>
<p>补充：单指令流多数据流（英语：Single Instruction Multiple Data，缩写：SIMD）是一种采用一个控制器来控制多个处理器，同时对一组数据（又称“数据向量”）中的每一个分别执行相同的操作从而实现空间上的并行性的技术。
单指令流单数据流（SISD）型CPU对加法指令译码后，执行部件先访问主存，取得第一个操作数，之后再一次访问主存，取得第二个操作数，随后才能进行求和运算；而在SIMD型CPU中，指令译码后，几个执行部件同时访问主存，一次性获得所有操作数进行运算。这一特点使得SIMD技术特别适合于多媒体应用等数据密集型运算</p>
<p>动态代码生成Runtime Codegen
在经典的数据库实现中，通常对表达式计算采用火山模型，也即将查询转换成一个个operator，比如HashJoin、Scan、IndexScan、Aggregation等。为了连接不同算子，operator之间采用统一的接口，比如open/next/close。在每个算子内部都实现了父类的这些虚函数，在分析场景中单条SQL要处理数据通常高达数亿行，虚函数的调用开销不再可以忽略不计。另外，在每个算子内部都要考虑多种变量，比如列类型、列的size、列的个数等，存在着大量的if-else分支判断导致CPU分支预测失效。</p>
<p>ClickHouse实现了Expression级别的runtime codegen，动态地根据当前SQL直接生成代码，然后编译执行。如下图例子所示，对于Expression直接生成代码，不仅消除了大量的虚函数调用（即图中多个function pointer的调用），而且由于在运行时表达式的参数类型、个数等都是已知的，也消除了不必要的if-else分支判断。</p>
<p>近似计算
近似计算以损失一定结果精度为代价，极大地提升查询性能。在海量数据处理中，近似计算价值更加明显。</p>
<p>ClickHouse实现了多种近似计算功能：</p>
<p>近似估算distinct values、中位数，分位数等多种聚合函数；
建表DDL支持SAMPLE BY子句，支持对于数据进行抽样处理；
复杂数据类型支持
ClickHouse还提供了array、json、tuple、set等复合数据类型，支持业务schema的灵活变更</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1677</wp:post_id>
		<wp:post_date><![CDATA[2023-05-29 23:24:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-05-29 15:24:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 10:58:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 02:58:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clickhouse-%e5%88%9d%e8%af%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9e%b6%e6%9e%84%e5%b8%88"><![CDATA[Clickhouse]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ClickHouse的安装]]></title>
		<link>https://www.liritian.com/archives/clickhouse%e7%9a%84%e5%ae%89%e8%a3%85/</link>
		<pubDate>Tue, 30 May 2023 04:54:02 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1683</guid>
		<description></description>
		<content:encoded><![CDATA[<ol>
<li>mac中安装docker
2.docker的源建议为http://hub-mirrors.c.163.com
3.下载客户端
<ul>
<li>docker pull yandex/clickhouse-client
4.下载服务端</li>
<li>docker pull yandex/clickhouse-server</li>
</ul></li>
<li>
<p>创建单独的network
docker create network ck_net
6.用下载好的镜像启动容器
docker run -d --name ck-server --network=ck<em>net --ulimit nofile=262144:262144 --volume=$HOME/www/clickhouse:/var/lib/clickhouse yandex/clickhouse-server
7.验证是否启动完成
![](<a href="https://www.liritian.com/wp-content/uploads/2023/05/391685456754">https://www.liritian.com/wp-content/uploads/2023/05/391685456754</a></em>.pic_.jpg)
8.进入容器 docker exec -it ck-server /bin/bash
9.启动客户端 clickhouse-client
10.进入客户端 查看数据库 show databases;没错就是它，跟mysql 一模一样
11.创建一个数据库玩玩 create database if not exists jack；
12.切换数据库 use jack;嘿嘿 还是它
13.创建一个表看下
create table jack.user(user_id UInt32,message String,timestamp Datetime,metric Float32)ENGINE=MergeTree()PRIMARY KEY(user_id,timestamp)</p>
<p>CREATE TABLE jack.user
(
<code>user_id</code> UInt32,
<code>message</code> String,
<code>timestamp</code> Datetime,
<code>metric</code> Float32
)
ENGINE = MergeTree //注意引擎不一样哦
PRIMARY KEY (user_id, timestamp)</p>
</li>
</ol>
<p>14.插入几条数据咯
INSERT INTO jack.user (user_id, message, timestamp, metric) VALUES
(101, 'Hello, ClickHouse!',                                 now(),       -1.0    ),
(102, 'Insert a lot of rows per batch',                     yesterday(), 1.41421 ),
(102, 'Sort your data based on your commonly-used queries', today(),     2.718   ),
(101, 'Granules are the smallest chunks of data read',      now() + 5,   3.14159 )</p>
<p>15.查询一下 见证一下 奇迹
select <em> from user; yeah 你肯定猜到了
<img src="https://www.liritian.com/wp-content/uploads/2023/05/411685457327_.pic_.jpg" alt="查询ck" />
还可以增加排序 select </em> from user order by timestamp asc 或者desc</p>
<p>16.来点不一样的吧
select * from user order by timestamp desc format tabseparated
<img src="https://www.liritian.com/wp-content/uploads/2023/05/451685457496_.pic_.jpg" alt="ck tabSeperated" /></p>
<p>17.搞个大的
英国房地产支付价格
该数据集包含自 1995 年以来有关英格兰和威尔士房地产价格的数据。未压缩的大小约为 4 GiB，在 ClickHouse 中大约需要 278 MiB。足足2000多万的数据啊，谨慎操作，很漫长的，因为great wall的原因</p>
<ul>
<li>建张表</li>
<li>CREATE TABLE uk_price_paid
(
price UInt32,
date Date,
postcode1 LowCardinality(String),
postcode2 LowCardinality(String),
type Enum8('terraced' = 1, 'semi-detached' = 2, 'detached' = 3, 'flat' = 4, 'other' = 0),
is_new UInt8,
duration Enum8('freehold' = 1, 'leasehold' = 2, 'unknown' = 0),
addr1 String,
addr2 String,
street LowCardinality(String),
locality LowCardinality(String),
town LowCardinality(String),
district LowCardinality(String),
county LowCardinality(String)
)
ENGINE = MergeTree
ORDER BY (postcode1, postcode2, addr1, addr2);
<ul>
<li>重头戏插数据咯
INSERT INTO uk_price_paid
WITH
splitByChar(' ', postcode) AS p
SELECT
toUInt32(price_string) AS price,
parseDateTimeBestEffortUS(time) AS date,
p[1] AS postcode1,
p[2] AS postcode2,
transform(a, ['T', 'S', 'D', 'F', 'O'], ['terraced', 'semi-detached', 'detached', 'flat', 'other']) AS type,
b = 'Y' AS is_new,
transform(c, ['F', 'L', 'U'], ['freehold', 'leasehold', 'unknown']) AS duration,
addr1,
addr2,
street,
locality,
town,
district,
county
FROM url(
'<a href="http://prod.publicdata.landregistry.gov.uk.s3-website-eu-west-1.amazonaws.com/pp-complete.csv">http://prod.publicdata.landregistry.gov.uk.s3-website-eu-west-1.amazonaws.com/pp-complete.csv</a>',
'CSV',
'uuid_string String,
price_string String,
time String,
postcode String,
a String,
b String,
c String,
addr1 String,
addr2 String,
street String,
locality String,
town String,
district String,
county String,
d String,
e String'
) SETTINGS max_http_get_redirects=10;</li>
</ul></li>
</ul>
<p>将从pp-complete.csv把数据源源不断的塞进ck里面，时间很漫长……天黑请闭眼。</p>
<ul>
<li>时间很漫长……</li>
<li>时间很漫长……</li>
<li>时间很漫长……</li>
<li>很漫长……</li>
<li>漫长……</li>
<li>长……</li>
<li>……</li>
</ul>
<p>睡了一觉之后醒来，发现终于可以了
<img src="https://www.liritian.com/wp-content/uploads/2023/05/471685459425_.pic_.jpg" alt="插入2000万数据耗时" />
将近一个小时的等待，花都谢了~</p>
<ul>
<li>赶快验证下结果</li>
<li><img src="https://www.liritian.com/wp-content/uploads/2023/05/491685459642_.pic_.jpg" alt="两千八百万数据" />
2800万数据，0.023s
嘻嘻 是不是很棒</li>
<li>查看下表的大小
SELECT formatReadableSize(total_bytes)
FROM system.tables
WHERE name = 'uk_price_paid'</li>
</ul>
<p><img src="https://www.liritian.com/wp-content/uploads/2023/05/511685459792_.pic_.jpg" alt="300m" />
300M 看来压缩的不错</p>
<ul>
<li>小试牛刀
查询每年平均价格
SELECT
toYear(date) AS year,
round(avg(price)) AS price,
bar(price, 0, 1000000, 80
)
FROM uk_price_paid
GROUP BY year
ORDER BY year</li>
</ul>
<p><img src="https://www.liritian.com/wp-content/uploads/2023/05/531685459897_.pic_.jpg" alt="" /></p>
<p>处理了28.21millions 用了2.571s 我还以为在1s内，哎有点失望，毕竟看其他文章20万亿都是秒级，可能是我老婆的电脑不行，破mac 垃圾mac。不过比mysql 好多了曾经我们的用户表2200万，我业务里都查不动了。</p>
<ul>
<li>
<p>查询伦敦每年的平均价格
SELECT
toYear(date) AS year,
round(avg(price)) AS price,
bar(price, 0, 2000000, 100
)
FROM uk_price<em>paid
WHERE town = 'LONDON'
GROUP BY year
ORDER BY year
![london每年的房价](<a href="https://www.liritian.com/wp-content/uploads/2023/05/551685506521">https://www.liritian.com/wp-content/uploads/2023/05/551685506521</a></em>.pic_.jpg)
还好速度在0.247sec里面
tips：2020 年london房价出事了！但这并不令人意外……</p>
</li>
<li>
<p>只买最贵的，不买最对的 就是有钱，给王阿姨查一下london最贵的房子价格
town,
district,
count() AS c,
round(avg(price)) AS price,
bar(price, 0, 5000000, 100)
FROM uk_price_paid
WHERE date &gt;= '2020-01-01'
GROUP BY
town,
district
HAVING c &gt;= 100
ORDER BY price DESC
LIMIT 10;
<img src="https://www.liritian.com/wp-content/uploads/2023/05/WeChat89a11bf31fd81a2376cfb4f6c63f0b2c.jpg" alt="london前十" />
这个是前十的房子，前一百的图太大截图截不下来。
哎呀0.675s 表现不行啊，有没有让它更快的方法？</p>
</li>
<li>
<p>有，构建投影
让我们通过维度 toYear(date)、district 和 town 创建一个聚合 Projection：
ALTER TABLE uk_price_paid
ADD PROJECTION projection_by_year_district_town(
SELECT
toYear(date),
district,
town,
avg(price),
sum(price),
count()
GROUP BY
toYear(date),
district,
town
)
此时我又查了一下，结果是0.746s，比刚才还慢了。
填充现有数据的 Projection。 （如果不进行 materialize 操作，则 ClickHouse 只会为新插入的数据创建 Projection）：</p>
</li>
</ul>
<p>ALTER TABLE uk_price_paid
MATERIALIZE PROJECTION projection_by_year_district_town
SETTINGS mutations_sync = 1</p>
<p>让我们来做个测试：
分别执行每年的价格、伦敦每年的平均价格、房价前100的sql
具体数值是0.342s、0.934s、0.822，之前的分别是2.571s，0.247s，1.010s 这个数据看起来除了伦敦每年的平均价格都降了一些。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1683</wp:post_id>
		<wp:post_date><![CDATA[2023-05-30 12:54:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-05-30 04:54:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 12:16:36]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 04:16:36]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clickhouse%e7%9a%84%e5%ae%89%e8%a3%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9e%b6%e6%9e%84%e5%b8%88"><![CDATA[Clickhouse]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ClickHouse的基本操作]]></title>
		<link>https://www.liritian.com/archives/clickhouse%e7%9a%84%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95php%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95/</link>
		<pubDate>Tue, 30 May 2023 04:54:33 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1685</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
<li>
<p>创建表
CREATE TABLE jack
(
<code>hansome</code> String,
<code>age</code> UInt32,
<code>sex</code> UInt32
)
ENGINE = Memory</p>
</li>
<li>
<p>插入表
insert into table jack(*) values('yes',18,1),('no',30,2);
如果想排除某个字段</p>
<ul>
<li>insert into table jack(* except(age)) values('yes',1),('no',2);这样age字段就不会被插入了</li>
</ul>
</li>
<li>
<p>清空表
truncate table if exists  jack;
如果需要指定集群和数据库
truncate table if exists default.jack on cluster zk-server</p>
<ul>
<li>删除表
DROP [TEMPORARY] TABLE [IF EXISTS] [db.]name [ON CLUSTER cluster]
drop table if exists default.jack on cluster zk-server</li>
</ul>
</li>
<li>
<p>查看表结构</p>
<ul>
<li>describe jack;</li>
<li>show create table;
┌─statement─────────────────────────────────────────────────────────────────────────────────────┐
│ CREATE TABLE jack.jack
(
<code>hansome</code> String,
<code>age</code> UInt32,
<code>sex</code> UInt32
)
ENGINE = Memory │
└───────────────────────────────────────────────────────────────────────────────────────────────┘</li>
</ul>
</li>
<li>
<p>查询</p>
<ul>
<li>ALL子句
select sum(number) from numbers(10);
跟select sum(ALL number) from numbers(10) 一样</li>
<li>
<p>ARRAY JOIN</p>
<ul>
<li>
<p>对于包含数组列的表来说是一种常见的操作，用于生成一个新表，该表具有包含该初始列中的每个单独数组元素的列，而其他列的值将被重复显示
听起来感觉比较抽象实操一下</p>
<pre><code>创建一个表
    CREATE TABLE arrays_test
    (
        s String,
        arr Array(UInt8)
    ) ENGINE = Memory;
    插入数据
    INSERT INTO arrays_test
    VALUES (&#039;Hello&#039;, [1,2]), (&#039;World&#039;, [3,4,5]), (&#039;Goodbye&#039;, []);
先正常查一下
SELECT * FROM arrays_test
                ┌─s───────┬─arr─────┐
                │ Hello   │ [1,2]   │
                │ World   │ [3,4,5] │
                │ Goodbye │ []      │
                └─────────┴───────┘
                 然后使用 array join
                 SELECT s, arr
                FROM arrays_test
                ARRAY JOIN arr;
                ┌─s─────┬─arr─┐
                │ Hello │   1 │
                │ Hello │   2 │
                │ World │   3 │
                │ World │   4 │
                │ World │   5 │
                └──────┴─────┘
                再用left ARRAY JOIN
                SELECT
                    s,
                    arr
                FROM arrays_test
                LEFT ARRAY JOIN arr

                ┌─s───────┬─arr─┐
                │ Hello   │   1 │
                │ Hello   │   2 │
                │ World   │   3 │
                │ World   │   4 │
                │ World   │   5 │
                │ Goodbye │   0 │
                └───────┴─────┘
                使用别名
                SELECT
                    s,
                    arr,
                    a
                FROM arrays_test
                ARRAY JOIN arr AS a

                ┌─s─────┬─arr─────┬─a─┐
                │ Hello │ [1,2]   │ 1 │
                │ Hello │ [1,2]   │ 2 │
                │ World │ [3,4,5] │ 3 │
                │ World │ [3,4,5] │ 4 │
                │ World │ [3,4,5] │ 5 │
                └───────┴──────┴───┘</code></pre>
</li>
</ul>
</li>
<li>Limit
<ul>
<li>select * from arrays_test limit 1;</li>
<li>select * from arrays_test limit 1,2;</li>
<li>select * from arrays_test limit 2 offset 1;</li>
<li>limit with ties 注意一定要搭配order by 使用
<ul>
<li>
<pre><code>SELECT * FROM (
SELECT number%50 AS n FROM numbers(100)
) ORDER BY n LIMIT 0,5 WITH TIES
返回结果，虽然指定了LIMIT 5, 但第6行的n字段值为2，与第5行相同，因此也作为满足条件的记录返回。 简而言之，该修饰符可理解为是否增加“并列行”的数据。
┌─n─┐
│ 0      │
│ 0      │
│ 1      │
│ 1      │
│ 2      │
│ 2      │
└───┘</code></pre>
</li>
</ul></li>
</ul></li>
<li>offset  fetch clause
<ul>
<li>offset和fetch可以让我们按比例来检索数据</li>
<li>格式 select <em> from test_fetch order by a offset 1 row fetch first 3 rows only,它其实和SELECT </em> FROM test_fetch ORDER BY a LIMIT 3 OFFSET 1; 是等价的，也可以搭配with ties使用</li>
</ul></li>
</ul>
</li>
<li>
<p>分组</p>
<ul>
<li>select x from t_null_pig group by x 这里跟mysql的SQL_MODE=only_full_group_by要求差不多，group x 查询的只能有x</li>
<li>可以跟聚合函数，</li>
</ul>
</li>
<li>
<p>聚合</p>
</li>
<li>
<p>排序</p>
</li>
<li>
<p>ALTER</p>
<ul>
<li>column 字段修改</li>
<li>添加新的字段 add column
<ul>
<li>alter table mt add column if not exists id UInt32 default 0 FIRST;
给mt表增加一个 id 字段 UInt32 类型 默认为0 且插入到第一位。</li>
</ul></li>
<li>删除字段 drop column
<ul>
<li>alter table mt drop column  number; 删除字段</li>
</ul></li>
<li>字段改名
<ul>
<li>alter table mt rename column id to idd;</li>
</ul></li>
<li>字段注释
<ul>
<li>alter table mt comment column if exisits idd 'id主键'</li>
</ul></li>
<li>修改字段
<ul>
<li>alter table mt modify column if exists idd UInt16 default 1;</li>
</ul></li>
<li>修改字段顺序
<ul>
<li>alter table users modify column c2 String FIRST 就把C2放到C1的前面（CREATE TABLE users (
c1 Int16,
c2 String
) ENGINE = MergeTree
ORDER BY c1;）</li>
</ul></li>
</ul>
</li>
<li>
<p>索引</p>
<ul>
<li>
<p>在MergeTree中PRIMARY KEY 主键并不用于去重，而是用于索引，加快查询速度,MergeTree会根据index_granularity间隔（默认8192行），为数据表生成一级索引并保存至primary.idx文件内，索引数据按照PRIMARY KEY 排序，相对于使用PRIMARY KEY 更常见的方式是通过ORDER BY 方式指定主键。</p>
</li>
<li>
<p>稀疏索引</p>
</li>
<li>
<p>稠密索引
在稠密索引中每一行索引标记都会对应到一行具体的数据记录。而在稀疏索引中每一行索引标记对应的是一段数据，而不是一行。稀疏索引的优势显而易见，仅需要使用少量的索引标记就能够记录大量的数据区间位置信息，而且数据量越大优势越明显。在MergeTree系列引擎表中对应的primary.idx文件就是稀疏索引，由于稀疏索引占用空间小，所以primary.idx内的索引数据常驻内存</p>
</li>
<li>
<p>索引粒度</p>
<ul>
<li>在ClickHouse MergeTree引擎中默认的索引粒度是8192，参数为index_granularity，一般我们不会修改此值，按照默认8192即可。我们可以通过以下sql语句查看每个MergeTree引擎表对应的index_granulariry的值：
show create table mt;显示 SETTINGS index_granularity = 8192 索引粒度对于MergeTree表引擎非常重要，可以根据整个数据的长度，按照索引粒度对数据进行标注，然后抽取对应的数据形成索引；</li>
</ul>
</li>
<li>
<p>索引形成过程
表数据以index_granularity的粒度（默认8192）被标记成多个小区间，其中每个区间最多8192行数据，每个区间标记后形成一个MarkRange,通过start和end表示MarkRange的具体范围；
数据文件也会按照index_granularity的间隔粒度生成压缩数据块；
由于是稀疏索引，MergeTree需要间隔index_granularity行数据生成一条索引，同时对应一个索引编号，每个MarkRange与一个索引编号对应，通过与start及end对应的索引编号的取值，可以得到对应的数值区间；索引编号对应的索引值会依据声明的主键字段获取，最终索引编号和索引值被写入primary.idx文件中保存。
假设一份数据共有192行，index<em>granularity=3 那么一共有192/3=64个MarkRange区间，还有一个最大的区间为[0,+inf)
![索引](<a href="https://www.liritian.com/wp-content/uploads/2023/05/2791686027076">https://www.liritian.com/wp-content/uploads/2023/05/2791686027076</a></em>.pic_.jpg)</p>
<p>[0,3)[3,6)[6,9)...
ps:[a,b] 闭区间，包含两端，（a,b）开区间，不含两端的数字
<img src="https://www.liritian.com/wp-content/uploads/2023/05/2781686026892_.pic_.jpg" alt="index_granularity" />
其中strat:0,end:1 表示第一个markRange的开头和结尾的值的具体范围</p>
<p>使用索引查询其实就是两个数值区间的交集判断，其中一个区间是有基于主键的查询条件转换而来的条件区间，而另一个区间是上图中MarkRange对应的数值区间。</p>
</li>
</ul>
</li>
</ul>
<p>整个索引查询的过程大致分为3个步骤：</p>
<p>1、生成查询条件区间</p>
<p>查询时首先将查询条件转换为条件区间，即便是单个值的查询条件也会转换成区间的形式，例如：</p>
<p>WHERE ID='A003'
['A003','A003'] //闭区间 包含边界![索引]</p>
<p>WHERE ID&gt;'A000'
['A000',+inf]</p>
<p>WHERE ID&lt;'A188'
(-inf,'A188']</p>
<p>WHERE ID like 'A006%'
('A006','A007']
​</p>
<ul>
<li>递归交集判断</li>
</ul>
<p>以递归的方式依次对MarkRange的数值区间与条件区间做交集判断，从最大的区间[A000,+inf)开:</p>
<p>如果不存在交集，则直接忽略掉整段MarkRange
如果存在交集，且MarkRange步长大于8(end-start),则将此区间进一步拆分成8个区间（由merge_tree_coarse_index_granularity指定，默认值为8），并重复此规则，继续做递归交集判断。
如果存在交集，且MarkRange不可再分解（步长小于8），则记录MarkRange并返回。</p>
<ul>
<li>合并MarkRange区间</li>
</ul>
<p>将最终匹配的MarkRange聚在一起，合并他们的范围。</p>
<p>当查询条件WHERE ID ='A003'的时候，最终读取[A000,A003)和[A003,A006]两个区间的数据即可，他们对应的MarkRange(start:0,end:2)范围，而无其他无用的区间都被裁剪过滤掉，因为MarkRange转换的数值区间是闭区间，所以会额外匹配到临近的一个区间</p>
<ul>
<li>二级索引（跳数索引）
除了一级索引之外，MergeTree同样支持二级索引，二级索引又称为跳数索引，由数据的聚合信息构建而成，根据索引类型的不同，其聚合信息的内容也不同，跳数索引的目的与一级索引一样，也是帮助查询时减少数据扫描的范围。</li>
</ul>
<p>跳数索引需要在Create语句内定义，完整语法如下：</p>
<p>INDEX index_name expr TYPE index_type(...) GRANULARITY granularity
​</p>
<p>对以上参数的解释如下：</p>
<p>index_name:定义的二级索引名称
index_type:跳数索引类型，最常用就是minmax索引类型。minmax索引记录了一段数据内的最小和最大极值，其索引的作用类似分区目录，能够快速跳过无用的数据区间。
granularity:定义聚合信息汇总的粒度。
与一级索引一样，如果在建表语句中声明了跳数索引，则会在路径“/var/lib/ClickHouse/data/DATABASE/TABLE/PARTITION/”目录下生成索引与标记文件（skp_idx.idx与skp_idx.mrk）。
在接触跳数索引时，很容易将index_granularity与granularity概念混淆，对于跳数索引而言，index_granularity定义了数据的粒度，而granularity定义了聚合信息汇总的粒度，也就是说，granularity定义了一行跳数索引能够跳过多少个index_granularity区间的数据。
minmax跳数索引的生成规则</p>
<p>minmax跳数索引聚合信息是在一个index_granularity区间内数据的最小和最大极值。首先，数据按照index_granularity粒度间隔将数据划分成n段，总共有[0~n-1]个区间（n=total_rows/index_granularity，向上取整），接着根据跳数索引从0区间开始，依次按index_granularity粒度从数据中获取聚合信息，每次向前移动1步，聚合信息逐步累加，最后当移动granularity次区间时，则汇总并生成一行跳数索引数据。</p>
<p>以下图为例：假设index_granularity=8192且granularity=3,则数据会按照index<em>granularity划分成n等份，MergeTree从第0段分区开始，依次获取聚合信息，当获取到第3个分区时（granularity=3），则汇总并生成第一行minmax索引（前3段minmax极值汇总后取值为[1,9]）![](<a href="https://www.liritian.com/wp-content/uploads/2023/05/2801686027418">https://www.liritian.com/wp-content/uploads/2023/05/2801686027418</a></em>.pic_.jpg)</p>
<ul>
<li>minmax跳数索引案例：</li>
</ul>
<h1>删除表 t_mt</h1>
<p>node1 :) drop table t_mt;</p>
<h1>重新创建t_mt表，包含二级索引</h1>
<p>node1 :)CREATE TABLE t_mt
(
id UInt8,
name String,
age UInt8,
birthday Date,
location String,
INDEX a id TYPE minmax GRANULARITY 5
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(birthday)
ORDER BY (id, age)
PRIMARY KEY id</p>
<h1>插入数据</h1>
<p>insert into t_mt values (1,'张三',18,'2021-06-01','上海'), (2,'李四',19,'2021-02-10','北京'), (3,'王五',12,'2021-06-01','天津'), (1,'马六',10,'2021-06-18','上海'), (5,'田七',22,'2021-02-09','广州');</p>
<p>可以看下索引的地方
<img src="https://www.liritian.com/wp-content/uploads/2023/05/2811686027657_.pic_.jpg" alt="" /></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1685</wp:post_id>
		<wp:post_date><![CDATA[2023-05-30 12:54:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-05-30 04:54:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 12:16:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 04:16:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clickhouse%e7%9a%84%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95php%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9e%b6%e6%9e%84%e5%b8%88"><![CDATA[Clickhouse]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ClickHouse 相关概念]]></title>
		<link>https://www.liritian.com/archives/clickhouse-%e7%9b%b8%e5%85%b3%e6%a6%82%e5%bf%b5/</link>
		<pubDate>Thu, 01 Jun 2023 04:58:25 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1704</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Clickhouse执行过程架构</p>
<ul>
<li>
<p>可以看到目前ClickHouse核心架构由下图构成，主要的抽象模块是Column、DataType、Block、Functions、Storage、Parser与Interpreter。
<img src="https://www.liritian.com/wp-content/uploads/2023/06/2761685595667_.pic_.jpg" alt="" />
简单来说，就是一条sql,会经由Parser与Interpreter，解析和执行，通过调用Column、DataType、Block、Functions、Storage等模块，最终返回数据，下面是各个模块具体的</p>
</li>
<li>
<p>Columns
表示内存中的列（实际上是列块），需使用 IColumn 接口。该接口提供了用于实现各种关系操作符的辅助方法。几乎所有的操作都是不可变的：这些操作不会更改原始列，但是会创建一个新的修改后的列。</p>
</li>
</ul>
<p>Column对象分为接口和实现两个部分，在IColumn接口对象中，定义了对数据进行各种关系运算的方法，例如插入数据的insertRangeFrom和insertFrom方法、用于分页的cut，以及用于过滤的filter方法等。而这些方法的具体实现对象则根据数据类型的不同，由相应的对象实现，例如ColumnString、ColumnArray和ColumnTuple等。</p>
<ul>
<li>
<p>Field
表示单个值，有时候也可能需要处理单个值，可以使用Field。Field 是 UInt64、Int64、Float64、String 和 Array 组成的联合。与Column对象的泛化设计思路不同，Field对象使用了聚合的设计模式。在Field对象内部聚合了Null、UInt64、String和Array等13种数据类型及相应的处理逻辑。</p>
</li>
<li>
<p>DataType
IDataType 负责序列化和反序列化：读写二进制或文本形式的列或单个值构成的块。IDataType直接与表的数据类型相对应。比如，有 DataTypeUInt32、DataTypeDateTime、DataTypeString等数据类型。</p>
</li>
</ul>
<p>IDataType与IColumn之间的关联并不大。不同的数据类型在内存中能够用相同的IColumn实现来表示。比如，DataTypeUInt32和DataTypeDateTime都是用ColumnUInt32或ColumnConstUInt32来表示的。另外，相同的数据类型也可以用不同的IColumn实现来表示。比如，DataTypeUInt8既可以使用ColumnUInt8 来表示，也可以使用过ColumnConstUInt8 来表示。</p>
<p>IDataType仅存储元数据。比如，DataTypeUInt8不存储任何东西（除了vptr）；DataTypeFixedString仅存储N（固定长度字符串的串长度）。</p>
<p>IDataType具有针对各种数据格式的辅助函数。比如如下一些辅助函数：序列化一个值并加上可能的引号；序列化一个值用于 JSON 格式；序列化一个值作为 XML 格式的一部分。辅助函数与数据格式并没有直接的对应。比如，两种不同的数据格式 Pretty 和 TabSeparated 均可以使用 IDataType 接口提供的 serializeTextEscaped 这一辅助函数。</p>
<ul>
<li>Block
Block是表示内存中表的子集（chunk）的容器，是由三元组：(IColumn,IDataType,列名)构成的集合。在查询执行期间，数据是按 Block进行处理的。如果我们有一个Block，那么就有了数据（在IColumn对象中），有了数据的类型信息告诉我们如何处理该列，同时也有了列名（来自表的原始列名，或人为指定的用于临时计算结果的名字）。</li>
</ul>
<p>当我们遍历一个块中的列进行某些函数计算时，会把结果列加入到块中，但不会更改函数参数中的列，因为操作是不可变的。之后，不需要的列可以从块中删除，但不是修改。这对于消除公共子表达式非常方便。</p>
<p>Block用于处理数据块。注意，对于相同类型的计算，列名和类型对不同的块保持相同，仅列数据不同。最好把块数据（block data）和块头（block header）分离开来，因为小块大小会因复制共享指针和列名而带来很高的临时字符串开销。</p>
<ul>
<li>
<p>Block Stream
块流用于处理数据。我们可以使用块流从某个地方读取数据，执行数据转换，或将数据写到某个地方。IBlockInputStream 具有 read 方法，其能够在数据可用时获取下一个块。IBlockOutputStream 具有 write 方法，其能够将块写到某处。</p>
</li>
<li>
<p>块流负责：
读或写一个表。表仅返回一个流用于读写块。
完成数据格式化。比如，如果你打算将数据以Pretty格式输出到终端，你可以创建一个块输出流，将块写入该流中，然后进行格式化。
执行数据转换。假设你现在有IBlockInputStream并且打算创建一个过滤流，那么你可以创建一个FilterBlockInputStream并用IBlockInputStream 进行初始化。之后，当你从FilterBlockInputStream中拉取块时，会从你的流中提取一个块，对其进行过滤，然后将过滤后的块返回给你。查询执行流水线就是以这种方式表示的。</p>
</li>
<li>
<p>Storage
IStorage接口表示一张表。该接口的不同实现对应不同的表引擎。比如 StorageMergeTree、StorageMemory等。这些类的实例就是表。</p>
</li>
</ul>
<p>IStorage 中最重要的方法是read和write，除此之外还有alter、rename和drop等方法。read方法接受如下参数：需要从表中读取的列集，需要执行的AST查询，以及所需返回的流的数量。read方法的返回值是一个或多个IBlockInputStream对象，以及在查询执行期间在一个表引擎内完成的关于数据处理阶段的信息。</p>
<p>在大多数情况下，read方法仅负责从表中读取指定的列，而不会进行进一步的数据处理。进一步的数据处理均由查询解释器完成，不由 IStorage 负责。</p>
<p>但是也有值得注意的例外：AST查询被传递给read方法，表引擎可以使用它来判断是否能够使用索引，从而从表中读取更少的数据。有时候，表引擎能够将数据处理到一个特定阶段。比如，StorageDistributed 可以向远程服务器发送查询，要求它们将来自不同的远程服务器能够合并的数据处理到某个阶段，并返回预处理后的数据，然后查询解释器完成后续的数据处理。</p>
<ul>
<li>Parser与Interpreter
Parser和Interpreter是非常重要的两组接口：Parser分析器负责创建AST对象；而Interpreter解释器则负责解释AST，并进一步创建查询的执行管道。它们与IStorage一起，串联起了整个数据查询的过程。Parser分析器可以将一条SQL语句以递归下降的方法解析成AST语法树的形式。不同的SQL语句，会经由不同的Parser实现类解析。例如，有负责解析DDL查询语句的ParserRenameQuery、ParserDropQuery和ParserAlterQuery解析器，也有负责解析INSERT语句的ParserInsertQuery解析器，还有负责SELECT语句的ParserSelectQuery等。</li>
</ul>
<p>Interpreter解释器的作用就像Service服务层一样，起到串联整个查询过程的作用，它会根据解释器的类型，聚合它所需要的资源。首先它会解析AST对象；然后执行“业务逻辑”（例如分支判断、设置参数、调用接口等）；最终返回IBlock对象，以线程的形式建立起一个查询执行管道。</p>
<ul>
<li>Functions
函数既有普通函数，也有聚合函数。</li>
</ul>
<p>普通函数不会改变行数-它们的执行看起来就像是独立地处理每一行数据。实际上，函数不会作用于一个单独的行上，而是作用在以Block 为单位的数据上，以实现向量查询执行。</p>
<p>还有一些杂项函数，比如块大小、rowNumberInBlock，以及跑累积，它们对块进行处理，并且不遵从行的独立性。</p>
<p>ClickHouse 具有强类型，因此隐式类型转换不会发生。如果函数不支持某个特定的类型组合，则会抛出异常。但函数可以通过重载以支持许多不同的类型组合。比如，plus 函数（用于实现+运算符）支持任意数字类型的组合：UInt8+Float32，UInt16+Int8等。同时，一些可变参数的函数能够级接收任意数目的参数，比如concat函数。</p>
<p>实现函数可能有些不方便，因为函数的实现需要包含所有支持该操作的数据类型和IColumn类型。比如，plus函数能够利用C++模板针对不同的数字类型组合、常量以及非常量的左值和右值进行代码生成。</p>
<p>这是一个实现动态代码生成的好地方，从而能够避免模板代码膨胀。同样，运行时代码生成也使得实现融合函数成为可能，比如融合«乘-加»，或者在单层循环迭代中进行多重比较。</p>
<p>由于向量查询执行，函数不会«短路»。比如，如果你写 WHERE f(x) AND g(y)，两边都会进行计算，即使是对于 f(x) 为 0 的行（除非f(x)是零常量表达式）。但是如果 f(x) 的选择条件很高，并且计算 f(x) 比计算 g(y) 要划算得多，那么最好进行多遍计算：首先计算 f(x)，根据计算结果对列数据进行过滤，然后计算 g(y)，之后只需对较小数量的数据进行过滤。</p>
<p>ClickHouse数据存储架构
ClickHouse数据存储架构由分片（Shard）组成，而每个分片又通过副本（Replica）组成。ClickHouse分片有限免两个特点。</p>
<p>ClickHouse的1个节点只能拥有1个分片，也就是说如果要实现1分片、1副本，则至少需要部署2个服务节点。
分片只是一个逻辑概念，其物理承载还是由副本承担的。
下面是cluster拥有1个shard（分片）和2个replica（副本），且副本由192.37.129.6服务节点和192.37.129.7服务节承载。从本质上看，这个配置是是一个分片一个副本，因为分片最终还是由副本来实现，所以这个其中一个副本是属于分片，分片是一个逻辑概念，它指的是其中的一个副本，这个和Elasticsearch中的分片和副本的概念有所不同。</p>
<pre><code> &lt;ch_cluster&gt;
        &lt;shard&gt;
            &lt;replica&gt;
                &lt;host&gt;192.37.129.6&lt;/host&gt;
                &lt;port&gt;9000&lt;/port&gt;
            &lt;/replica&gt;
            &lt;replica&gt;
                &lt;host&gt;192.37.129.7&lt;/host&gt;
                &lt;port&gt;9000&lt;/port&gt;
            &lt;/replica&gt;
        &lt;/shard&gt;
    &lt;/ch_cluster&gt;</code></pre>
<ol>
<li>引擎
<ul>
<li>MergeTree 系列，处理大规模的数据分析任务
<ul>
<li>特点：
<ul>
<li>数据按照主键排序存储在磁盘上，每个数据块都有一个最小值和最大值，方便范围查询</li>
<li>数据按照分区键进行分区，每个分区可以包含多个数据块。分区可以在不同的节点上进行复制和负载均衡。</li>
<li>数据可以按照一定规则进行合并，以减少数据块的数量和提高查询效率。</li>
<li>数据可以设置索引（主键索引、辅助索引、全文索引等），以加速查询过滤条件。</li>
<li>数据可以设置TTL（生存时间），以自动删除过期的数据。</li>
</ul></li>
<li>常见的表引擎
<ul>
<li>MergeTree: 基本的表引擎，不支持复制</li>
<li>ReplicatedMergeTree：支持复制的表引擎，需要指定一个zookeeper集群来管理元数据和协调复制操作。</li>
<li>SummingMergeTree：在合并数据时，可以对某些列进行求和操作，以减少存储空间和提高聚合查询效率。</li>
<li>AggregatingMergeTree：在合并数据时，可以对某些列进行聚合函数操作（如avg、min、max等），以实现预计算功能。</li>
<li>CollapsingMergeTree：在合并数据时，可以根据某些列的正负符号来抵消相同记录，以实现增量更新或删除功能。</li>
</ul></li>
<li>其他引擎
<ul>
<li>Log系列 用于存储小规模且不需要排序或索引的数据。例如TinyLog、StripeLog等。</li>
<li>Memory系列：用于存储内存中临时或易变的数据。例如Memory、Set等。</li>
<li>File系列：用于从文件中读取或写入数据。例如File、URL等。</li>
<li>Integration系列：用于与其他数据库或系统集成。例如MySQL、Kafka等。</li>
<li>Distributed：用于创建分布式表，在多个节点上执行查询，并将结果汇总返回
2.MergeTree
clickhouse的分区是指将数据按照分区键进行划分，每个分区可以包含多个数据块。分区可以提高查询效率，因为可以在分区键上进行分区裁剪，只查询必要的数据。分区也可以方便数据管理，比如删除、移动、备份等操作。在建表时，可以使用PARTITION BY子句来指定分区键，它可以是任意合法的表达式。例如：
CREATE TABLE test (
date Date,
id UInt64,
value Float64
) ENGINE = MergeTree()
PARTITION BY toYYYYMM(date)
ORDER BY id;
这样就会按照日期的年月进行数据分区。</li>
</ul></li>
</ul></li>
</ul></li>
</ol>
<p>3 ReplicatedMergeTree
刚刚建立了MergeTree表，满足日常简单使用，但是我们生产的数据是需要高可靠以及高性能的，所以这个时候我们需要用到 ReplicatedMergeTree 这个表引擎，原因如下：
<img src="https://www.liritian.com/wp-content/uploads/2023/06/2731685593880_.pic_.jpg" alt="" /></p>
<p>clickhouse的复制是指将相同的数据备份在不同的节点上，以保障数据的可靠性和增加查询并发能力。
复制需要依赖zookeeper集群来管理元数据和协调复制操作。目前支持复制的表引擎是ReplicatedMergeTree系列。在建表时，需要指定一个zookeeper路径和一个副本名称作为参数。例如：</p>
<p>CREATE TABLE test (
date Date,
id UInt64,
value Float64
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/test', '{replica}')
PARTITION BY toYYYYMM(date)
ORDER BY id;</p>
<p>这样就会创建一个支持复制的表，在不同的节点上使用不同的{shard}和{replica}值来创建相同结构的表。</p>
<p>4 ReplicatedMergeTree + Distributed
有了ReplicatedMergeTree来做数据复制，从而保障高可靠和高性能，我们还需要一个表来处理数据查询写入，因为用了ReplicatedMergeTree后数据分不到不同的节点上。</p>
<p>查询数据</p>
<p>各个实例之间会交换自己持有的分片的表数据
汇总到同一个实例上返回给用户</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2023/06/2741685594181_.pic_.jpg" alt="" />
ClickHouse分布式表的本质并不是一张表, 而是一些本地物理表(分片)的分布式视图,本身并不存储数据. 分布式表建表的引擎为Distributed.
Distrbuted_table</p>
<p>CREATE TABLE test_distribution (
date Date,
id UInt64,
value Float64
) Distributed('ck_cluster', 'database', 'log', toYYYYMMDD(<code>date</code>));</p>
<p>Distributed引擎需要以下几个参数：</p>
<p>集群标识符-ck_cluster
本地表所在的数据库名称-database
本地表名称-log
分片键(sharding key) - 可选(toYYYYMMDD(date) )
该键与config.xml中配置的分片权重(weight)一同决定写入分布式表时的路由, 即数据最终落到哪个物理表上. 它可以是表中一列的原始数据(如site_id), 也可以是函数调用的结果, 如上面的SQL语句采用了随机值rand(). 注意该键要尽量保证数据均匀分布, 另外一个常用的操作是采用区分度较高的列的哈希值, 如intHash64(user_id).</p>
<p>二 clickhouse 有多快
跟火箭一样快，来横向对比一下。</p>
<ul>
<li>与ES（Elasticsearch）对比，ClickHouse的查询速度快5-30倍以上，并且占用更少的磁盘空间和内存资源</li>
<li>与MySQL对比，ClickHouse的查询速度快800倍以上，并且可以在单个服务器上每秒处理数百个查询</li>
<li>与Hive对比，ClickHouse的查询速度快200倍以上，并且可以使用tab-separated格式将数据写入到MergeTree表中时，写入速度大约为50到200MB/s
如果想要更精确地测试ClickHouse的查询性能，可以使用clickhouse-benchmark工具来进行压力测试和性能分析。</li>
</ul>
<p>哎，到这就有个疑问❓ 凭啥你那么屌？
不同的角度来分析一下</p>
<ul>
<li>
<p>存储引擎</p>
<ul>
<li>火车跑的快，全靠车头带，车头就是引擎</li>
<li>列式存储：
<ul>
<li>更好的利用压缩算法、减少数据大小和磁盘IO次数，因为同一列的数据通常具有较高的局部性和重复性，所以可以使用 RLE 编码或者差分编码等方式进行压缩，而且压缩后的数据可以直接进行计算，不需要解压。</li>
<li>列式存储可以更好地支持 OLAP (Online Analytical Processing) 系统。因为 OLAP 系统通常只需要对单列或者少数几列进行过滤、聚合或者统计等操作，所以列式存储可以避免读取不必要的数据，提高查询效率</li>
</ul></li>
</ul>
</li>
<li>
<p>预排列和索引</p>
<ul>
<li>ClickHouse 将数据按照分区键和主键进行排序，然后分成多个数据块，每个数据块包含若干行记录。</li>
<li>ClickHouse 将每个数据块中的同一列的数据保存在一个文件中，不同列的数据保存在不同文件中。这样可以实现按列读取和压缩数据。</li>
<li>ClickHouse 为每个数据块生成一个主键索引文件，用于快速定位满足查询条件的数据块。</li>
<li>ClickHouse 还为每个分区生成一个稀疏索引文件，用于快速定位满足查询条件的分区。
最后ClickHouse还会对每个表进行定期的合并操作，将多个小文件合并成一个大文件，并删除重复或过期的数据。这样可以减少磁盘空间占用和查询时需要扫描的文件数量。</li>
</ul>
</li>
<li>
<p>压缩</p>
<ul>
<li>ClickHouse支持多种方式的数据压缩，可以根据不同的权衡选择合适的压缩效率和CPU消耗：比如LZ4和ZSTD。LZ4在速度上会更快，但是压缩率较低，ZSTD在速度上会稍慢，但是压缩率较高。</li>
<li>ClickHouse可以根据数据类型和分布选择合适的压缩算法，例如对于数值型数据可以使用Gorilla算法，对于字符串可以使用DoubleDelta算法。</li>
<li>ClickHouse还提供了针对特定类型数据的专用编解码器，例如Gorilla、DoubleDelta等，可以在牺牲数据精度的情况下提高查询速度 。</li>
<li>ClickHouse可以对每个列块进行独立的压缩和解压缩，提高了并发性能和内存利用率。</li>
</ul>
</li>
<li>
<p>存储引擎的角度分析</p>
<ul>
<li>
<p>大量的向量化运算</p>
</li>
<li>
<p><img src="https://www.liritian.com/wp-content/uploads/2023/06/2751685595101_.pic_.jpg" alt="" />
为了实现向量化执行，需要利用CPU的SIMD指令。SIMD的全称是Single Instruction Multiple Data，即用单条指令操作多条数据。现代计算机系统概念中，它是通过数据并行以提高性能的一种实现方式，它的原理是在CPU寄存器层面实现数据的并行操作。ClickHouse目前利用SSE4.2指令集实现向量化执行
向量化运行：ClickHouse将数据划分为多个partition，每个partition再进一步划分为多个index granularity，然后通过多个CPU核心分别处理其中的一部分来实现并行数据处理。
在这种设计下，单条Query就能利用整机所有CPU。极致的并行处理能力，极大的降低了查询延时</p>
</li>
<li>
<p>多线程并行计算</p>
<ul>
<li>ClickHouse将数据划分为多个partition，每个partition再进一步划分为多个index granularity，然后通过多个CPU核心分别处理其中的一部分来实现并行数据处理。
在这种设计下，单条Query就能利用整机所有CPU。极致的并行处理能力，极大的降低了查询延时</li>
</ul>
</li>
<li>
<p>分布式数据
ClickHouse将数据划分为多个partition，每个partition再进一步划分为多个index granularity，然后通过多个CPU核心分别处理其中的一部分来实现并行数据处理。
在这种设计下，单条Query就能利用整机所有CPU。极致的并行处理能力，极大的降低了查询延时。</p>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1704</wp:post_id>
		<wp:post_date><![CDATA[2023-06-01 12:58:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-06-01 04:58:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 10:58:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 02:58:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[clickhouse-%e7%9b%b8%e5%85%b3%e6%a6%82%e5%bf%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9e%b6%e6%9e%84%e5%b8%88"><![CDATA[Clickhouse]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[2023辛苦耕耘与收获]]></title>
		<link>https://www.liritian.com/archives/2023%e8%be%9b%e8%8b%a6%e8%80%95%e8%80%98%e4%b8%8e%e6%94%b6%e8%8e%b7/</link>
		<pubDate>Wed, 03 Jan 2024 02:49:36 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1729</guid>
		<description></description>
		<content:encoded><![CDATA[<p>2024年1月3号，刚背完单词的我决定把2023年感受写一下，看增长的是不是只有岁数。</p>
<h1>一 考证</h1>
<p>四月份，同事告诉我，有个中级证书可以报名了，对以后职业发展和落户魔都都有帮助。我就信了，和另外一个同事一起报名、买书。一共买了两本小马老师的绿皮书，每天中午午休时间都躲在会议室里，偷偷的看书。
晚上回家看，早上起来看，周末看，回家探亲看...
一个半月时间终于看完了，两本厚厚的管理类书籍。考试的时候还挺忐忑，总觉的自己还没有完全准备好，跑到闵行一个陌生的学校里面，考了一天的试。车子停在马路边边，还领了一张罚款单。</p>
<p>不过好在最终顺利拿下，过程可以坎坷，但是不能粗糙。这让我觉得，我还是可以去做一些自己想做的事情。</p>
<h1>二 考研</h1>
<p>考完证5月27号晚上，由于软考的泄题，导致心里很郁闷，在抖音上面看到很多同学跟我一样，辛辛苦苦俩月，不敌他人纹银3000。感叹人心不古，世风日下..</p>
<p>29号晚上，感觉突然空下来了，心里空落落的。一点儿都不充实，还是抖音，这个神奇的APP，让我刷到了管理类联考，在职研究生。
好嘛，那就来试试呗，先了解一下，在职的几种形式。然后问问同学，有没有过相似的经历，恰好有个同学也在准备，就介绍了老吕考研团队。
我深刻的知道，在事情上如何平衡 “花点时间省点钱，花点钱省点时间”的问题，毅然决然的报了名。</p>
<p>由于有家庭的存在，我也不会选择“全日制”形式。
6月1号，我的考研正式拉开了帷幕，我的英语水平一直停留在6级，使用扇贝英语+颉教，由于对人文语言的喜爱，我英语这几年都在一直打卡，扇贝打了1280天，22,23年全勤，有些事情说起来简单，做起来真的很难的。
其他数学、写作和逻辑就是跟着机构去学习。</p>
<p>考研，尤其是在职考研，很耗费精力和时间，并且这个精力会透支你的身体，时间会耗尽你灵魂。西江厅，留下了我的无数身影。</p>
<p>12月23号，迎来了人生中的第一次考研，还是闵行，这次学校大点是个985，考完感觉还行，十有八九了（但愿不是一厢情愿  2024-03-02：213分 天道酬勤），英语没有考太好，有点伤心😭。</p>
<h2>三 工作</h2>
<p>一年到头，基本上每天都加班，最晚的到凌晨两点多，最早的一般就是8点，这份工作一年半的时光，加班700多个小时。</p>
<p>由于工作需要，疫情的后遗症，导致项目上人少事多。管理者把控全局的能力有限，好大喜功，整天忙忙碌碌，经过两年的努力，成绩不是特别显著，股东们也不愿意再投入资金来做。</p>
<h2>四 家庭</h2>
<p>考证&amp;考研，占据了我95%的业余时间，对于家庭来说是亏歉的，我的爱人沈小姐，承担了全部的家务劳作，以及照顾孩子的责任。感谢她支持我的学业。我突然发现有天，我儿子会算数了，我很惊讶，又心里咯噔一下，我是有多不称职，才能这么晚发现……</p>
<p>感想：
1 用来学习的时间总归是有的，没有时间就是借口，不接受反驳。
2 以结果为导向，一定严格把控过程。如果没有好的结果，粗糙的过程就是答案。
3 工作很重要，不要辞职考研。
4 考研很累很累，要么不开始，要么不中止，全力以赴。
5 家庭是第一位的，一家人要在一起。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1729</wp:post_id>
		<wp:post_date><![CDATA[2024-01-03 10:49:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-03 02:49:36]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 10:50:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 02:50:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2023%e8%be%9b%e8%8b%a6%e8%80%95%e8%80%98%e4%b8%8e%e6%94%b6%e8%8e%b7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%ae%97%e6%b3%95%e5%92%8c%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[其他]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Kubernetes-温故知新]]></title>
		<link>https://www.liritian.com/archives/kubernetes%e6%9e%b6%e6%9e%84/</link>
		<pubDate>Sun, 18 Feb 2024 03:52:00 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1750</guid>
		<description></description>
		<content:encoded><![CDATA[<p>1.Master节点
2.Node节点
3.Controller
4.Service
5.Namespace
6.架构图
7.Rolling update
8.Health check</p>
<h2>一 Master 节点</h2>
<p>master是kubernetes cluster（简称为KC）的大脑，运行着daemon服务，包括kube-apiserver、kubescheduler、kube-controller-manager、etcd和Pod网络</p>
<ul>
<li>API Server（kube-apiserver）</li>
<li>提供RESTful API，即kubernetes API</li>
<li>是KC的前端接口，其他组件可以通过它管理cluster的各种资源</li>
<li>Scheduler（kube-scheduler）</li>
<li>决定将Pod 放在哪个node上面，调度时会考虑Cluster的top结构，包含负载，高可用，性能，数据亲和性</li>
<li>Controller Manager（kube-controller-manager）</li>
<li>CM负责管理Cluster的各种资源，保证资源处于预期的状态</li>
<li>CM有多种controller组成，包括replication controller（管理Deployment、StatefulSet、DaemonSet），endpoints controller、namespace controller（管理NameSpace资源）</li>
<li>etcd</li>
<li>负责保存KC的配置信息和各种资源的状态信息，当数据发生变化时etcd会快速的通知kubernetes相关组件</li>
<li>pod网络</li>
<li>pod要能够相互通信，KC必须部署Pod网络，flannel是一个可选方案。</li>
</ul>
<h2>二 Node 节点</h2>
<ul>
<li>Node 是Pod运行的地方k8s 支持Docker，rkt等容器Runtime。Node上运行的k8s组件有kubelet，kube-proxy和pod网络</li>
<li>kubelet</li>
<li>是node的agent，当Scheduler确定在某个node上运行pod后，会将pod的具体信息发送给该节点的kubelet，然后kubelet根据这些信息创建运行容器，并向Master报告运行状态</li>
<li>kube-proxy</li>
<li>service在逻辑上代表了后端的多个pod，外界通过Service访问Pod，service接收到的请求是如何转发到pod的呢？这就是kube-proxy要完成的工作</li>
<li>每个node 都会运行kube-proxy服务，它负责将访问service的TCP/UPD数据流转发到后端的容器，如果有多个副本，kube-proxy会实现负载均衡</li>
<li>Pod 网络</li>
<li>pod要能相互通信，KC必须部署Pod网络，flannel 是一个可选方案</li>
</ul>
<h2>三 Controller</h2>
<p>k8s通过Controller来管理Pod。</p>
<ul>
<li>Deployment 最常用的Controller，可以管理Pod的多个副本，并确保Pod按照期望的状态运行</li>
<li>ReplicaSet 实现了Pod的多副本管理，使用Deployment时会自动创建ReplicaSet，也就是说Deployment是通过ReplicasSet来管理Pod的多个副本的，我们通常不需要直接使用ReplicaSet</li>
<li>DaemonSet用于每个Node最多只运行一个Pod副本的场景，常用于运行daemon</li>
<li>StatefulSet能够保证Pod的每个副本在整个生命周期中名称是不变，当某个Pod发生故障需要删除并重新启动时，Pod的名称会发生变化，同时StatefuleSet 会保证副本按照固定的顺序启动、更新或者删除</li>
<li>Job用于运行结束就删除的应用，而其他Controller种Pod通常是长期持续运行
<h2>四 Service</h2>
<p>Deployment可以部署多个副本，每个Pod都有自己的IP，外界如何访问这些副本呢？
deployment可以部署多个副本，每个pod 都有自己的IP，外界如何访问这些副本那？
答案是service
k8s的 service定义了外界访问一组特定pod的方式。service有自己的IP和端口，service为pod提供了负载均衡。
k8s运行容器pod与访问容器这两项任务分别由controller和service执行。
外网如何访问Service
1.ClusterIP
a.Service通过Cluster内部的IP对外提供服务，只有Cluster内的节点和Pod可访问，这是默认的Service类型
2.NodePort
a.Service 通过Cluster节点的静态端口对外提供服务，Cluster外部可以通过<NodeIP>:<NodePort> 访问Service
3.LoadBalancer
a.Service利用cloud provider特有的load balancer对外提供服务，cloud provider 负责将load balancer的流量导向Service</p></li>
</ul>
<h2>五 Namespace</h2>
<p>如果有多个用户或者项目组使用同一个k8s cluster，如何将他们创建的Controller、Pod资源分开呢？这就要用到Namespace了。它可以将一个物理的cluster逻辑上划分成多个虚拟cluster，每个cluster就是一个namespace。不同的namespace里的资源是完全隔离的。</p>
<h2>六 结构图</h2>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/02/761708228271_.pic_.jpg" alt="k8s架构图" /></p>
<h2>七 Rolling Update</h2>
<h3>1 更新</h3>
<p>假设初始镜像为httpd:2.2.31 更新到http:2.2.32 httpd.yml文件
kubectl apply -f httpd.yml</p>
<pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
    name: httpd
spec:
  replicas: 3
  template:
      metadata:
          labels:
              run: httpd
      spec:
          containers:
          - name: httpd
           image: httpd:2.2.31
           ports:
           - containerPort: 80</code></pre>
<h3>2 回滚</h3>
<p>kubectl apply 每次更新应用时，kubernetes 都会记录下当前的配置，保存为一个revision，这样就能回滚到特定的revision。
配置文件中的revisionHIstoryLimit 属性用来控制revision的数量。</p>
<pre><code>httpd.v1.yml 
apiVersion: apps/v1
kind: Deployment
metadata:
    name: httpd
spec:
  revisionHistoryLimit: 10
  replicas: 3
  template:
      metadata:
          labels:
              run: httpd
      spec:
          containers:
          - name: httpd
           image: httpd:2.4.17 这里有3个版本 18 19
           ports:
           - containerPort: 80</code></pre>
<p>kubectl apply -f httpd.v1.yml --record
增加参数record的作用是将当前的命令记录到revision中，就知道每个revision对应的是哪个配置文件了。
kubectl rollout history depolyment httpd 会列出历史版本</p>
<h3>回到指定的版本</h3>
<p>kubectl rollout undo deployment  --to-revision=1</p>
<h2>八 健康检查</h2>
<p>k8s有默认的健康检查机制：每个容器启动时候都会执行一个进程，此进程由Dockerfile的CMD或者ENTRYPOINT指定，进程退出时返回码不是零，认为容器故障，根据restartPolicy 重启容器
只需要在spec属性下添加
restartPolicy: OnFailure 默认为Always
如果有故障，进程不退出怎么整？答案就是Liveness 探测
liveness 探测可以让用户自定义判断容器是否健康的条件，如果探测失败k8s就会重启容器</p>
<pre><code>livenessProbe：
  exec：
    command：
    - cat
    - /tmp/healthy
  initialDealySeconds: 10 容器启动后10s之后开始执行liveness探测
  periodSeconds: 5 每5s执行一次liveness探测，连续失败3次就重启容器。```
Readiness探测告诉k8s什么时候可以将容器加入到Service负载均衡池中，对外提供服务。

readinessProbe：
  exec：
    command:
    - cat
    - /tmp/healthy
  initialDealySeconds: 10 容器启动后15(initialDealySeconds+periodSeconds)之后开始执行Readiness探测
  periodSeconds: 5 每5s执行一次Readiness探测，连续失败3次 把ready状态设置为不可用</code></pre>
<p>区别：</p>
<ol>
<li>liveness探测和Readiness 探测是两种HealthCheck机制，如果不特意配置，k8s 将对两种探测才去相同的默认希望，通过判断容器启动的进程的返回值是否为0，来判断探测是否成功</li>
<li>配置方法一样，参数也一样，区别在于探测失败时候，liveness探测是重启容器，Readiness探测则是将容器设置为不可用，不接收Service转发的请求。
3.liveness探测和Readiness探测是独立执行的，二者之间没有依赖，所以可以单独使用，也可以同时使用；liveness判断容器是否重启以实现自愈，用readiness探测判断容器是否已经准备好对外提供服务。
使用场景：
对于多副本应用，当执行Scale up操作时候，新副本会作为backend 被添加到Service的负载均衡，启动需要一个准备阶段，可以用Readiness探测判断容器是否就绪，避免将请求发送到没有ready的backend。</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1750</wp:post_id>
		<wp:post_date><![CDATA[2024-02-18 11:52:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-18 03:52:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 12:20:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 04:20:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kubernetes%e6%9e%b6%e6%9e%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="k8s%e3%80%81docker"><![CDATA[Container]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Kubernetes之Volume]]></title>
		<link>https://www.liritian.com/archives/kubernetes%e4%b9%8bvolume/</link>
		<pubDate>Mon, 19 Feb 2024 02:17:32 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1758</guid>
		<description></description>
		<content:encoded><![CDATA[<p>容器和Pod是短暂的，会被频繁的销毁和创建。容器销毁时，保存在容器内部的文件系统的数据都会被清除。为了持久化保存容器的数据，这就要引入kubernetes volume</p>
<h2>Kubernetes Volume</h2>
<p>Volume的声明周期独立于容器，Pod中的容器可能被销毁和重建，但Volume被保留。本质上k8s Volume 是一个目录，当Volume被挂载到pod，pod中所有的容器都可以访问这个Volume，k8s volume支持多种backend类型，包括emptyDir、hostPath、GCE Persistent Disk、AWS Elastic Block Store、NFS、Ceph 等。</p>
<h3>emptyDir Volume</h3>
<ul>
<li>是host上的一个空目录。</li>
<li>对于容器来说是持久的，对于pod则不是，pod从节点删除时，Volume的内容也会被删除。如果只是删除容器，Volume不受影响
<pre><code class="language-yaml">指定方法
spec：
containers：
- image： busybox
name： xxx
volumeMounts:
- mountPath: /producer_dir
 name: shared-volume
volumes: //定义一个emptyDir类型的Volume
-  name: shared-volume
emptyDir:{}</code></pre>
<p>特点：</p>
<ol>
<li>方便的为Pod中的容器提供共享存储</li>
<li>不具备持久性，Pod销毁，emptyDir随之灰飞烟灭，因为本质是host的一个空目录</li>
<li>适合场景：Pod中容器需要临时共享存储空间的场景。</li>
</ol></li>
</ul>
<h3>hostPath</h3>
<p>将Docker host 文件系统中已经存在的目录mount给Pod的容器。大部分场景不用此类型，这增加了Pod与节点的耦合，限制了Pod的使用。适合需要访问k8s或Docker内部数据的应用则需要使用hostPath。比如kube-apiserver、kube-controller-manager。
查看方式 kubectl edit --namespace=kube-system pod kube-apiserver-k8s-master 可以看到kube-apiserver Pod的配置</p>
<pre><code class="language-yaml">volumeMounts:
- mountPath: /etc/kubernetes
 name: k8s
 volumes:
 - hostPath:
      path: /etc/kubernetes</code></pre>
<p>如果Pod被销毁了，hostPath对应的目录还是会被保留，Host崩溃的话，hostPath也就无法访问了</p>
<h3>外部 Storage Provider</h3>
<p>部署在AWS，GCE、Azure等公有云上</p>
<pre><code class="language-yaml">apiVersion: v1
kind: Pod
metadata:
  name: using-ebs
spec:
  containers:
  - image: busybox
   name: using-ebs
   volumeMounts:
   - mountPath: /test-ebs
    name: ebs-volume
 volumes:
 - name: ebs-volume
  awsElasticBlockStore:
    volumeID:&lt;volume-id&gt; //需要再AWS中创建，然后引用
    fsType: ext4
    ---
    ceph类型
     volumeMounts:
   - mountPath: /test-ceph
    name: ceph-volume
    volumes：
      - name: ceph-volume
       cephfs:
         path:/foo/bar/cephfs //目录会被mount到容器路径test-ceph
         monitors:&quot;10.16.154.78:7689&quot;
         secretFile: &quot;/etc/ceph/admin/secret&quot;</code></pre>
<p>特点：</p>
<ol>
<li>不依赖于k8s，底层由独立的存储系统管理</li>
<li>与k8s集群分离，数据被持久化后，整个k8s都炸了也不会受损</li>
</ol>
<h2>PersistentVolume 和 PersistentVolumeClaim</h2>
<p>PersistentVolume(PV) 是外部存储系统中的一块存储空间，由管理员创建和维护。与Volume一样，PV具有持久性，生命周期独立于Pod。</p>
<p>PersistentVolumeClaim（PVC）是对PV的申请（claim），由普通用户创建和维护。需要为Pod分配存储资源时，用户可以创建一个PVC，知名存储资源的容量大小和访问模式等信息，k8s会查找并提供满足条件的PV</p>
<p>k8s支持多种PV，AWS EBS、Ceph、NFS等。</p>
<pre><code class="language-yaml">apiVersion: v1
kind: PersistentVolume
metadata:
  name: mypv1
spec:
  capacity:
    storage: 1Gi //指定大小
  accessModes:
    - ReadWriteOnce // 以read-write模式mount到单个节点，ReadOnlyMany表示PV能以read-only mount到多个节点,ReadWriteMany表示PV能以read-write mount到多个节点
  persistentVolumeReclaimPolicy: Recycle //清除pv数据 retain 表示需要管理员手工回收；Delete 表示删除 Storage Provider上的对应存储资源 如AWS EBS，GCE PD
  storageClassName: nfs // 指定PV的class 为nfs
  nfs:
    path: /nfsdata/v1 //指定PV在NFS服务器上对应的目录
    server: 192.168.56.105</code></pre>
<p>创建完PV之后就可以被PVC申请了</p>
<pre><code class="language-yaml">kind：PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mypvc1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs
</code></pre>
<p>使用 kubectl get pvc 命令就能看到mypvc1 已经 Bound到mypv1.接下来就能在Pod中使用了。</p>
<pre><code class="language-yaml">Volumes：
  - name: mydata
   persistentVolumeClaim:
     claimName: mypvc1</code></pre>
<h3>回收PV</h3>
<p><code>kubectl delete pvc mypvc1</code> </p>
<p>清除之后就能被其他的PVC申请了，按照之前所述里面建立的文件也会被销毁。如果想保留，回收策略改成Retain。</p>
<p>先创建PV，然后通过PVC申请PV并在Pod中使用，这种方式叫 Static Provision 静态供给。</p>
<p>没有满足PVC条件的PV，会动态创建PV，这叫动态供给（Dynamic Provision），通过StorageClass实现。</p>
<pre><code class="language-yaml">kind： StorageClass
apiVersion： storage.k8s.io/v1
metadata:
  name: standard
provisioner: kubernetes.io/aws-ebs
parameters:
 type: gp2
reclaimPloicy: Retain</code></pre>
<p>这样就能使用了</p>
<pre><code class="language-yaml">kind：PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mypvc1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
</code></pre>
<p>总结：
1 介绍了k8s支持的几种volume（卷）的类型
2 内部和外部的使用配置方法
3 介绍了PV和PVC的概念和用法。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1758</wp:post_id>
		<wp:post_date><![CDATA[2024-02-19 10:17:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-19 02:17:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 12:20:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 04:20:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kubernetes%e4%b9%8bvolume]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="k8s%e3%80%81docker"><![CDATA[Container]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-02-20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Kubernetes之Secret]]></title>
		<link>https://www.liritian.com/archives/kubernetes%e4%b9%8bsecret/</link>
		<pubDate>Tue, 20 Feb 2024 08:10:21 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1760</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Secret</h2>
<p>应用启动过程中可能需要一些敏感信息，比如访问数据库的用户名密码或者秘钥。将这些信息直接保存在容器镜像中显然不妥，Kubernetes 提供的解决方案是 Secret。</p>
<p>Secret 会以密文的方式存储数据，避免了直接在配置文件中保存敏感信息。Secret 会以 Volume 的形式被 mount 到 Pod，容器可通过文件的方式使用 Secret 中的敏感数据；此外，容器也可以环境变量的方式使用这些数据。
Secret 可通过命令行或 YAML 创建。比如希望 Secret 中包含如下信息：
用户名 admin 密码 123456</p>
<p>创建 Secret
有四种方法创建 Secret：</p>
<ol>
<li>
<p>通过 --from-literal：
kubectl create secret generic mysecret --from-literal=username=admin --from-literal=password=123456
每个 --from-literal 对应一个信息条目。</p>
</li>
<li>
<p>通过 --from-file：
echo -n admin &gt; ./username
echo -n 123456 &gt; ./password
kubectl create secret generic mysecret --from-file=./username --from-file=./password
每个文件内容对应一个信息条目。</p>
</li>
<li>
<p>通过 --from-env-file：
cat &lt;&lt; EOF &gt; env.txt
username=admin
password=123456
EOF
kubectl create secret generic mysecret --from-env-file=env.txt
文件 env.txt 中每行 Key=Value 对应一个信息条目。</p>
</li>
<li>
<p>通过 YAML 配置文件：
文件中的敏感数据必须是通过 base64 编码后的结果。
[root@jack ~]# echo -n admin | base64
YWRtaW4=
[root@jack ~]# echo -n 123456 | base64
MTIzNDU2
执行 kubectl apply 创建 Secret：
[root@jack ~]# kubectl apply -f mysecret.yml
secret/mysecret created</p>
</li>
</ol>
<h3>查看Secret</h3>
<p>kubectl edit secret mysecret
注意里面的密码和用户名是base64 加密过的</p>
<p>echo YWRtaW4= | base64 --decode //123456</p>
<h2>在Pod中使用Secret</h2>
<p>volume 方式使用 Secret</p>
<p>Pod 可以通过 Volume 或者环境变量的方式使用 Secret</p>
<p>第一步：Pod 的配置文件如下所示：</p>
<p>① 定义 volume foo，来源为 secret mysecret。</p>
<p>② 将 foo mount 到容器路径 /etc/foo，可指定读写权限为 readOnly</p>
<pre><code class="language-yaml">apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: busybox
    args:
    - /bin/sh
    - -c
    - sleep 10; touch /tmp/healthy; sleep 30000
    volumeMounts:
    - name: foo
     mountPath: &quot;/etc/foo&quot;
     readOnly: true
 volumes:
 - name: foo
  secret:
    secretName: mysecret</code></pre>
<p>执行 kubectl apply -f mypod.yml
kubectl exec -it mypod sh
ls /etc/foo  会看到password 和 username 文件里面记录的是明文账密</p>
<p>看起来是不是很酷？但是如果是想改变密码就得进入到pod里面？如果多台机器用一份密码，那岂不是很不方便？
恰好以Volume方式使用Secret 支持动态更新,上述文件稍作修改</p>
<pre><code class="language-yaml"> volumes:
 - name: foo
  secret:
    secretName: mysecret
    items:
    - key: username
     path: my-group/my-username
    - key: password
     path: my-group/my-password
</code></pre>
<p>这样 当Secret更新之后，容器中的数据也会更新。</p>
<h3>环境变量方式</h3>
<p>k8s支持通过环境变量使用Secret</p>
<pre><code class="language-yaml">spec：
  containers：
  ... 省略若干
    env:
    - name: SECRET_USERNAME
     valueFrom:
       secretKeyRef:
         name: mysecret
         key: username
    - name: SECRET_PASSWORD
     valueFrom:
       secretKeyRef:
         name: mysecret
         key: password</code></pre>
<p>这种无法支撑Secret 动态更新</p>
<h2>ConfigMap</h2>
<p>ConfigMap 管理配置</p>
<p>Secret 可以为 Pod 提供密码、Token、私钥等敏感数据；对于一些非敏感数据，比如应用的配置信息，则可以用 ConfigMap。</p>
<p>ConfigMap 的创建和使用方式与 Secret 非常类似，主要的不同是数据以明文的形式存放。</p>
<p>与 Secret 一样，ConfigMap 也支持四种创建方式：</p>
<ol>
<li>
<p>通过 --from-literal：
kubectl create configmap myconfigmap --from-literal=config1=xxx --from-literal=config2=yyy
每个 --from-literal 对应一个信息条目。</p>
</li>
<li>
<p>通过 --from-file：
echo -n xxx &gt; ./config1
echo -n yyy &gt; ./config2
kubectl create configmap myconfigmap --from-file=./config1 --from-file=./config2
每个文件内容对应一个信息条目。</p>
</li>
<li>
<p>通过 --from-env-file：
cat &lt;&lt; EOF &gt; env.txt
config1=xxx
config2=yyy
EOF
kubectl create configmap myconfigmap --from-env-file=env.txt
文件 env.txt 中每行 Key=Value 对应一个信息条目。</p>
</li>
<li>
<p>通过 YAML 配置文件：
文件中的数据直接以明文输入。
与 Secret 一样，Pod 也可以通过 Volume 或者环境变量的方式使用 Secret。
Volume 方式：
大多数情况下，配置信息都以文件形式提供，所以在创建 ConfigMap 时通常采用 --from-file 或 YAML 方式，读取 ConfigMap 时通常采用 Volume 方式。
与 Secret 一样，Volume 形式的 ConfigMap 也支持动态更新。</p>
</li>
</ol>
<pre><code class="language-yaml">apiVersion: v1
kind: ConfigMap
metadata:
  name: myconfigmap
data:
  config1: xxx
  config2: yyy
--- 

使用方法
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: busybox
    args:
    - /bin/sh
    - -c
    - sleep 10; touch /tmp/healthy; sleep 30000
    volumeMounts:
    - name: foo
     mountPath: "/etc/foo"
     readOnly: true
 volumes:
 - name: foo
  configmap:
    name: myconfigmap</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1760</wp:post_id>
		<wp:post_date><![CDATA[2024-02-20 16:10:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-20 08:10:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 12:20:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 04:20:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[kubernetes%e4%b9%8bsecret]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="k8s%e3%80%81docker"><![CDATA[Container]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PostgreSQL-数据类型]]></title>
		<link>https://www.liritian.com/archives/postgresql-%e5%88%9d%e8%af%86/</link>
		<pubDate>Tue, 20 Feb 2024 14:16:57 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1762</guid>
		<description></description>
		<content:encoded><![CDATA[<p>PostgreSQL 是一个开源的关系型数据库管理系统，起源于美国加州达布尔伯克利分校。</p>
<h2>数据类型</h2>
<ol>
<li>
<p>serial类型
serial和bigserial 是可以自动生成递增整数值的数据类型。其他数据库叫autonumber。如果指定了一个字段类型为serial，那么pgsq 会把它作为整型处理，同事自动在该表所在的schema种创建一个名为table_name_column_name_seq的序列。然后设定改序列为该整型字段的取值来源。如果删除此字段，序列也会删除。</p>
<p>serial  4 字节    自增整数    1 到 2147483647
bigserial   8 字节    自增的大范围整数    1 到 9223372036854775807</p>
</li>
<li>
<p>网络地址类型：
提供用于存储 IPv4 、IPv6 、MAC 地址的数据类型。
用这些数据类型存储网络地址比用纯文本类型好， 因为这些类型提供输入错误检查和特殊的操作和功能。</p>
<pre><code>cidr    7 或 19 字节   IPv4 或 IPv6 网络
inet    7 或 19 字节   IPv4 或 IPv6 主机和网络
macaddr 6 字节    MAC 地址</code></pre>
</li>
<li>
<p>货币类型：
money 8 字节  货币金额    -92233720368547758.08 到 +92233720368547758.07
money 类型存储带有固定小数精度的货币金额。
Json类型和数组类型</p>
<p>note：numeric、int 和 bigint 类型的值可以转换为 money，不建议使用浮点数来处理处理货币类型，因为存在舍入错误的可能性</p>
</li>
<li>
<p>字符和字符串</p>
<ol>
<li>
<p>character(char)
占用的存储空间是固定的，使用邮政编码，电话号码、身份证号等定长，如果存储字符长度达不到char的长度，后面用空格填充，查询时也是这样。如果char（n）n为空那么默认为长度为1</p>
</li>
<li>
<p>character varying(varchar)
如果指定，长度n必须大于零且不能超过 10,485,760。如果使用character varying() 时不带长度说明符，则该类型接受任意长度的字符串。
可变字符型（varchar），也被称为字符变长（character varying），是PostgreSQL中的另一种字符串类型。与文本型类似，可变字符型也可以存储任意长度的字符串数据，但它在磁盘上存储时会对字符串进行空间压缩，相比文本型需要更少的存储空间。存储大小由实际存储的字符数以及存储编码的字节数决定。</p>
<p>可变字符型在以下情况下适用：</p>
<ul>
<li>当需要存储较大文本数据时，但又不需要文本型提供的无限长度。</li>
<li>当存储数据的长度变化较大，但在给定范围内波动时。</li>
<li>当需要控制字符串的最大长度，并对其进行验证或控制。</li>
</ul>
</li>
<li>
<p>text
文本型在PostgreSQL中是一种用于存储与字符串有关的数据的数据类型。文本型可以存储任意长度的字符串，它可以容纳从零到无限长度的字符数据。使用文本型存储字符串时，它们在磁盘上会保留原始格式，不会进行任何额外的存储空间消耗。文本型的存储大小仅由实际存储的字符数决定
文本型在以下情况下适用：</p>
<ul>
<li>当需要存储任意长度的字符串时，而不关心字符串的具体长度。</li>
<li>当存储数据的长度会有所变化，并且不需要对其进行额外的验证或控制时。</li>
<li>当需要处理文本相关的操作，如搜索、替换、拼接等。</li>
</ul>
</li>
</ol>
</li>
<li>
<p>字符串函数</p>
<ul>
<li>
<p>填充 lpad、rpad
lpad（'ab',4,0）结果 00ab
lpad（'abcde',4,'0'）结果 abcd</p>
</li>
<li>
<p>修整空白 rtrim、ltrim、trim、btrim
trim函数用于移除空格，也可以传入一个可选实参，指定要溢出的其他字符</p>
</li>
<li>
<p>截取字符串 substring
SELECT  SUBSTRING ('PostgreSQL', 1, 4); 从第一个位置开始截取，截取4个字符,返回结果:Post</p>
</li>
<li>
<p>连接 ||</p>
</li>
</ul>
</li>
<li>
<p>generate_series
`select x from generate_series(1,51,13) as x
x|
一一
1
14
27
40</p>
<p>1为初始值，13为步长，51为最大值，意思是从1生成步长为13的值，最大值不超过51</p>
</li>
<li>
<p>拆分字符串为数组、表或者子字符串
将指定位置的元素从固定分割分分隔的字符串中取出来
split_part('abc.123.z45','.',2) // 123
将基于固定分隔符的字符串拆分为一个数组。
string_to_array('abc.123.z45','.')
把一个字符串展开为若干记录行
unnest(string_to_array('abc.123.z45','.'))</p>
<pre><code class="language-sql">结果
x|
一
abc
123
z45</code></pre>
</li>
<li>
<p>正则表达式和模式匹配
逆向引用技术
regexp_replace('2267884021','([0-9]{3})([0-9]{3})([0-9]{4})',E'(\1) \2-\3' )
//表达式的结果是 （226）788-4021</p>
<p>\1和\2 是模式匹配表达式中的元素，用\来转义圆括号，E' 是pgsq的构造符语法，表示后续跟着的字符串是一个表达式，其中类似\的特殊字符应该按照字面含义来处理。</p>
<p>regexp_matches(' Cell (619)852-5083. Casa 619-730-6254. Besame mucho. E'[(]{0,1}[0-9]{3}[)-.]{0,1}[0-9]{3}[-.]{0,1}[0-9]{4}','g')</p>
<pre><code class="language-sql">结果
x|
一
(619)852-5083
619-730-6254</code></pre>
<p>规则说明：</p>
<ul>
<li>[(]{0,1}: 开始是0个或者1个（。</li>
<li>[0-9]{3}: 跟着3位数字</li>
<li>[)-.]{0,1}: 跟着0个或者1个）或者-或者.。</li>
<li>[0-9]{4}:跟着4位数字</li>
<li>此函数会返回根据一个正则表达式筛选匹配得到的字符串数组，如果不传g参数，仅返回第一个命中的字符串，g表示global，而不是greedy，需要进行完整的搜索并返回所有匹配上的字符串，每个字符串作为数组中的一个元素。
~ （similar to）
select description from table where description ~ E'[(]{0,1}[0-9]{3}[)-.]{0,1}[0-9]{3}[-.]{0,1}[0-9]{4}; 能起到相同的作用</li>
</ul>
</li>
<li>
<p>时间类型
pqsq 在时间类型的支持上是遥遥领先的。日期代表（年月日）和时间代表（时分秒</p>
<ul>
<li>date
年月日，没有时区，时分秒信息</li>
<li>time
小时分钟秒，没有日期和时区信息</li>
<li>timestamp
日期（年月日）和时间（时分秒）不带时区</li>
<li>timestampz
日期、时间、时区，以UTC时间格式存储，查询显示时按照服务器设置换算后再显示。</li>
<li>timez
时间、时区，但是没有日期，使用频率低</li>
<li>interval
时间的长度，单位可以是小时、天、月、分钟或者其他，适用于对日期和时间进行数学运算的场景。</li>
<li>tsrange
定义timstamp 无时区的 开区间和闭区间[2024-02-21 15:43:05，2024-02-21 15:43:13）同理tstzrange 带时区的开闭区间、daterange定义日期的开闭区间</li>
</ul>
</li>
<li>
<p>时区详解
如果存储了一个2024-02-21 15:49:54-8 (-8代表比UTC时间迟8小时的时区)</p>
<ul>
<li>计算代表的UTC标准时间，就是2024-02-21 23:49:54（当前UTC时间）</li>
<li>记录计算得到UTC标准时间</li>
<li>找到服务器或者请求的时区，计算该时区和UTC标准时间的时差（
show time zone 假设为Asia/Shanghai +8）</li>
<li>根据时差计算出当地时间，2024-02-21 23:49:54 这个值加上时差8个小时后，2024-02-22 07:49:54。待议，理解起来有点问题。</li>
</ul>
</li>
<li>
<p>日期时间类型的运算符和函数
select  '2012-02-10 11:00 PM'::timestamp + interval '1 hour';
2012-02-11 00:00:00  因为PM这里代表晚上11点也就是23点。</p>
<p>generate_series()生成时间序列数组
select (dt - interval '1 day')::date As eom from generate_series('2/1/2012','6/30/2012',interval '1 month') As dt;
eom         |
一一一一一
2012-01-31
2012-02-29
2012-03-31
2012-04-30
2012-05-31</p>
<p>date_part('hour','2024-02-21 16:24:41+08') 得到小时为16
to_char('2024-02-21 16:24:41+08','HH12:MI PM') 16:24 PM</p>
</li>
<li>
<p>数组类型
构造数组
select ARRAY[2001,2002,2003] As yrs
聚合函数
array_agg
select array_agg(log_ts order BY log_ts) As x from logs where logs_ts between '2024-02-21'::timestamptz AND '2024-02-22'::timestamptz'
x|
一
{'2024-02-22','2024-02-24','2024-02-26'}</p>
<p>获取数组元素个数
array_upper(fact_subcats,1) ，1代表数组的维度
fact_subcats[1] 代表获取第一个下标元素，pgsq的数组从下标1开始。
数组的拆分与连接
fact_subcats[2:4] 获得fact_subcats数组中第2个到第4个元素
展开数组元素
unnest('{XOX,OXO,XOX}'::char(3)[])
XOX
OXO
XOX</p>
</li>
<li>
<p>区间类型
定义要个大于等于-2 小于2的整数区间，该区间的写法是[-2,2) 左边中括号表示左边是闭区间，包含-2，右边是开区间，不包含2
离散区间和连续区间
整数类型或者日期类型的区间是离散区间，因为区间内每一个值都是可以被枚举出来的。数字区间或者时间戳区间就是一个连续区间，因为区间内的值有无限多。
原生支持的区间类型
int4range，int8range 离散区间
numrange 连续区间
daterange 不带时区信息的日期离散区间
区间类型运算符
重叠运算符 &amp;&amp;
判定两个区间是否有重叠部分
包含运算符@&gt;,被包含运算符&lt;@
where period @&gt; CURRENT_DATE </p>
</li>
<li>
<p>JSON数据类型
把字段profile 定义为json 类型，profile json 即可
查询 </p>
<pre><code class="language-json">{
"name":"Gomez",
"members":[
"member":{"relation":"padre","name":"Alex"}
"member":{"relation":"madre","name":"Sonia"}
]
}</code></pre>
<pre><code>json_extract_path(profile,'members') 简写为->
json_array_elements((profile->'members')) #>> '{member,name}::text[]' 将数组中每个元素展开为独立的JSON对象
json_extract_path_text(profile,'member','name') 提取profile字段中的member的name属性，简写形式 profile->>name</code></pre>
<p>输出JSON数据
row_to_json()
jsonb
存储的是原始文本解析以后生成的二进制数据结构，该二进制结构中不再保存原始文本中的空格，存储下来的数字形式也发生一定的变化
不允许内部的记录的键值重复，如果有重复会被丢弃。</p>
</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1762</wp:post_id>
		<wp:post_date><![CDATA[2024-02-20 22:16:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-20 14:16:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-22 14:49:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-22 06:49:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[postgresql-%e5%88%9d%e8%af%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PostgreSQL-表、约束、索引]]></title>
		<link>https://www.liritian.com/archives/postgresql-%e8%a1%a8%e3%80%81%e7%ba%a6%e6%9d%9f%e3%80%81%e7%b4%a2%e5%bc%95/</link>
		<pubDate>Thu, 22 Feb 2024 08:34:09 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1767</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>基本操作</h2>
<ol>
<li>
<p>创建表
create table logs(log_id serial PRIMARY KEY, user_name varchar(50),description text,log_ts timestamp with time zone NOT NULL DEFAULT current_timestamp);
create INDEX idx_logs_log_ts ON logs USING btree (log_ts)
2.继承表
pgsql 是唯一提供表继承功能的数据库。
所谓继承：顾名思义。创建一张子表A时指定为继承自另外一张表B
，则建好的新表A除了含有自己的字段外还会含有附表的所有字段。</p>
<pre><code class="language-sql">CREATE TABLE logs_2011 (PRIMARY KEY(log_id)) INHERITS(logs);</code></pre>
</li>
<li>
<p>无日志表
pgsq从9.1开始支持UNLOGGED修饰符，创建无日志的表。系统不会为这种表记录任何事务日志，掉电重启，无日志表中的数据会在事务回滚过程中被全部清除掉。</p>
<pre><code class="language-sql">create unlogged table web_sessions(session id text primary key)</code></pre>
<p>优点：
对其写入数据远远快于往普通表快，大概快15倍
缺点：
数据库服务器崩溃，pqsq截断所有无日志表（擦除所有行）
无日志表不支持GiST索引，不适合依赖GiST索引的数据类型，可以建立B-tree索引和GIN索引</p>
</li>
<li>
<p>TYPE OF
创建一张表时候，会自动在后台创建一个结构完全相同的符合数据类型，反之则不会。</p>
<pre><code class="language-sql">创建复合数据类型
create type basic_user as (user_name varchar(50), pwd varchar(10));
以复合数据类型为模板来创建一张表
create table super_users OF basic_user(CONSTRAINT pk_su primary key(user_name));</code></pre>
<p>当基于数据类型来创建表时，你不能指定表字段的定义，一切以数据类型本身的定义为准。然而，为复合数据类型新增或者移除字段时，pgsq会自动修改相应的表结构。</p>
<p>场景：系统中有很多结构相同的表，如果需要对所有表结构进行相同的修改只需修改此基础数据类型即可。</p>
<p>增加一个phone 字段
alter type basic_user add attribute phone varchar(10) cascade;</p>
</li>
<li>
<p>约束
1 外键约束
2 唯一约束
3 check约束</p>
<p>5.1 外键约束</p>
<p>建立外键约束和相应的索引
set search_path=census,public;
alter table facts add constraint fk_facts_1 foreign key (fact_type_id)
references lu_fact_types (fact_type_id) //主表lu_fact_types中不存在某fact_type_id的记录，那么从表fact中就能插入该fact_type_id的记录。
on update cascade on DELETE RESTRICT;//级联规则，主表的fact_type_id字段值会自动进行相应的修改，以维持外键引用关系不变。如果从表fact中还存在某fact_type_id，那么主表lu_fact_type中相同fact_type_id字段值的记录就不允许被删除。
create INDEX fki_facts_1 on facts(fact_type_id);</p>
<p>5.2 唯一性约束
主键字段的值是唯一的，但每张表只能定义一个主键，因此如果你需要保证别的字段值唯一，那么必须在该字段上建立唯一性约束或者说唯一索引。建立唯一性约束的时会自动在后台创建一个相应的唯一索引。与主键字段类似，建立了唯一性约束的字段不允许为空，并且可以作为外键字段被别的表引用。建立了唯一索引但没有唯一约束的可以输入空值。
ALTER TABLE logs_2011 ADD CONSTRAINT uq UNIQUE (user_name,log_ts)
5.3 check约束
check约束能够对标的一个或者多个字段加上一个条件，表中每一行记录必须满足此条件。查询规划器也会利用check约束来优化执行速度，有些查询附带的条件与待查询表的check约束无交集，那么规划期会立即认定该查询未命中目标并返回。
限制logs表中的所有用户名小写
ALTER TABLE logs ADD CONTRAINT chk CHECK（user_name=lower(user_name));
特别值得注意的一点是，当表间存在继承关系时，子表会继承父表的check约束，但主键、外键、唯一性这三种约束却不会继承。
5.4 排他性约束
解决时间安排的类似场景。用字段的值在任意两行都不相等的算法来排他。一般是基于GiST类型的索引来实现，使用基于B-tree算法的的GiST多列符合索引也是可以的，不过需要先安装btree_gist扩展包才能建立这种索引
场景：预定会议室冲突
create table schedules（id serial primary key，room smallint，time_slot tstzrange）;
alter table schedules add contraint ex_schedules exclude using gist(room with=,time_slot with &amp;&amp;)
用=号来判断会议室房间号是否重复，&amp;&amp;运算符来判定时间区段是否重叠。
6.索引
pgsq索引机制功能强大，特性丰富。
1 支持在同一个表中混合搭配不同的索引类型，且预计规划器将综合考虑所有的索引。
2 同一个表上的索引名不允许重复
3 原生索引
3.1 b-tree索引是默认索引
3.2 GiST索引
Generalized Search Tree 搜索树，主要用于空间数据，科学数据、非结构化数据和层次化数据的搜索。
缺点：不能保证字段唯一性；有损索引，它不存储被索引字段的值，而仅仅存储字段值的一个取样，这种取样是失真的。
3.3 GIN索引
GIN的全称是Generalized Inverted Index（GIN）通用逆序索引
适合场景：
pgsq内置全文搜索引擎以及jsonb数据类型。
从GiST派生的，但是无损的，索引中包含有被索引字段的值。查询字段都已被索引，那么只读取索引可以获得查询结果，这种情况下GIN查询速度是快于GiST的。GIN在更新操作时比GiST多出一个字段值复制动作。
GIN的索引数内部每一个索引行的长度是有限制的，不能对于text等大对象类型进行索引。
3.4 SP-GiST索引
SP-GiST 是指基于空间分区树（Space-Partitioning Trees）算法的GiST索引，该类型的索引从9.2开始引入，与GiST索引适用领域相同，但对于某些特定领域的数据算法，效率会高一些。
3.5 哈希索引
哈希索引在GiST和GIN索引出现前就已经得到了广泛使用。但是事务安全性和索引性能方面不如其余两位索引。pgsq中最好避免使用。
4 运算符类
pgsq把一类应用领域相近的运算符以及这些运算符适用的数据类型组合在一起称为一个运算符类（opclass）。
int4_ops 运算符类包含适用于int4类型的= &lt; &gt; &gt; &lt;运算符
指定运算符类的语法
create index idx1 ON census.lu_tracts USING btree(tract_name text_pattern_ops)
注意：每一个索引都只会使用一个运算符类。如果希望一个字段上的索引适用多个运算符类，请创建多个索引。
单个字段上可以建立索引的个数是没有限制的。
5 函数索引
MySQL不直接支持函数索引，pgsq和oracle都支持函数索引。
基于字段值的函数运算结果建立索引。
create index fidx on featnames_short using btree (upper(fullname) varchar_pattern_ops);
建立了该索引之后，类似
select fullname from featnames_short where upper(fullname) like &quot;s%&quot; 这种sql就能用上索引。
查询语句中使用的函数要与减建函数索引时使用的函数完全一致，才能保证用上索引。
6 基于部分记录的索引
仅针对表中部分记录的索引，而且这部分记录需要满足where 语句设置的筛选条件。假设有100万条记录，只查询1万条的子集，这种场景比较适合。
此时比全量索引快，因为体积小，把更多索引数据缓存到内存中，另外该类索引占用的磁盘空间也会更小。
此类索引能够实现仅针对部分记录的唯一性约束。
create table subscribers(id serial primary key,name varchar(50) not null,type varchar(50),is_active boolean);
我们建立一个基于当前活跃用户的部分记录索引即可
create unique index uq ON subscribers using btree(lower(name)) where is_active;
7 复合索引
create index idx on subscribers using btree(type, upper(name) varchar_pattern_ops)
pgsq的规划器在语句执行过程中会自动使用一种被称为“位图索引扫描”的策略来同时使用多个索引。
索引中包含的字段越多也就意味着索引占用的空间会越大，能在内存中缓存的索引条目就越少。请不要滥用复合索引。</p>
</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1767</wp:post_id>
		<wp:post_date><![CDATA[2024-02-22 16:34:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-22 08:34:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 10:29:05]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 02:29:05]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[postgresql-%e8%a1%a8%e3%80%81%e7%ba%a6%e6%9d%9f%e3%80%81%e7%b4%a2%e5%bc%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Postgresql的特色SQL用法]]></title>
		<link>https://www.liritian.com/archives/postgresql%e7%9a%84%e7%89%b9%e8%89%b2sql%e7%94%a8%e6%b3%95/</link>
		<pubDate>Tue, 27 Feb 2024 03:12:10 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1773</guid>
		<description></description>
		<content:encoded><![CDATA[<ol>
<li>DISTINCT ON
DISTINCT会将结果集中完全重复的记录剔除，但是DISTINCT ON 可以将结果集中指定字段值的重复记录剔除，具体实现，先对结果集按照DISTINCT ON 指定的字段进行排序，然后筛选出每个字段值第一次出现时所在的记录，其余的记录都剔除。
获取某地第一个人口统计区的信息
select distinct on (left(tract_id,5)) left(tract_id,5) As county,tract_id,tract_name from census.lu_tracts order by county,tract_id;
注意order by的最左侧必须是DISTINCT ON指定的字段列表。</li>
<li>LIMIT 和 OFFSET 关键字
limit关键字指定了查询时仅返回指定数量的记录，offset关键字指定了从第几条记录开始返回。
limit 3 offset 2 从第3条开始的3条记录</li>
<li>CAST
CAST('2011-1-11' AS date)可以将文本2011-1-11转换为一个日期型数据。简写为两个冒号来表示转换关系
'2011-1-1'::date</li>
<li>pqsq 一次插入多条记录
insert into logs_2011(user_name,description,log_ts) values('robe','logged in','2011-01-10 10:15 AM EST'),
('thunder','logged out','2011-01-10 10:20 AM EST')</li>
</ol>
<p>pgsq中的values 跟MySQL不太一样，它其实是一个动态生成的临时结果集，可用于多种场合。如当虚拟表来使用
select * from (values('robe','logged in','2011-01-10 10:15 AM EST'::timestamptz),
('thunder','logged out','2011-01-10 10:20 AM EST'::timestamptz)) as l (user_name,description,log_ts)</p>
<ol start="5">
<li>
<p>使用ILIKE 不区分大小写查询
pgsq是一套区分大小写的系统，可以用ILIKE运算符（~）
select tract_name from census.lu_tracts where tract_name ILIKE &quot;%duke%&quot;</p>
</li>
<li>
<p>Deleteing USING
只有当记录字段值落在另外一个结果集中才需要删除该记录
DELETE FROM census.facts USING census.lu_fact_types As ft where facts.fact_type_id = ft.fact_type_id AND ft.short_name='s01';</p>
</li>
<li>
<p>将修改影响到记录行返回给用户
RETURNING * 或者 指定字段</p>
</li>
<li>
<p>聚合函数的过滤
CASE WHEN 这个MySQL也有不再赘述
FILTER
select student，AVG（score）FILTER （WHERE subject='algebra'）As algebra FROM test_scores GROUP BY student;
写法清晰，操作大量数据时候速度快。</p>
</li>
<li>
<p>窗口函数
可以在当前记录行中访问到与其存在特定关系的其他记录行，相当于在每行记录上都开了一个访问外部数据的窗口。所以叫窗口函数。
select tract_id,val,AVG(val) OVER() as val_avg FROM census.facts WHERE fact_type_id = 86;</p>
<p>over()子句用限定窗口中的可见记录范围，未设定任何条件，能看到全表所有记录，所以average运算的结果就是表中所有符合fact_type_id=86条件的记录中val的字段的平均值。
tract_id | val| val_avg
一一一一一一一一一一
25001010100 | 2942.000|4430.06021
25001010206 | 2750.000|4430.06021
25001010208 | 2003.000|4430.06021
·
·
partition by 子句
窗口函数的窗口可见记录范围是可设置的，可以是全表记录，也可以是与当前行有关联关系的特定记录行。
AVG（val）OVER(PARTITION BY left(tract_id,5))
order by 字句
对窗口可见范围内的所有记录进行排序
配合ROW_NUMBER函数对记录集进行编号
select row_number() over(order by tract_name) as rnum,tract_name from census.lu_tracts order by rnum limit 4;
LEAD 和LAG窗口函数可以取出当前窗口中排在当前记录行之前或者之后的记录。第二个参数是可选的步长，可正可负，大表需要从当前记录开始向前或者向后跳几条记录才能访问到目标记录。</p>
</li>
<li>
<p>CTE表达式
common table expression
本质是在一个非常庞大的SQL语句中允许用户通过一个子查询语句，先定义出一个临时表，然后在这个庞大的SQL语句的不同地方都可以直接使用这个临时表。
基本CTE：使SQL语句的可读性更高，同时规划器在解析到这种CTE时会判定其查询代价是否很高，是则考虑将其结果临时物化存储下来，其他部分在访问此CTE就会更快。
可写CTE：对普通CTE的功能扩展，内部可以执行UPDATE INSERT或者DELETE操作，该类CTE最后一般会返回修后的记录集。
递归CTE：该类CTE在普通CTE的基础上增加一个循环操作。
基本用法：
WITH 关键字跟着的就是CTE表达式
WITH cte AS （
select tract_id,substring(tract_id,1,5) As county_code,
count(*) OVER(partition by substring(tract_id,1,5)) As cnt_tracts from census.lu_tracts
)
select max(tract_id) as last_tract,county_code,cnt_tracts from cte where cnt_tracts &gt; 100 group by county_code,cnt_tracts;</p>
</li>
</ol>
<p>11.LATERAL 横向关联
假设需要两张表或者两个子查询进行关联查询操作，那么参与关联运算的双方是独立的，互相不能读取对方数据
select <em> from census.facts L inner join lateral (select </em> from census.lu_fact_types where category=case when l.yr=2011 then 'Housing' ELSE category end) R on L.fact_type_id=R.fact_type_id;
可以在一个from字句中跨两个表共享多列的数据。有个限制就是仅支持单向共享，即右侧的表可以提取左侧表中的数据，反之不行。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1773</wp:post_id>
		<wp:post_date><![CDATA[2024-02-27 11:12:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-27 03:12:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 15:47:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 07:47:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[postgresql%e7%9a%84%e7%89%b9%e8%89%b2sql%e7%94%a8%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[PostgreSQL查询性能调优]]></title>
		<link>https://www.liritian.com/archives/postgresql%e6%9f%a5%e8%af%a2%e6%80%a7%e8%83%bd%e8%b0%83%e4%bc%98/</link>
		<pubDate>Tue, 27 Feb 2024 08:23:24 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1777</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>EXPLAIN</h2>
<p>explain输出执行计划而不是执行SQL语句本身，加上analyze实参之后的执行效果是执行该SQL语句本身且会将实际执行情况与执行计划进行对比分析，这可以用来评估执行计划的准确性。
-- verbose 参数使得输出执行计划精确到列级别
-- explain（analyze，buffers） 显示出执行计划过程重用缓存数据时的命中次数。缓存中已有的数据块就不要从磁盘读取了</p>
<h3>输出内容解释</h3>
<p>explain（analyze）select tract_id,hispanic_or_latino from census.hisp_pop where tract_id='20240227'
输出结果：
Seq Scan on hisp_pop
(cost=0.00..33.48 rows=1 width=16)
(actual time=0.205..0.339 rows=1 loops=1)
Filter:((tract_id)::text='20240227'::text)
Rows Removed by Filter: 1477
Total runtime:0.360 ms
Planning time: 0.095 ms
Execution time: 0.381 ms</p>
<p>结果解析：
cost=0.00..33.48
数字0.00 是估算的该步骤起始执行时间(起步时间，如果有索引，起步时间不是0，因为规划器需要扫描索引先)，第二个数字33.48是估算的该步骤总执行时间，这个是估算的执行时间并不是真实的时间单位，而是取决于硬件环境以及规划器的执行时间单位常数（seq_page_cost 和 cpu_tuple_cost）</p>
<p>Rows Removed by Fileter 1477 是扫描过程中排除掉的不符合条件的记录数
执行分析时间就是规划器分析出最终执行计划所消耗的时间；
执行时间是按照执行计划并得到最终结果所用的时间。</p>
<h2>搜集语句的执行统计信息</h2>
<p>性能调优的第一步就是要确定哪些语句是性能瓶颈。利用扩展包pg_stat_statements的性能监控扩展包以帮助用户找出耗时最长的语句。
启动时指定预加载动态库
1 在postgresql.conf配置文件中，将 shared_preload_libraries='pg_stat_statements'
2 pg_stat_statements.max=10000
pg_stat_statements.track=all
3 重启postgresql
4 在数据库中执行： create extension pg_stat_statements;</p>
<p>找出book库中最耗时间5个SQL语句
select query,calls，total_time,rows,100.0 * shared_blks_hit/nullif(shared_blks_hit + shared_blks_read,0) AS hit_percent from pg_stat_statements As s Inner Join pg_database As d On d.oid = s.dbid where d.datname='postgresql_book' order by total_time desc limit 5;</p>
<h2>索引有没有用到</h2>
<p>通过查询pg_stat_user_indexes和pg_stat_user_tables 这两个视图可以很方便的得知你的索引是否被用上了，这两个视图由pg_stat_statements扩展包提供。</p>
<p>set enable_seqscan =true;//启动全表扫描策略
explain(analyze)
select * from census.lu_fact_types where fact_subcats &amp;&amp; '{White alone,Black alone}'::varchar[];</p>
<p>结果：
seq scan on lu_fact_types
(cost=0.00..2.85 rows=2 width=200) (actual time=0.066..0.076 rows=2 loops=1)
Filter: (fact_subcats &amp;&amp; '{&quot;White alone&quot;,&quot;Black alone&quot;}'::character varying[]) Rows Removed by Filter: 66
Planning time: 0.182ms
Execution time: 0.108ms
规划器忽略了索引选用了全表扫描策略。可能是表太小，或者因为索引不适用本语句的查询条件。</p>
<p>set enable_seqscan =false;//禁用全表扫描策略
explain(analyze)
select * from census.lu_fact_types where fact_subcats &amp;&amp; '{White alone,Black alone}'::varchar[];</p>
<p>Bitmap Heap Scan on lu_fact_types
(cost=12.02..14.04 rows=2 width=200) (actual time=0.058..0.058 rows=2 loops=1) Recheck Cond: (fact_subcats &amp;&amp; '{&quot;White alone&quot;,&quot;Black alone&quot;}'::character varying[])  Heap Blocks: exact=1 -&gt; Bitmap Index Scan on idx_lu_fact_types (cost=0.00..12.02 rows=2 width=0) (actual time=0.048..0.048 rows=2 loops=1) Index Cond: (fact_subcats &amp;&amp; '{&quot;White alone&quot;,&quot;Black alone&quot;}'::character varying[] )
Planning time : 0.230ms
Execution time: 0.119ms</p>
<h2>表的统计信息</h2>
<p>pg_stats 表给出了表中指定列的值域分布图，规划器会根据此信息制定相应的执行计划。系统后台会有一个进程持续不断的更新pg_stats表。
当表插入或者删除大量数据之后，用vacuum analyze 来更新表的统计信息；
vacuum 将已删除的记录永久性的从表中移除，analyze指示更新表的统计信息。</p>
<h2>磁盘页随机访问成本</h2>
<p>random_page_cost RPC 随机也访问成本比，表示磁盘上顺序读取和随机读取同一条记录的性能直逼。一般物理磁盘速度越快，该比率就会越小，RPC默认是4
alter tablespace pg_default set (random_page_cost=2);</p>
<h2>避免使用 select * 语法</h2>
<p>缺点：导致性能浪费，网络传输负担加大
与大对象有关，pgsq 用toast（大尺寸属性存储技术）来存储二进制大对象以及超大文本，将超过主表存储限制的数据存储到一张辅助表，因此读取超大字段就是多表关联操作。
与视图有关，视图创建时可能有若干不要的列，系统会自动将星号替换为目的表的完整字段列表，访问时，所有复杂咧都会参与运算，查询速度回很慢。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1777</wp:post_id>
		<wp:post_date><![CDATA[2024-02-27 16:23:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-27 08:23:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-02 19:08:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-02 11:08:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[postgresql%e6%9f%a5%e8%af%a2%e6%80%a7%e8%83%bd%e8%b0%83%e4%bc%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="postgresql"><![CDATA[PostgreSQL]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[mechaela bushen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tjjtdtpmd.t@monochord.xyz]]></wp:comment_author_email>
			<wp:comment_author_url>http://mechaela%20bushen</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[94.103.188.103]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-03-17 07:25:42]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-03-16 23:25:42]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[mechaela bushen]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[tasheba bennouna]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[bmpdqqpbh.qh@monochord.xyz]]></wp:comment_author_email>
			<wp:comment_author_url>http://tasheba%20bennouna</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[146.70.80.79]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-03-20 12:37:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-03-20 04:37:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[tasheba bennouna]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Janelle Person]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jWQKVx.qhqwtpq@spectrail.world]]></wp:comment_author_email>
			<wp:comment_author_url>http://Janelle%20Person</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[176.123.1.195]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-04-01 14:25:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-04-01 06:25:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Janelle Person]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Golang的Gin和Beego框架的区别]]></title>
		<link>https://www.liritian.com/archives/%e6%8e%a2%e7%b4%a2-sora-%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%ef%bc%9a%e8%b5%8b%e4%ba%88%e6%9c%aa%e6%9d%a5%e4%bb%a5%e6%99%ba%e6%85%a7/</link>
		<pubDate>Fri, 01 Mar 2024 02:16:04 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1781</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Gin框架和Beego框架是两个流行的Golang Web框架，它们在设计理念、特性和适用场景上有一些区别。</p>
<p>设计理念：</p>
<p>Gin框架：Gin框架是一个轻量级的Web框架，设计简洁、高效，旨在提供快速的性能和灵活的路由管理。它强调性能和高效的处理方式，适合构建高性能的Web应用。
Beego框架：Beego框架是一个完整的MVC框架，提供了包括路由、ORM、模板引擎等在内的完整功能。它更像是一个全功能的Web框架，提供了更多的组件和功能，适合构建中大型Web应用。
功能特性：</p>
<p>Gin框架：Gin框架提供了基本的路由、中间件、JSON序列化等核心功能，同时支持插件扩展，可以根据需求选择性地添加额外功能。
Beego框架：Beego框架提供了完整的MVC架构，包括路由、ORM、Session管理、模板引擎等丰富的功能。它还提供了自动化文档生成、API测试等高级功能，适合构建复杂的Web应用。
学习曲线：</p>
<p>Gin框架：由于其设计简洁，学习曲线相对较低，适合那些希望快速上手并构建高性能Web应用的开发者。
Beego框架：Beego框架提供了更多的功能和组件，学习曲线相对较高，但它也提供了更多的文档和示例，有助于开发者更好地理解和使用框架。
社区支持：</p>
<p>Gin框架：虽然Gin框架相对较新，但其在GitHub等开源社区上有着活跃的开发者社区和持续的更新。
Beego框架：Beego框架是一个比较成熟的框架，拥有庞大的用户群体和活跃的社区支持，提供了丰富的文档、教程和插件。
适用场景：</p>
<p>Gin框架：适用于构建轻量级、高性能的Web应用，特别是对性能要求较高的场景，如API服务、微服务等。
Beego框架：适用于构建中大型、功能丰富的Web应用，提供了完整的MVC架构和丰富的功能，适合需要快速开发并且对功能要求较高的应用。
综上所述，选择Gin框架还是Beego框架取决于项目的需求和开发者的偏好。如果是构建轻量级、高性能的Web应用，可以考虑使用Gin框架；如果是构建中大型、功能丰富的Web应用，可以考虑使用Beego框架。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1781</wp:post_id>
		<wp:post_date><![CDATA[2024-03-01 10:16:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-01 02:16:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-01 11:28:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-01 03:28:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8e%a2%e7%b4%a2-sora-%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%ef%bc%9a%e8%b5%8b%e4%ba%88%e6%9c%aa%e6%9d%a5%e4%bb%a5%e6%99%ba%e6%85%a7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Golang的面试50问（一）？]]></title>
		<link>https://www.liritian.com/archives/golang%e7%9a%84%e9%9d%a2%e8%af%9550%e9%97%ae%ef%bc%9f/</link>
		<pubDate>Fri, 01 Mar 2024 10:21:20 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1784</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>数据类型</h2>
<ol>
<li>go的数据类型有几种，分别都是哪些？
14种，分别是
基本数据类型：整型，浮点型、复数形，布尔、字符串、字符（byte、rune）
复合数据类型：数组、切片、映射、函数、结构体、通道、接口、指针</li>
<li>整型数据类型的范围
有符号类型是 负的（2的N-1）次方到正的（2的N-1次方-1） 如 int8：-128 127 负2的7次方-正的2的7次方减1
无符号类型是 正的2的N次方-1 uint8: 0~255
3.什么是字符串字面量
双引号书写字符串呗成为字符串字面量，这种字面量不能跨行（string literal）
4.字符byte和rune？
字符串中的每一个元素叫“字符”，byte 1字节 rune 4字节（表示单个unicode字符，int32的别名类型）
5.iota是用来干什么的？
iota，特殊常量值，是一个系统定义的可以被编译器修改的常量值。iota只能被用在常量的赋值中，每个const关键字出现时，被重置为0，然后每出现一个常量，iota所代表的数值会自动加1
6.位运算符号按位异或、左移、右移的意义
（^）:两个bit位不同为1，相同为0
（&lt;&lt;）按照二进制把所有的数字向左移动对应的位数，高位舍弃，低位补0，数学意义就是乘以2的n次方
（&gt;&gt;）按照二进制把所有的数字向右移动对应的位数，低位舍弃，高位补0，数学意义就是除以2的n次方</li>
</ol>
<h2>函数与指针</h2>
<ol start="7">
<li>局部变量和全局变量
在函数体内声明的变量为局部，函数体外声明的叫全局，全局变量的声明周期同main(),他们名字可以相同，局部变量会被优先考虑
8.函数变量
type caseFunc func(string) string 声明了一个函数类型。</li>
<li>闭包
闭包是由函数和其他的引用环境组合而成的实体。
函数是编译器静态的概念，闭包是运行期动态的概念
优点：加强模块化、较好的抽象能力、简化代码
10.可变参数
通过...的方式来实现
11.指针
指针是存储另一个变量的内存地址的变量。用&amp;符号来获取变量的地址。在golang语言里指针不能运算
var ptr <em>int 指向整型的指针
获取指针指向的变量值用</em>号 *ptr
空指针：指针被定义后没有分配到任何变量时，它的值为nil，也就是空指针。
指针数组：就是元素为指针类型的数组
指针的指针：一个指针变量存放的又是另一个指针变量的地址，则这个指针变量为指向指针的指针。
var ptr **int
12.函数的参数传递
值传递：调用函数时将实际参数复制一份。
引用传递：调用函数时将实际参数的地址传递到函数中
go的slice和map、chan类型的实现机制都类似指针
go语言中所有的传参都是值传递，都是一个副本。副本的内容有的值类型
int string bool array struct 属于值类型
pointer、slice、map、chan 属于引用类型</li>
</ol>
<h2>内置容器</h2>
<ol start="13">
<li>
<p>数组函数
数组是相同类型的一组结构构成的长度固定的序列
var 变量名 [数组长度] 数据类型
数组的长度，len(array)
数组是值类型，不是引用类型</p>
</li>
<li>
<p>切片
切片是可变长度的序列，序列中每个元素都是相同的类型。
var identifier []type
make([]type,len,capacity)
len()获取长度，cap()方法获取容量、append()追加新元素，copy()复制切片元素。
切片是引用类型</p>
</li>
<li>
<p>map
map是由Hash表实现的，所以对map的读取顺序不固定，也就是说map是无序的，key必须保证唯一。map也是引用类型
var 变量名 map[key类型]value 类型
make(map[key类型]value类型)
判断key是否存在
value，ok := map[key]
函数 delete()删除集合中的元素，清空map 重新make一个新的map</p>
</li>
<li>
<p>常用的内置包？
字符串：按字符串和字符遍历
常用函数：contains（s，substr string）bool 判断字符串s是否包含substr字符串
count（s，sep string）int 返回字符串s包含字符串sep的个数
index(s,sep string) int 返回字符串s中字符串sep首次出现的位置
lastIndex(s,sep string) int 返回字符串s中sep最后一次出现的位置
分割：
fields（s string）[]string 以空白字符串分割 返回一个切片
split(s,sep string)[]string 以sep为分隔符分割，分割后字符最后去掉sep
splitAfter(s,sep string)[]string 以sep为分隔符分割，分割后字符最后附加sep
大小写：
title() 首字母大写
tolower()小写
toupper()大写
其他：
修剪 trim() 比较compare()</p>
</li>
<li>
<p>正则表达式
^a 以a为开头
. 除\n以外的任何单个字符
$ 匹配输入字符串的结数位置
x|y 代表x或者y （g|f）ood 匹配good 和food</p>
<ul>
<li>匹配前面的子表达式0次或多次，相当于{0，}</li>
<li>匹配前面的子表达式1次或多次，等价于{1,}
? 0次或一次
[xyz] 匹配所包含的任意一个字符，如[abc]可以匹配plain中的a
[^xyz] 匹配未包含的任意一个字符，如[abc]可以匹配plain中的p
\d 匹配一个数字，等价[0-9]
\D 匹配一个非数字，等价于[^0-9]</li>
</ul>
</li>
<li>
<p>time 包
now() 当前本地时间
before() t在u之前，返回true
after() t在u之后，返回true</p>
</li>
</ol>
<h2>面向对象编程</h2>
<pre><code>面向对象：关注的是对象，构成问题的事务分解成各个对象。
面向过程：关注的是过程，分析出解决问题的步骤，然后用函数实现每一个步骤。</code></pre>
<ol start="19">
<li>
<p>结构体：
值类型
属性必须唯一
统一个包内部能重复，
同类型的成员属性可以写一行。
当实例，才分配内存，只有先实例化才能使用结构体。
值类型
深拷贝就是为新的对象分配了内存
浅拷贝：
只是复制了对象的指针
结构体嵌套：
将一个结构体作为另一个结构体的属性（字段），这种结构就是结构体嵌套
聚合关系：一个类作为另一个类的属性
继承关系：一个类作为另一个类的子类
实例化：根据结构体的定义的格式创建一份与格式一致的内存区域。
结构体实例化后形成指针类型的结构体，new()函数会分配内存，第一个参数是类型，返回的值是指向该类型重新分配的零值的指针。</p>
</li>
<li>
<p>方法：
作用于特定类型变量的函数。这种特定类型变量叫做接受者，类似于其他语言的this或者self。
函数：一段具有独立功能的代码，可以被反复多次调用。
区别：函数不可以重名，方法可以重名；方法有接受者，而函数无接受者。</p>
<p>go为什么有方法和函数？
1 实现类似于类的行为
2 相同名称的方法可以在不同的类型定义，而相同名称的函数时不允许的。</p>
</li>
<li>
<p>接口
面向对象语言中，接口用于定义对象的行为。当某个类型为接口中的所有方法提供了具体的实现细节，这个类型就被称为实现了该接口。
type Phone interface{
call()
}
什么是鸭子模型：
走路像鸭子，叫声像鸭子，就归类为鸭子。
duck typing 编程语言往往被归为动态类型语言，
缺点：静态类型语言的编译时候就能发现错误，而动态语言需要运行时才能发现。
go的折中：
结构体类型T不需要显示的声明它实现了接口I，只要类型T实现了接口I规定的所有方法，它就自动实现了接口I
将结构体类型的变量显式或者隐式转换为接口I类型的变量i，这样就可以在奇台讲台类型语言一样，在编译时检查参数的合法性。
多态：多态就是事务的多种形态，几个相似而不完全相同的对象，要求向他们发出同一个消息时，反应各不相同，执行不同的操作。</p>
</li>
<li>
<p>空接口
空接口中没有任何方法，任意类型都可以实现该接口：interface{},
场景：
1 println的参数就是空接口
2 定义个map：key是string，value是任意数据类型
3 定义一个切片，其中存储任意类型的数据</p>
</li>
</ol>
<h2>异常处理</h2>
<ol start="22">
<li>
<p>error 本质上是一个接口类型，其中包含一个Error()方法,错误值可以存储在变量中，通过函数返回。
type error interface{
Error()string
}
处理方式是跟nil比较</p>
</li>
<li>
<p>用于延迟一个函数或者方法的执行的关键字是什么？
defer，只能出现在函数或者方法的内部
defer 是按照逆序执行的，报错的时候也会执行。因为是放在堆栈中，按照先进后出的顺序执行。
使用场景：处理成对的操作，打开-关闭，链接-断开连接，加锁-释放锁，特别是在执行打开资源操作时，遇到错误需要提前返回，返回前需要关闭相应的资源，不然很容易造成资源泄露。
defer的参数在执行延迟语句时被执行，而不是在执行实际的函数调用时执行。</p>
</li>
<li>
<p>panic作用是什么？
让当前程序进入恐慌，中断程序的执行，panic()是一个内建函数，可以中断原有的控制流程。不应该通过调用panic（）函数来报告普通的错误，而应该只把它作为报告致命错误的一种方式。</p>
</li>
<li>
<p>recover是干什么的？
recover 可以让进入恐慌的流程的goroutine，恢复过来并重新获得流程控制权。recover可以捕获panic()的输入值，使程序恢复正常运行。必须在延迟函数中进行。</p>
</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1784</wp:post_id>
		<wp:post_date><![CDATA[2024-03-01 18:21:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-01 10:21:20]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-02 20:43:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-02 12:43:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[golang%e7%9a%84%e9%9d%a2%e8%af%9550%e9%97%ae%ef%bc%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Golang的Go Modules]]></title>
		<link>https://www.liritian.com/archives/golang%e7%9a%84go-modules/</link>
		<pubDate>Wed, 08 Mar 2023 08:07:22 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1839</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Go Modules 简介</h2>
<p>Go Modules 是 Go 官方推出的一个 Go 包管理方案，基于 vgo 演进而来，具有特性：
可以使包的管理更加简单。支持版本管理。
允许同一个模块多个版本共存。
可以校验依赖包的哈希值，确保包的一致性，增加安全性。
内置在几乎所有的 go 命令中，包括go get、go build、go install、go run、go test、go list等命令。
具有 Global Caching 特性，不同项目的相同模块版本，只会在服务器上缓存一份。
在 Go1.14 版本以及之后的版本，Go 官方建议在生产环境中使用 Go Modules。</p>
<p>因此，以后的 Go 包管理方案会逐渐统一到 Go Modules。与 Go Modules 相关的概念很多，我在这里把它们总结为“6-2-2-1-1”。</p>
<p>Go 包管理的历史</p>
<p>Go1.5 版本前：
GOPATH在 Go1.5 版本之前，没有版本控制，所有的依赖包都放在 GOPATH 下。采用这种方式，无法实现包的多版本管理，并且包的位置只能局限在 GOPATH 目录下。如果 A 项目和 B 项目用到了同一个 Go 包的不同版本，这时候只能给每个项目设置一个 GOPATH，将对应版本的包放在各自的 GOPATH 目录下，切换项目目录时也需要切换 GOPATH。这些都增加了开发和实现的复杂度。</p>
<p>Go1.5 版本：VendoringGo1.5 推出了 vendor 机制，并在 Go1.6 中默认启用。在这个机制中，每个项目的根目录都可以有一个 vendor 目录，里面存放了该项目的 Go 依赖包。在编译 Go 源码时，Go 优先从项目根目录的 vendor 目录查找依赖；如果没有找到，再去 GOPATH 下的 vendor 目录下找；如果还没有找到，就去 GOPATH 下找。这种方式解决了多 GOPATH 的问题，但是随着项目依赖的增多，vendor 目录会越来越大，造成整个项目仓库越来越大。在 vendor 机制下，一个中型项目的 vendor 目录有几百 M 的大小一点也不奇怪。</p>
<p>Go1.9 版本：</p>
<p>Dep对于从 0 构建项目的新用户来说，Glide 功能足够，是个不错的选择。不过，Golang 依赖管理工具混乱的局面最终由官方来终结了：Golang 官方接纳了由社区组织合作开发的 Dep，作为 official experiment。在相当长的一段时间里，Dep 作为标准，成为了事实上的官方包管理工具。因为 Dep 已经成为了 official experiment 的过去时，现在我们就不必再去深究了，让我们直接去了解谁才是未来的 official experiment 吧。</p>
<p>Go1.11 版本之后：Go ModulesGo1.11 版本推出了 Go Modules 机制，Go Modules 基于 vgo 演变而来，是 Golang 官方的包管理工具。
在 Go1.13 版本，Go 语言将 Go Modules 设置为默认的 Go 管理工具；
在 Go1.14 版本，Go 语言官方正式推荐在生产环境使用 Go Modules，并且鼓励所有用户从其他的依赖管理工具迁移过来。至此，Go 终于有了一个稳定的、官方的 Go 包管理工具。到这里，我介绍了 Go 依赖包管理工具的历史，下面再来介绍下 Go Modules 的使用方法。</p>
<h2>包（package）和模块（module）</h2>
<p>Go 程序被组织到 Go 包中，Go 包是同一目录中一起编译的 Go 源文件的集合。在一个源文件中定义的函数、类型、变量和常量，对于同一包中的所有其他源文件可见。模块是存储在文件树中的 Go 包的集合，并且文件树根目录有 go.mod 文件。go.mod 文件定义了模块的名称及其依赖包，每个依赖包都需要指定导入路径和语义化版本（Semantic Versioning），通过导入路径和语义化版本准确地描述一个依赖。这里要注意，&quot;module&quot; != &quot;package&quot;，模块和包的关系更像是集合和元素的关系，包属于模块，一个模块是零个或者多个包的集合。下面的代码段，引用了一些包</p>
<pre><code class="language-go">import (
    // Go 标准包
    &quot;fmt&quot;

    // 第三方包
    &quot;github.com/spf13/pflag&quot;

    // 匿名包
     _ &quot;github.com/jinzhu/gorm/dialects/mysql&quot;

     // 内部包
    &quot;github.com/marmotedu/iam/internal/apiserver&quot;
)</code></pre>
<p>这里的fmt、github.com/spf13/pflag和github.com/marmotedu/iam/internal/apiserver都是 Go 包。Go 中有 4 种类型的包</p>
<p>Go 标准包：在 Go 源码目录下，随 Go 一起发布的包。
第三方包：第三方提供的包，比如来自于 github.com 的包。
匿名包：只导入而不使用的包。通常情况下，我们只是想使用导入包产生的副作用，即引用包级别的变量、常量、结构体、接口等，以及执行导入包的init()函数。
内部包：项目内部的包，位于项目目录下。下面的目录定义了一个模块：</p>
<p>$ ls hello/
go.mod  go.sum  hello.go  hello_test.go  world</p>
<p>hello 目录下有一个 go.mod 文件，说明了这是一个模块，该模块包含了 hello 包和一个子包 world。该目录中也包含了一个 go.sum 文件，该文件供 Go 命令在构建时判断依赖包是否合法。</p>
<h2>Go Modules 命令</h2>
<p>Go Modules 的管理命令为go mod，go mod有很多子命令，你可以通过go help mod来获取所有的命令。</p>
<ul>
<li>download：下载 go.mod 文件中记录的所有依赖包。</li>
<li>edit：编辑 go.mod 文件。graph：查看现有的依赖结构。</li>
<li>init：把当前目录初始化为一个新模块。</li>
<li>tidy：添加丢失的模块，并移除无用的模块。默认情况下，Go 不会移除 go.mod 文件中的无用依赖。当依赖包不再使用了，可以使用go mod tidy命令来清除它。</li>
<li>vendor：将所有依赖包存到当前目录下的 vendor 目录下。</li>
<li>verify：检查当前模块的依赖是否已经存储在本地下载的源代码缓存中，以及检查下载后是否有修改。</li>
<li>why：查看为什么需要依赖某模块。</li>
</ul>
<h2>Go Modules 开关</h2>
<p>如果要使用 Go Modules，在 Go1.14 中仍然需要确保 Go Modules 特性处在打开状态。你可以通过环境变量 GO111MODULE 来打开或者关闭。GO111MODULE 有 3 个值.</p>
<ul>
<li>auto：在 Go1.14 版本中是默认值，在$GOPATH/src下，且没有包含 go.mod 时则关闭 Go Modules，其他情况下都开启 Go Modules。</li>
<li>on：启用 Go Modules，Go1.14 版本推荐打开，未来版本会设为默认值。</li>
<li>off：关闭 Go Modules，不推荐。
所以，如果要打开 Go Modules，可以设置环境变量export GO111MODULE=on或者export GO111MODULE=auto，建议直接设置export GO111MODULE=on。Go Modules 使用语义化的版本号，我们开发的模块在发布版本打 tag 的时候，要注意遵循语义化的版本要求，不遵循语义化版本规范的版本号都是无法拉取的。</li>
</ul>
<h2>模块下载</h2>
<p>在执行 go get 等命令时，会自动下载模块。</p>
<p>主要有三种下载方式：</p>
<ul>
<li>通过代理下载</li>
<li>指定版本号下载</li>
<li>按最小版本下载</li>
</ul>
<p>通过代理来下载模块默认情况下，Go 命令从 VCS（Version Control System，版本控制系统）直接下载模块，例如 GitHub、Bitbucket、Bazaar、Mercurial 或者 SVN。在 Go 1.13 版本，引入了一个新的环境变量 GOPROXY，用于设置 Go 模块代理（Go module proxy）。模块代理可以使 Go 命令直接从代理服务器下载模块。GOPROXY 默认值为<code>https://proxy.golang.org,direct</code>，代理服务器可以指定多个，中间用逗号隔开，例如<code>GOPROXY=https://proxy.golang.org,https://goproxy.cn,direct</code>。
当下载模块时，会优先从指定的代理服务器上下载。如果下载失败，比如代理服务器不可访问，或者 HTTP 返回码为404或410，Go 命令会尝试下从一个代理服务器下载。</p>
<p>direct 是一个特殊指示符，用来指示 Go 回源到模块的源地址 (比如 GitHub 等) 去抓取 ，当值列表中上一个 Go module proxy 返回 404 或 410，Go 会自动尝试列表中的下一个，遇见 direct 时回源，遇见 EOF 时终止，并抛出类似invalid version: unknown revision...的错误。</p>
<p>如果GOPROXY=off，则 Go 命令不会尝试从代理服务器下载模块。</p>
<p>引入 Go module proxy 会带来很多好处，比如：国内开发者无法访问像 golang.org、gopkg.in、go.uber.org 这类域名，可以设置 GOPROXY 为国内可以访问的代理服务器，解决依赖包下载失败的问题。</p>
<p>Go 模块代理会永久缓存和存储所有的依赖，并且这些依赖一经缓存，不可更改，这也意味着我们不需要再维护一个 vendor 目录，也可以避免因为维护 vendor 目录所带来的存储空间占用。</p>
<p>因为依赖永久存在于代理服务器，这样即使模块从互联网上被删除，也仍然可以通过代理服务器获取到。</p>
<p>一旦将 Go 模块存储在 Go 代理服务器中，就无法覆盖或删除它，这可以保护开发者免受可能注入相同版本恶意代码所带来的攻击。我们不再需要 VCS 工具来下载依赖，因为所有的依赖都是通过 HTTP 的方式从代理服务器下载。</p>
<p>因为 Go 代理通过 HTTP 独立提供了源代码（.zip 存档）和 go.mod，所以下载和构建 Go 模块的速度更快。
因为可以独立获取 go.mod（而之前必须获取整个仓库），所以解决依赖也更快。
当然，开发者也可以设置自己的 Go 模块代理，这样开发者可以对依赖包有更多的控制，并可以预防 VCS 停机所带来的下载失败。</p>
<p>在实际开发中，我们的很多模块可能需要从私有仓库拉取，通过代理服务器访问会报错，这时候我们需要将这些模块添加到环境变量 GONOPROXY 中，这些私有模块的哈希值也不会在 checksum database 中存在，需要将这些模块添加到 GONOSUMDB 中。一般来说，我建议直接设置 GOPRIVATE 环境变量，它的值将作为 GONOPROXY 和 GONOSUMDB 的默认值。GONOPROXY、GONOSUMDB 和 GOPRIVATE 都支持通配符，多个域名用逗号隔开，例如*.example.com</p>
<h2>go.mod 和 go.sum</h2>
<p>go.mod 和 go.sum 是两个非常重要的文件，go.mod 文件是 Go Modules 的核心文件。下面是一个 go.mod 文件示例：</p>
<p>module github.com/marmotedu/iam</p>
<p>go 1.14</p>
<p>require (
github.com/AlekSi/pointer v1.1.0
github.com/appleboy/gin-jwt/v2 v2.6.3
github.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535
github.com/gin-gonic/gin v1.6.3
github.com/golangci/golangci-lint v1.30.0 // indirect
github.com/google/uuid v1.0.0
github.com/blang/semver v3.5.0+incompatible
golang.org/x/text v0.3.2
)</p>
<p>replace (
github.com/gin-gonic/gin =&gt; /home/colin/gin
golang.org/x/text v0.3.2 =&gt; github.com/golang/text v0.3.2
)</p>
<p>exclude (
github.com/google/uuid v1.1.0
)</p>
<p>go.mod 语句</p>
<p>go.mod 文件中包含了 4 个语句，分别是 module、require、replace 和 exclude。</p>
<ul>
<li>module：用来定义当前项目的模块路径。go：用来设置预期的 Go 版本，目前只是起标识作用。</li>
<li>require：用来设置一个特定的模块版本，格式为&lt;导入包路径&gt; &lt;版本&gt; [// indirect]。</li>
<li>exclude：用来从使用中排除一个特定的模块版本，如果我们知道模块的某个版本有严重的问题，就可以使用 exclude 将该版本排除掉。</li>
<li>replace：用来将一个模块版本替换为另外一个模块版本。格式为 $module =&gt; $newmodule ，$newmodule可以是本地磁盘的相对路径，
例如github.com/gin-gonic/gin =&gt; ./gin。
也可以是本地磁盘的绝对路径，例如github.com/gin-gonic/gin =&gt; /home/lk/gin。还可以是网络路径，例如golang.org/x/text v0.3.2 =&gt; github.com/golang/text v0.3.2。</li>
</ul>
<p>这里需要注意，虽然我们用$newmodule替换了$module，但是在代码中的导入路径仍然为$module。replace 在实际开发中经常用到，下面的场景可能需要用到 replace：</p>
<ul>
<li>在开启 Go Modules 后，缓存的依赖包是只读的，但在日常开发调试中，我们可能需要修改依赖包的代码来进行调试，这时可以将依赖包另存到一个新的位置，并在 go.mod 中替换这个包。</li>
<li>如果一些依赖包在 Go 命令运行时无法下载，就可以通过其他途径下载该依赖包，上传到开发构建机，并在 go.mod 中替换为这个包。</li>
<li>在项目开发初期，A 项目依赖 B 项目的包，但 B 项目因为种种原因没有 push 到仓库，这时也可以在 go.mod 中把依赖包替换为 B 项目的本地磁盘路径。</li>
<li>在国内访问 golang.org/x 的各个包都需要翻墙，可以在 go.mod 中使用 replace，替换成 GitHub 上对应的库，例如golang.org/x/text v0.3.0 =&gt; github.com/golang/text v0.3.0。</li>
</ul>
<p>有一点要注意，exclude 和 replace 只作用于当前主模块，不影响主模块所依赖的其他模块。</p>
<h3>go.mod 版本号</h3>
<p>go.mod 文件中有很多版本号格式，我知道在平时使用中，有很多开发者对此感到困惑。</p>
<ul>
<li>
<p>如果模块具有符合语义化版本格式的 tag，会直接展示 tag 的值，例如 github.com/AlekSi/pointer v1.1.0 。除了 v0 和 v1 外，主版本号必须显试地出现在模块路径的尾部，例如github.com/appleboy/gin-jwt/v2 v2.6.3。对于没有 tag 的模块，Go 命令会选择 master 分支上最新的 commit，并根据 commit 时间和哈希值生成一个符合语义化版本的版本号，例如github.com/asaskevich/govalidator v0.0.0-20200428143746-21a406dcc535。</p>
</li>
<li>
<p>如果模块名字跟版本不符合规范，例如模块的名字为github.com/blang/semver，但是版本为 v3.5.0（正常应该是github.com/blang/semver/v3），go 会在 go.mod 的版本号后加+incompatible表示。</p>
</li>
<li>
<p>如果 go.mod 中的包是间接依赖，则会添加// indirect注释，例如github.com/golangci/golangci-lint v1.30.0 // indirect。这里要注意，Go Modules 要求模块的版本号格式为v..，</p>
</li>
<li>
<p>如果版本号大于 1，它的版本号还要体现在模块名字中，例如模块github.com/blang/semver版本号增长到v3.x.x，则模块名应为github.com/blang/semver/v3。这里再详细介绍下出现// indirect的情况。原则上 go.mod 中出现的都是直接依赖，但是下面的两种情况只要出现一种，就会在 go.mod 中添加间接依赖。直接依赖未启用 Go Modules：</p>
</li>
<li>
<p>如果模块 A 依赖模块 B，模块 B 依赖 B1 和 B2，但是 B 没有 go.mod 文件，则 B1 和 B2 会记录到 A 的 go.mod 文件中，并在最后加上// indirect。直接依赖 go.mod 文件中缺失部分依赖：如果模块 A 依赖模块 B，模块 B 依赖 B1 和 B2，B 有 go.mod 文件，但是只有 B1 被记录在 B 的 go.mod 文件中，这时候 B2 会被记录到 A 的 go.mod 文件中，并在最后加上// indirect。</p>
</li>
</ul>
<h3>go.mod 文件修改方法</h3>
<p>要修改 go.mod 文件，三种方法：</p>
<ul>
<li>Go 命令在运行时自动修改。</li>
<li>手动编辑 go.mod 文件，编辑之后可以执行go mod edit -fmt格式化 go.mod 文件。</li>
<li>执行 go mod 子命令修改。</li>
</ul>
<p>在实际使用中，建议你采用第三种修改方法，和其他两种相比不太容易出错。</p>
<p>使用方式如下：</p>
<pre><code class="language-go">go mod edit -fmt  # go.mod 格式化
go mod edit -require=golang.org/x/text@v0.3.3  # 添加一个依赖
go mod edit -droprequire=golang.org/x/text # require的反向操作，移除一个依赖
go mod edit -replace=github.com/gin-gonic/gin=/home/colin/gin # 替换模块版本
go mod edit -dropreplace=github.com/gin-gonic/gin # replace的反向操作
go mod edit -exclude=golang.org/x/text@v0.3.1 # 排除一个特定的模块版本
go mod edit -dropexclude=golang.org/x/text@v0.3.1 # exclude的反向操作</code></pre>
<p>go.sum 文件中，每行记录由模块名、版本、哈希算法和哈希值组成，如 [/go.mod] :。目前，从 Go1.11 到 Go1.14 版本，只有一个算法 SHA-256，用 h1 表示。</p>
<p>正常情况下，每个依赖包会包含两条记录，分别是依赖包所有文件的哈希值和该依赖包 go.mod 的哈希值，例如：</p>
<pre><code>rsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=</code></pre>
<p>但是，如果一个依赖包没有 go.mod 文件，就只记录依赖包所有文件的哈希值，也就是只有第一条记录。额外记录 go.mod 的哈希值，主要是为了在计算依赖树时不必下载完整的依赖包版本，只根据 go.mod 即可计算依赖树</p>
<h3>go.sum 文件生成</h3>
<p>在 Go Modules 开启时，如果我们的项目需要引入一个新的包，通常会执行go get命令，例如：</p>
<pre><code>$ go get rsc.io/quote</code></pre>
<p>当执行go get rsc.io/quote命令后，go get命令会先将依赖包下载到$GOPATH/pkg/mod/cache/download，下载的依赖包文件名格式为$version.zip，例如v1.5.2.zip。</p>
<p>下载完成之后，go get会对该 zip 包做哈希运算，并将结果存在$version.ziphash文件中，例如v1.5.2.ziphash。如果在项目根目录下执行go get命令，则go get会同时更新 go.mod 和 go.sum 文件。例如，go.mod 新增一行require rsc.io/quote v1.5.2，go.sum 新增两行：</p>
<pre><code>rsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y=
rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=</code></pre>
<h3>校验</h3>
<p>在我们执行构建时，go 命令会从本地缓存中查找所有的依赖包，并计算这些依赖包的哈希值，然后与 go.sum 中记录的哈希值进行对比。如果哈希值不一致，则校验失败，停止构建。
校验失败可能是因为本地指定版本的依赖包被修改过，也可能是 go.sum 中记录的哈希值是错误的。但是 Go 命令倾向于相信依赖包被修改过，因为当我们在 go get 依赖包时，包的哈希值会经过校验和数据库（checksum database）进行校验，校验通过才会被加入到 go.sum 文件中。也就是说，go.sum 文件中记录的哈希值是可信的。</p>
<p>校验和数据库可以通过环境变量GOSUMDB指定，GOSUMDB的值是一个 web 服务器，默认值是sum.golang.org。该服务可以用来查询依赖包指定版本的哈希值，保证拉取到的模块版本数据没有经过篡改。</p>
<p>如果设置GOSUMDB为off，或者使用go get的时候启用了-insecure参数，Go 就不会去对下载的依赖包做安全校验，这存在一定的安全隐患，所以我建议你开启校验和数据库。</p>
<p>如果对安全性要求很高，同时又访问不了sum.golang.org，你也可以搭建自己的校验和数据库。</p>
<p>值得注意的是，Go checksum database 可以被 Go module proxy 代理，所以当我们设置了GOPROXY后，通常情况下不用再设置GOSUMDB。还要注意的是，go.sum 文件也应该提交到你的 Git 仓库中去。</p>
<h2>模块下载流程</h2>
<p><img src="https://www.liritian.com/wp-content/uploads/2023/03/2591709887171_.pic_.png" alt="" /></p>
<p>总结：</p>
<p>Go 依赖包管理是 Go 语言中一个重点的功能。在 Go1.11 版本之前，并没有官方的依赖包管理工具，业界虽然存在多个 Go 依赖包管理方案，但效果都不理想。</p>
<p>直到 Go1.11 版本，Go 才推出了官方的依赖包管理工具，Go Modules。这也是我建议你在进行 Go 项目开发时选择的依赖包管理工具。</p>
<p>Go Modules 提供了 go mod 命令，来管理 Go 的依赖包。
go mod 有很多子命令，这些子命令可以完成不同的功能。例如，初始化当前目录为一个新模块，添加丢失的模块，移除无用的模块，等等。</p>
<p>在 Go Modules 中，有两个非常重要的文件：go.mod 和 go.sum。go.mod 文件是 Go Modules 的核心文件，Go 会根据 go.mod 文件中记载的依赖包及其版本下载包源码。</p>
<p>go.sum 文件用来记录每个依赖包的 hash 值，在构建时，如果本地的依赖包 hash 值与 go.sum 文件中记录的不一致，就会拒绝构建。</p>
<p>Go 在下载依赖包时，可以通过代理来下载，也可以指定版本号下载。如果不指定版本号，Go Modules 会根据自定义的规则，选择最小版本来下载。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1839</wp:post_id>
		<wp:post_date><![CDATA[2023-03-08 16:07:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-03-08 08:07:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-08 16:43:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-08 08:43:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[golang%e7%9a%84go-modules]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-03-08]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Gin框架-温故知新（一）]]></title>
		<link>https://www.liritian.com/archives/gin%e6%a1%86%e6%9e%b6-%e5%88%9d%e8%af%86/</link>
		<pubDate>Thu, 09 Mar 2023 05:22:09 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1846</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Gin 是一个用 Go (Golang) 编写的 Web 框架。  httprouter，速度很快很快。</p>
<ul>
<li>
<p>支持中间件
传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</p>
</li>
<li>
<p>Crash 处理
Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！</p>
</li>
<li>
<p>JSON 验证
Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</p>
</li>
<li>
<p>路由组
更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。</p>
</li>
<li>
<p>错误管理
Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</p>
</li>
<li>
<p>内置渲染
Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</p>
</li>
</ul>
<h2>下载安装</h2>
<pre><code class="language-bash">mkdir gin
cd gin
go mod init gin
go install github.com/gin-gonic/gin@latest

touch main.go

package main

import &quot;github.com/gin-gonic/gin&quot;

func main() {
    router := gin.Default()
    router.GET(&quot;/ping&quot;, func(c *gin.Context) {
        c.JSON(200, gin.H{
            &quot;message&quot;: &quot;pong&quot;,
        })
    })
    r.Run(&quot;:8888&quot;) // 监听并在 0.0.0.0:8888 上启动服务
}
</code></pre>
<h2>热启动</h2>
<p>go install github.com/pilu/fresh@latest
然后执行fresh命令即可，它会自动监听代码的变更，从而自己重新启动</p>
<h2>路由和路由组</h2>
<ul>
<li>
<p>单个路由
router := gin.Default()
router.GET(&quot;/ping&quot;, func(c *gin.Context) {
c.JSON(200, gin.H{
&quot;message&quot;: &quot;pong&quot;,
})
})</p>
</li>
<li>
<p>路由分组
// 简单的路由组: v1
v1 := router.Group(&quot;/v1&quot;)
{
v1.POST(&quot;/login&quot;, loginEndpoint)
v1.POST(&quot;/submit&quot;, submitEndpoint)
v1.POST(&quot;/read&quot;, readEndpoint)
}</p>
</li>
<li>
<p>多文件路由
新建一个router文件夹，新建一个路由文件ApiRouterGroup.go</p>
</li>
</ul>
<pre><code class="language-go">package router
import &quot;github.com/gin-gonic/gin&quot;

func ApiRouterGroupInit(router *gin.Engine){
    router:=router.Group(&quot;/api&quot;)
    {
        router.Get(&quot;/&quot;,func(c *gin.Context){
            c.JSON(http.statusOk,&quot;我是Jack&quot;,gin.H{
                &quot;title&quot;:&quot;handsome&quot;,
                &quot;wife&quot;:&quot;beautifule&quot;
            })
        })
    }
}</code></pre>
<p>然后在main.go里面执行routers.ApiRouterGroupInit(r)</p>
<h2>请求参数的接收</h2>
<p>c *gin.Context</p>
<p>Form格式
GET 方法
c.Query(&quot;id&quot;)
c.DefaultQuery(&quot;id&quot;,&quot;1&quot;)</p>
<p>POST
c.PostForm(&quot;name&quot;)
c.DefaultPostForm(&quot;nick&quot;,&quot;anonymous&quot;)
这种Form结尾的方法只能获取到mulipart/form-data格式的数据</p>
<p>JSON格式</p>
<ul>
<li>map</li>
<li>struct</li>
</ul>
<p>map格式
search := make(map[string]interface{})
err := c.BindJSON(&amp;search)
search[&quot;name&quot;]</p>
<p>struct 格式</p>
<pre><code>type Search struct {
Name string <code>json:&quot;name&quot;</code>
Cid  int    <code>json:&quot;cid&quot;</code>
}

search := &Search{}
err := c.BindJSON(&search)

serach.name</code></pre>
<p>请求</p>
<p>/post?ids[a]=1234&amp;ids[b]=hello
c.QueryMap(&quot;ids&quot;) //map[b:hello a:1234]
c.PostFormMap(&quot;names&quot;)</p>
<h2>路由参数</h2>
<p>router.Get(&quot;/user/:name&quot;,……
c.Param(&quot;name&quot;)</p>
<h2>文件上传</h2>
<p>设置大小 router.MaxMultipartMemory = 8 &lt;&lt; 20
c.FormFile(&quot;file&quot;)
c.SaveUploadedFile(file,dst) //上传文件至指定的完整文件路径</p>
<h2>模版渲染与变量</h2>
<p>router.LoadHTMLGlob(&quot;templates/**/*&quot;) //<strong> 代表文件夹，每多一层就多俩</strong></p>
<pre><code>func formatAsDate(t time.Time) string{
    ……
}

router := gin.Default()
router.LoadHTMLGlob(&quot;templates/**/*&quot;)
//设置自定义函数
router.SetFuncMap(template.FuncMap{
    &quot;formatAsDate&quot;: formatAsDate,
})

router.GET(&quot;/index&quot;,func(c *gin.Context) {
    c.HTML(http.StatusOK,&quot;posts/index.html&quot;,gin.H{
    &quot;title&quot;:&quot;Jack is awesome&quot;
    })
})

将会查找templates/posts/index.html文件
</code></pre>
<p>注意模板文件开头：</p>
<pre><code>{{define &quot;posts/index.html&quot;}}
    模版使用变量{{. title}}

    使用自定义方法
    {{ .now | formatAsDate }}
{{end}}</code></pre>
<p>ProtoBuf渲染</p>
<pre><code>router.GET(&quot;/protobuf&quot;,func(c *gin.Context){
    reps:=[]int64{int64(1), int64(2)}
    label:=&quot;test&quot;
    data:=&amp;protoexample.Test{
        Label:&amp;label,
        Reps: reps,
    }
}) </code></pre>
<h2>路由中间件</h2>
<p>gin.Default()默认使用了Logger盒Recovery中间件，如果使用gin.New()就不使用这两个。
如果想使用中间件：
r:= gin.New()
r.Use(gin.Logger())
r.User(gin.Recovery())
也可以单独给某个路由添加中间件
r.GET(&quot;/benchmark&quot;,MyLogger(),benchEndpoint)</p>
<p>路由分组使用中间件
authorized := r.Group(&quot;/&quot;)
authorized.Use(AuthRequired())
{
authorized.POST(&quot;/login&quot;,loginEndpoint)
//嵌套路由组
testing := authorized.Group(&quot;testing&quot;)
testing.GET(&quot;/analytics&quot;,analyticsEndpoint)
}</p>
<h2>模型绑定和验证</h2>
<p>Gin使用 go-playground/validator/v10 进行验证。</p>
<p>使用时，需要在要绑定的所有字段上，设置相应的tag。 例如，使用 JSON 绑定时，设置字段标签为 json:&quot;fieldname&quot;。</p>
<p>Gin提供了两类绑定方法：</p>
<p>Type - Must bind
Methods - Bind, BindJSON, BindXML, BindQuery, BindYAML</p>
<p>Behavior - 这些方法属于 MustBindWith 的具体调用。 如果发生绑定错误，则请求终止，并触发 c.AbortWithError(400, err).SetType(ErrorTypeBind)。响应状态码被设置为 400 并且 Content-Type 被设置为 text/plain; charset=utf-8。 如果您在此之后尝试设置响应状态码，Gin会输出日志 [GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422。 如果您希望更好地控制绑定，考虑使用 ShouldBind 等效方法。</p>
<p>Type - Should bind
Methods - ShouldBind, ShouldBindJSON, ShouldBindXML, ShouldBindQuery, ShouldBindYAML
Behavior - 这些方法属于 ShouldBindWith 的具体调用。 如果发生绑定错误，Gin 会返回错误并由开发者处理错误和请求。
使用 Bind 方法时，Gin 会尝试根据 Content-Type 推断如何绑定。 如果你明确知道要绑定什么，可以使用 MustBindWith 或 ShouldBindWith。</p>
<p>type Login struct{
User string <code>form:&quot;user&quot; json:&quot;user&quot; binding:&quot;required&quot;</code>
Password string <code>form:&quot;user&quot; json:&quot;user&quot; binding:&quot;-&quot;</code> //横杠代表忽略验证
}</p>
<h2>设置和获取cookie</h2>
<p>router.GET(&quot;/cookie&quot;,func(c *gin.Context) {
cookie,err:=c.Cookie(&quot;gin_cookie&quot;)
if err !=nil {
c.SetCookie(&quot;gin_cookie&quot;,&quot;test&quot;,3600,&quot;/&quot;,&quot;localhost&quot;,false,true)
}
})</p>
<h2>重定向</h2>
<p>router.GET(&quot;/cookie&quot;,func(c *gin.Context) {
c.Redirect(http.StatusMovedPermanently,&quot;<a href="http://www.baidu.com">http://www.baidu.com</a>&quot;)</p>
<p>//重定向到路由 test2
c.Request.URL.Path = &quot;/test2&quot;
r.HandleContext(c)
})</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1846</wp:post_id>
		<wp:post_date><![CDATA[2023-03-09 13:22:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-03-09 05:22:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-15 13:55:39]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-15 05:55:39]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gin%e6%a1%86%e6%9e%b6-%e5%88%9d%e8%af%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-03-10]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Gin框架-温故知新（二）]]></title>
		<link>https://www.liritian.com/archives/gin%e6%a1%86%e6%9e%b6-%e6%b8%a9%e6%95%85%e7%9f%a5%e6%96%b0/</link>
		<pubDate>Fri, 10 Mar 2023 11:20:47 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1850</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>控制器</h2>
<p>userController.go 文件名
package admin
法1：
type UserController struct{
BaseController
}</p>
<p>func (con UserController) Add(c *gin.Context){
c.String(200,&quot;Jack&quot;)
}
//路由里面
法1
r.GET(&quot;/user/add&quot;,admin.UserController{}.Add)</p>
<p>法2：
func UserAdd(c *gin.Context){
c.String(200,&quot;Jack&quot;)
}
//路由里面
r.GET(&quot;/user/add&quot;,admin.UserAdd)</p>
<h3>定义基类</h3>
<p>type BaseController struct{}</p>
<p>func (con BaseController) success(c *gin.Context) {
c.String(http.StatusOk,&quot;文章列表~~&quot;)
con.success(c)
}</p>
<p>func (con BaseController) error(c *gin.Context) {
c.String(http.StatusOk,&quot;文章列表~~&quot;)
con.error(c)
}</p>
<p>type UserController struct{
BaseController
}</p>
<p>func (con UserController) Add(c *gin.Context){
con.success(&quot;成功&quot;)
}</p>
<h2>Session</h2>
<p>安装
go install github.com/gin-contrib/sessions</p>
<p>在main函数里，设置存储引擎
//cookie引擎
store:=cookie.NewStore([]byte(&quot;secret&quot;))
//redis 引擎
sotre:= redis.NewStore(10,&quot;tcp&quot;,&quot;localhost:6379&quot;,&quot;&quot;,[]byte(&quot;secret&quot;))</p>
<p>r.Use(sessions.Sessions(&quot;mysession&quot;,store))</p>
<p>session:=sessions.Default()
session.Set(&quot;username&quot;,&quot;张三111&quot;)
session.Get(&quot;username&quot;)
session.Save() //必须调用</p>
<p>//分布式session
把session 放在redis里</p>
<p>设置过期时间</p>
<p>session.Options(sessions.Options{
MaxAge: 3600 * 6
})</p>
<h2>GORM</h2>
<p>是golang的一个orm框架，object relation map 对象关系映射</p>
<p>安装
go get -u gorm.io/gorm
go get -u gorm.io/driver/mysql</p>
<pre><code class="language-go">models下的User
type User struct {
    Id        int
    User      string
    Age       int `gorm:&quot;default:18&quot;` //默认值18
    Email     string
    AddTime   int
    DeletedAt gorm.DeletedAt //开启软删除
}</code></pre>
<p>user := models.User{}
//models.DB.Where(&quot;id IN ?&quot;, []int{1, 2}).Take(&amp;user)
//models.DB.Find(&amp;user) //对单个对象使用Find而不带limit，db.Find(&amp;user)将会查询整个表并且只返回第一个对象，这是性能不高并且不确定的。
//models.DB.Last(&amp;user) //按照id倒序</p>
<pre><code>//models.DB.First(&user, 1) //where id=1
//models.DB.First(&user, "id=?", 2) //where id=2
//user1 := models.User{Id: 3}
//models.DB.Find(&user1)
//models.DB.Find(&user, []int{1, 2, 3}) //where id in 123
//
//models.DB.Where("Id=?", "1").Find(&user)
//models.DB.Where(&models.User{User: "le0", Age: 0}).First(&user) //因为年龄是0 所以不查询 条件只有 where user="le0"
//models.DB.Where(&models.User{User: "le0"}, "Age").First(&user) //因为年龄是0 所以不查询 条件只有 where user="le0"
//models.DB.Where(map[string]interface{}{"User": "lee4", "Age": 0}).Find(&user) //where user=le0 and age=0
//
//models.DB.Where([]int64{2, 3, 4}).Find(&user) //where id in 2 3 4
//
//models.DB.Not("user=?", "le0").First(&user) //where not user=le0
//
//models.DB.Not([]int{1, 2, 3, 4}).First(&user) //where id not in (1,2,3,4)
//models.DB.Select("user", "age").First(&user) //select user,age from user
models.DB.Select([]string{"user", "age"}).First(&user) //select user,age from user</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1850</wp:post_id>
		<wp:post_date><![CDATA[2023-03-10 19:20:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-03-10 11:20:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-15 13:55:31]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-15 05:55:31]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gin%e6%a1%86%e6%9e%b6-%e6%b8%a9%e6%95%85%e7%9f%a5%e6%96%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-03-10]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Golang-框架echo]]></title>
		<link>https://www.liritian.com/archives/golang-%e6%a1%86%e6%9e%b6echo/</link>
		<pubDate>Wed, 15 Mar 2023 07:22:12 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1864</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>echo的特性</h2>
<ul>
<li>快速且轻量级：Echo 专为速度和效率而设计，确保处理 HTTP 请求和响应时的开销最小并具有高性能。</li>
<li>路由：该框架提供了灵活直观的路由系统，允许开发人员使用参数、查询字符串和自定义处理程序定义路由。</li>
<li>中间件支持：Echo 提供广泛的中间件支持，使开发人员能够轻松实现横切关注点，例如日志记录、身份验证、错误处理等。</li>
<li>基于上下文的请求处理：通过基于上下文的请求处理，Echo 可以轻松访问特定于请求的数据和参数，从而简化 Web 应用程序的开发。</li>
<li>强大的模板渲染：Echo包含强大的模板渲染引擎，支持各种模板语言，允许开发人员轻松生成动态HTML内容。</li>
<li>验证和绑定：该框架提供了强大的验证和数据绑定功能，使验证传入请求数据并将其绑定到 Go 结构变得简单。</li>
<li>可扩展性：Echo 具有高度可扩展性，支持自定义中间件、模板引擎和其他组件，使开发人员能够根据自己的特定需求定制框架。</li>
<li>社区和生态系统：Echo 项目受益于一个充满活力和活跃的社区，该社区贡献了库、插件和扩展，培育了可重用组件的生态系统。</li>
</ul>
<p>一句话：它很牛B</p>
<h2>echo 用法</h2>
<pre><code class="language-linux">mkdir echo
cd echo
go mod init mod

安装 (go version go1.19.4 darwin/arm64)

go install github.com/labstack/echo/v4@latest

hello jack

package echo

import (
    &quot;github.com/labstack/echo/v4&quot;
    &quot;net/http&quot;
)

func main() {
    e := echo.New()
    e.GET(&quot;/&quot;, func(c echo.Context) error {
        return c.String(http.StatusOK, &quot;Hello Jack&quot;)
    })

    //路由组
    g := e.Group(&quot;/admin&quot;)
    g.GET(&quot;/login&quot;,...)

    e.Logger.Fatal(e.Start(&quot;:1323&quot;))

}
</code></pre>
<h2>参数获取</h2>
<p>c echo.Context</p>
<ul>
<li>路由参数 /user/:id
c.Param(&quot;id&quot;)</li>
<li>URL参数
c.QueryParam(&quot;team&quot;)</li>
<li>Form 表单参数
c.FormValue (&quot;form&quot;)
文件  c.FormFile(&quot;avatar&quot;)</li>
<li>
<p>请求处理
根据请求头 content-type的不同把 json, xml, form or query ，绑定到struct里</p>
<pre><code>type User struct {
    Name  string `json:&quot;name&quot; xml:&quot;name&quot; form:&quot;name&quot; query:&quot;name&quot;`
    Email string `json:&quot;email&quot; xml:&quot;email&quot; form:&quot;email&quot; query:&quot;email&quot;`
}

e.POST(&quot;/users&quot;, func(c echo.Context) error {
    u := new(User)
    if err := c.Bind(u); err != nil {
        return err
    }
    return c.JSON(http.StatusCreated, u)
})</code></pre>
</li>
</ul>
<p>query - query 参数【GET和DELETE 方法】
param - 路由参数
header - 请求头里面的参数
json - request body go的内置函数处理.
xml - request body go的内置函数处理.
form - form data. 值从 query 和 request body.获取， go的标准库来解析
注意form格式的结果是大写的，其他的均是小写的</p>
<pre><code>Name: jack
Email: 22@qq.com</code></pre>
<p>如果struct 字段的tag 是省略的，那么会自动加上json,xml的标签</p>
<h2>返回值</h2>
<ul>
<li>string
c.String(http.StatusOK, &quot;Hello, World!&quot;)</li>
<li>html
c.HTML(http.StatusOK, &quot;<strong>Hello, World!</strong>&quot;)</li>
<li>json
c.JSON(http.StatusOK, u)
c.JSONPretty(http.StatusOK, u, &quot;  &quot;)</li>
<li>重定向
c.Redirect(http.StatusMovedPermanently, &quot;<URL>&quot;)</li>
</ul>
<h2>路由</h2>
<p>基于radix tree，速度非常快啊</p>
<p>e.GET(&quot;/hello&quot;, hello)
e.POST(&quot;/hello&quot;, hello)
e.MATCH([]string{http.MethodGet, http.MethodPost},&quot;/hello&quot;, hello) //两种路由都OK
e.ANY(&quot;/hello&quot;, hello) //多种路由都ok</p>
<p>匹配多个路由的格式：/user/*，可以匹配到如下</p>
<ul>
<li>/user/admin</li>
<li>/user/2/id/3
-/user</li>
</ul>
<h2>cookie</h2>
<p>写入cookie
cookie := new(http.Cookie)
cookie.Name = &quot;username&quot;
cookie.Value = &quot;jon&quot;
cookie.Expires = time.Now().Add(24 * time.Hour)
c.SetCookie(cookie)
读取cookie
cookie, err := c.Cookie(&quot;username&quot;)</p>
<h2>IP获取</h2>
<ul>
<li>无代理
e.IPExtractor = echo.ExtractIPDirect()</li>
<li>使用了X-Forwarded-For 头
e.IPExtractor = echo.ExtractIPFromXFFHeader()</li>
<li>X-Real-IP 头
e.IPExtractor = echo.ExtractIPFromRealIPHeader()</li>
</ul>
<h2>数据验证</h2>
<p>echo 使用第三方验证
go get github.com/go-playground/validator/v10</p>
<p>文档地址：<a href="https://pkg.go.dev/github.com/go-playground/validator/v10">https://pkg.go.dev/github.com/go-playground/validator/v10</a></p>
<pre><code>import  &quot;github.com/go-playground/validator/v10&quot;
var validate *validator.Validate

func AddUser(c echo.Context) error {

    validate = validator.New(validator.WithRequiredStructEnabled())
    errorMap, err := validateStruct()

    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, err.Error())
    }

    func validateStruct() (error) {
        user := &amp;User{
            FirstName:      &quot;Badger&quot;,
            LastName:       &quot;Smith&quot;,
            Age:            135,
            Gender:         &quot;male&quot;,
            Email:          &quot;Badger.Smith@gmail.com&quot;,
        }

            err := validate.Struct(user)
            return err
    }</code></pre>
<h2>中间件</h2>
<p>echo 有多种中间件，CORS（跨域）、CSRF(跨站请求伪造)、JWT等
e.Use(middleware.CORS())</p>
<p>e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
AllowOrigins: []string{&quot;<a href="https://labstack.com">https://labstack.com</a>&quot;, &quot;<a href="https://labstack.net">https://labstack.net</a>&quot;},
AllowHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept},
}))</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1864</wp:post_id>
		<wp:post_date><![CDATA[2023-03-15 15:22:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-03-15 07:22:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-16 21:39:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-16 13:39:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[golang-%e6%a1%86%e6%9e%b6echo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-03-15]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Gin框架热启动和Swagger文档植入]]></title>
		<link>https://www.liritian.com/archives/gin%e6%a1%86%e6%9e%b6%e7%83%ad%e5%90%af%e5%8a%a8%e5%92%8cswagger%e6%96%87%e6%a1%a3%e6%a4%8d%e5%85%a5/</link>
		<pubDate>Mon, 29 Jan 2024 10:30:33 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1999</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>热启动</h2>
<p>Gin框架的热启动，我一般用fresh和air，记录一下安装过程。</p>
<p>在没有 fresh 之前，启动项目使用的是 go run main.go,在使用 fresh 后，启动项目按照如下的命令。
fresh</p>
<ul>
<li>fresh
go install github.com/pilu/fresh@latest
然后使用 <code>fresh</code> 命令就会在改动文件之后自动更新</li>
</ul>
<p>Air 是一个用于在开发过程中实时重新加载 Go 应用程序的工具。它通过监视文件变化来自动重新编译和重新启动应用程序，从而使开发过程更加高效。
air</p>
<ul>
<li>air
go install github.com/cosmtrek/air@latest
安装完成之后在项目根目录有个<code>air.toml</code>文件，如果有想要排除的文件夹，在air.toml
<code>exclude_dir = [&quot;vendor&quot;, &quot;node_modules&quot;, &quot;log&quot;]</code>,比如我想排除掉testdata，在testdata中修改任何文件都不再热更新，添加testdata 到 exclude_dir中即可。</li>
</ul>
<h2>swagger 文档</h2>
<p>安装</p>
<ul>
<li>go install github.com/swaggo/swag/cmd/swag@latest 安装最新版的swagg，注意最新版的swagger需要安装go 1.20版本
再安装其他的包</li>
<li>go get -u github.com/swaggo/gin-swagger</li>
<li>go get -u github.com/swaggo/files</li>
</ul>
<p>第一步：然后需要main.go中main函数上面添加如下</p>
<pre><code>// @title gvb_server API文档
// @version 1.0
// @description gvb_server API文档
// @host 127.0.0.1:8081 
// @Basepath /

title 代表swagger的名字 
version是版本
description 是描述
host 是项目启动的 地址和端口
Basepath 就写 /就好
</code></pre>
<p>第二步 在router文件中增加</p>
<pre><code>import (
    swaggerFiles &quot;github.com/swaggo/files&quot;
    gs &quot;github.com/swaggo/gin-swagger&quot;
    )

    ...
    router := gin.Default()
    router.GET(&quot;/swagger/*any&quot;, gs.WrapHandler(swaggerFiles.Handler))</code></pre>
<p>第三步 在控制器的方法上增加注释</p>
<pre><code>比如：
// AdvertListView 广告列表
// @Tags 广告列表
// @Summary 广告列表
// @Description 广告列表
// @Param limit query models.PageView false &quot;&quot;
// @Param page query models.PageView false &quot;表示多个参数&quot;
// @Router /api/advert [get]
// @Produce json
// @Success 200 {object} res.Response{data=res.ListResponse[models.AdvertModel]}
func (AdvertApi) AdvertListView(c *gin.Context) {
    var request models.PageView
    err := c.ShouldBindQuery(&amp;request)
    referer := c.GetHeader(&quot;Referer&quot;)
    isShow := true
    fmt.Println(referer)

    if strings.Contains(referer, &quot;admin&quot;) {
        //admin来的
        isShow = false //等于false gorm会忽略
    }

    if err != nil {
        res.FailWithCode(res.ArgumentError, c)
        return
    }

    //判断referer 是否包含admin 如果是，就全部返回，不是，就返回is_show=true,
    list, count, _ := common.ComList(models.AdvertModel{IsShow: isShow}, common.Option{
        PageView: request,
    })

    if err != nil {
        global.Log.Error(err)
        res.FailWithMessage(&quot;添加广告失败&quot;, c)
        return
    }
    res.OkWithList(list, count, c)
}</code></pre>
<p>// @Tags 显示在swagger的标题
// @Summary 显示在swagger 概括
// @Description 显示在swagger描述
// @Param limit query models.PageView false &quot;每页显示多少条&quot;
// @Param page query models.PageView false &quot;页码&quot; （这里是参数的注释）
// @Router /api/advert [get]  （这里是路由和请求方法）
// @Produce json
// @Success 200 {object}   返回值</p>
<p>第四步 生成docs文件
执行 <code>swag init</code> 会在<code>docs</code>文件夹中生成3个文件：
docs.go、swagger.json、swagger.yaml</p>
<p>注意：每次新增一个方法都要重新执行一下swag init 命令，以便生成新的文档。</p>
<p>第五步 启动项目，使用fresh或者air </p>
<p>第六步 访问 <a href="http://ip:port/swagger/index.html">http://ip:port/swagger/index.html</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1999</wp:post_id>
		<wp:post_date><![CDATA[2024-01-29 18:30:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-29 10:30:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-29 18:59:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-29 10:59:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gin%e6%a1%86%e6%9e%b6%e7%83%ad%e5%90%af%e5%8a%a8%e5%92%8cswagger%e6%96%87%e6%a1%a3%e6%a4%8d%e5%85%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-03-29]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Golang的面试50问（二）？]]></title>
		<link>https://www.liritian.com/archives/golang%e7%9a%84%e9%9d%a2%e8%af%9550%e9%97%ae%ef%bc%88%e4%ba%8c%ef%bc%89%ef%bc%9f/</link>
		<pubDate>Sat, 02 Mar 2024 12:57:52 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1793</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>文件I/O操作</h2>
<ol start="26">
<li>
<p>获取文件信息的接口是什么
FileInfo()，可以获取文件名，文件大小，修改权限，修改时间。</p>
</li>
<li>
<p>获取文件路径相关的有哪些方法？
filepath.Rel() 获取相对路径
filepath.Abs()获取绝对路径
filepath.IsAbs() 判断是否绝对路径
filepath.Join() 拼接路径</p>
</li>
<li>
<p>创建目录和文件的函数是什么？
os.MKdir()，创建一层目录，os.MkdirAll() 创建多层目录
os.Create()创建文件，如果文件存在，覆盖
打开文件，os.OpenFile(filename,mode,perm)
//O_RDONLY 只读，
//O_WRONLY只写,
//O_RDWR 读写
//O_APPEND 追加
//O_CREATE 文件不存在就创建
关闭文件，file.Close()
删除文件：os.Remove() 删除已命名的文件或空目录，os.RemoveAll()移除所有的路径和它包含的任何子节点。</p>
</li>
<li>
<p>读取和写入文件的步骤,复制文件
读取：os.Open(),file.Read(),file.Close()
写入：os.OpenFileI(),file.Write(),file.WriteString()
复制：copyFile()</p>
</li>
<li>
<p>ioutil包核心函数有哪些？
ReadFile()读取文件中所有的数据返回读取的字节数组
WriteFile() 向执行文件写入数据，如果文件不存在，则创建，写之前清空文件
ReadDir() 读取一个目录下的子内容，但是仅有一层。</p>
</li>
<li>
<p>bufio包是用来干什么的？
bufio实现了带缓冲的I/O操作，达到高效读写。把文件读取进缓冲区之后，再读取的时候就可以避免文件系统的输出，从而提高速度；再进行写操作时，先把文件写入缓冲区，然后由缓冲区写入文件系统。</p>
<p>NewReader() 创建一个具有默认大小缓冲区，从r读取*Reader
NewReaderSize()创建一个至少有size尺寸的缓冲区
Read() 读取n个byte数据
ReadByte()读取1个字节
ReadString（）读取一个字符串</p>
<h2>网络编程</h2>
</li>
<li>
<p>标准内置net/http包
http.FileServer()只提供静态文件访问
http.ListenAndServer()启动服务并监听端口
http.HandleFunc()的作用是注册网络访问的路由。因为它采用的是默认的路由分发任务方式，所以称之为默认多路由分发服务
http.NewServeMux()作用是注册网络访问的多路路由，称之为自定义多路由分发服务。</p>
</li>
<li>
<p>服务器如何获取客户端请求的数据？
get请求
r.ParseForm() 返回error 判断是否解析传参时出错
r.Form属性，返回url.Values，是个map[string][]string
r.FormValue(key)根据客户端传参的ky获取对应的值
r 表示 *http.Request类型 w表示 http.ResponseWriter
post请求
对于x-www-form-urlencoded情况用r.PostFormValue(key)
文件mulipart/form-data 使用r.FormFile(key)根据文件上传空间的name取到上传文件的File和FileHeader对象。</p>
</li>
<li>
<p>获取cookie的值？
cookie 是一个结构体，有cookie的名，值，域，过期时间
http.SetCookie(w,&amp;cookie1) 设置cookie
r.Cookie(&quot;cookie&quot;) 获取cookie</p>
</li>
<li>
<p>模板html/template 包来支持模板渲染
模板变量通过{{.}}来访问，称为管道和root
{{/<em>comment</em>/}}来进行注释 golang在渲染模板的时候，在模板文件找那个读取变量内的值，并渲染到模板里。两种常用类型是struct和map
{{.Username}}
逻辑判断
{{if .condition}}
{{end}}</p>
<p>循环遍历
{{range $index,$value:=.slice}}
{{end}}
模板嵌套
{{template &quot;header.html&quot;}}</p>
</li>
<li>
<p>json相关的函数？
json.Marshal() 将过数据类型转为JSON字符串。
json.MarshalIndent()便于阅读的格式
结构体转json，因为json包通过反射机制来实现编制解码的，因此结构体必须导出（小写的）所转化的字段，没有导出字段不会被json包解析
结构体字段的标签
<code>json:&quot;_name&quot;</code>,其中_name为标签，如果标签是“-”，则不解析改字段。
channel，complex，function 是不能被编码成JSON的，指针编码的时候会输出指针指向的内容，空指针输出null
json的解析就是将json转为go数据类型
json.Unmarshal()</p>
<h2>并发编程</h2>
</li>
<li>
<p>并发与并行的区别？
并发：concurrency 是同事处理许多个任务，实际上是把任务在不同的时间点交给处理器进行处理，在微观层面，任务不会同时运行。
并行: parallelism 是把每一个任务分配给每一个处理器独立完成，多个任务一定是同一时间运行。</p>
</li>
<li>
<p>进程和线程
程序就像是剧本，进程就像是演戏，同一个剧本可以在多个舞台上同时上演。
--鲁迅
区别：线程也叫轻量级进程，通常一个进程包含若干个线程，线程可以利用进程所拥有的资源。
进程：系统分配资源的基本单位
线程：作为独立运行和独立调度的基本单位
联系：
进程和线程是操作系统级别的两个基本概念。一个进程可以包含多个线程，线程是容器中的工作单位，线程依附于进程而存在；线程共享进程的资源。</p>
</li>
<li>
<p>协程是什么？
协程Coroutine，1963年出生，字微线程，是一种比线程更加轻量级的存在。
一个进程拥有多个线程，一个线程拥有多个协程。
协程是编译器级别的，进程和线程是操作系统级别的。协程不被操作系统内核管理，而完全由程序控制，因此没有线程切换的开销。
协程的优势在于其轻量级，可以轻松创建上万个而不会导致系统资源衰竭。</p>
<p>go语言中的协程，叫goroutine，由go程序运行时（runtime）调度和管理，go程序会智能地将goroutine种的任务合理的分配给每个CPU，创建Goroutine的成本很小，每个Goroutine的堆栈只有几kb，且堆栈可以根据应用程序的需要增长和收缩。</p>
<p>Goroutine能并行执行，而Coroutine智能顺序执行；Goroutine可在多线程 环境产生，Coroutine只能发生在单线程，Coroutine需要主动交出控制权，系统才能获得控制权并将控制权交给其他Coroutine。</p>
<p>Coroutine的运行机制属于协作式任务处理，应用程序在不适用cpu式，需要交出CPU使用权
Goroutine属于抢占式任务处理，和现有的多线程和多进程任务处理非常类似。</p>
<p>golang创建协程的 go hello();没有返回值，需要返回数据必须用channel
Goroutine在main()函数结束时会一同结束，如果main的GoroutineA比子GoroutineB先终止，B就不会执行。
线程与CPU核心数量的对应关系，runtime.GOMAXPROCS(逻辑CPU数量)函数。</p>
</li>
<li>
<p>channel是什么？
channel是go的通道，是协程之间的通信机制。一个channel是一条通信管道，它可以让一个协程通过它给另一个协程发送数据。每个channel都需要指定数据类型，即channel可以发送数据的类型 如：chan int。
线程之间通过共享内存来进行数据，不同线程共享内存同步问题需要使用锁来解决，这样性能低下，go语言中使用channel来代替共享内存。
主张：通过数据传递来实现共享内存，而不是通过共享内存来实现数据传递。</p>
<p>var channel 变量 chan channel类型
chan 类型的空值是nil，声明需要配合make()才能使用
channel是引用类型，需要使用make()进行创建
channel := make(chan 数据类型)
ch1 ：= make(chan int)</p>
<p>channel ch1&lt;-值,发送的值的类型必须与channel的元素类型一致。如果goroutine在一个channel上发送数据，其他的goroutine应该接收得到数据；如果没有接收，那么程序将在运行时出现死锁。同理，如果Goroutine在等待从channel接收数据，其他一些Goroutine将会在该channel上写入数据，如果没有写入，程序将会死锁。</p>
<p>1 阻塞接收数据
data:=&lt;-ch 直接接收到数据并赋值给data变量
2 完整写法
data,ok:=&lt;-ch
3 忽略接收数据
&lt;-ch  目的不在于接收channel数据，而是为了阻塞Goroutine
for rnage 循环会自动判断通道是否关闭，自动break 循环</p>
<p>阻塞：channel默认是阻塞的，直到有其他的goroutine从该channel读取数据；从channel读取数据室，也会被阻塞，直到其他Goroutine讲数据写入该channel，这些channel的特性帮助goroutine有效的通信，而不需要使用其他语言中的显示锁或者条件变量。</p>
<pre><code>关闭channel，close();
发送方主动关闭，接收方多重判断，往关闭的channel写入数据会报错。但是从里面读出数据是可以的，返回数据的默认值和false
缓冲channel：
    默认创建都是非缓冲channel，读写都是即时阻塞。缓冲channel自带一块缓冲区，可以暂时存储数据，如果缓冲区慢了，就会发生阻塞。
    make(chan string,6)
单向channel：
    默认都是双向的，即可读可写。定向channel也叫单向channel，只读，或只写。
    只读：
    make(<- chan Type)
    <-chan
    只写：
        make(<- chan Type)
    chan<-</code></pre>
</li>
<li>
<p>time包与channel相关的函数
Timer结构体，计时器类型表示单个事件，当计时器过期时，当前时间将被发送到c上，c是一个只读channel&lt;-chan time.Time，除非计时器是After()创建的。
计时器必须使用NewTimer()或者After()创建
NewTimer()函数创建一个新的计时器，它会至少持续时间d之后将当前时间发送到其channel上。</p>
<p>After() 函数相当于NewTimer(d).C
time.After(5* time.Second)</p>
</li>
<li>
<p>select 分支语句
select机制有点像switch语句，不同的是select 会随机挑选一个可通信的case来执行如果所有case都没有数据到达，则执行default，如果没有default语句，select就会阻塞，知道有case接收数据</p>
</li>
<li>
<p>sync包是什么的？
sync包提供了互斥锁。同步的sync是串行执行，异步的sync同时执行。
waitGroup同步等待组,等待一组Goroutine结束。
type WaitGroup struct{
noCopy noCopy
state1 [12]type
sema uint32
}</p>
<p>父Goroutine 调用Add()方法来设置应等待Goroutine的数量，每个被等待的Goroutine在结束时应该调用Done()方法。于此同时，主Goroutine可调用Wait() 方法阻塞至所有Goroutine结束。
Add()方法向内部计数加上delta，delta可以是负数；如果内部计数变为0，wait()方法阻塞等待的所有Goroutine都会释放，若果计数小于0，则该方法panic。注意Add()整数的调用应在Wait()之前，否则wait()可能只会等待很少的Goroutine。本方法应该在创建新的Goroutine或者其他应该等待的事件之前调用。</p>
<p>Done()方法见效WaitGroup计数器的值，应该在Goroutine最后执行。
Wait()方法阻塞Goroutine直到WaitGroup计数减为0。
var wg sync.WaitGroup
wg.add(2)
go printNum(&amp;wg,1)
go printNum(&amp;wg,1)
wg.wait() 进入阻塞状态，当计数为0时解除阻塞。</p>
<p>func printNum(wg *sync.WaitGroup,num int){
……
wg.Done() 计数器减1
}</p>
<p>注意：所有的子Goroutine退出之后，主Goroutine才退出。</p>
</li>
<li>
<p>互斥锁
type Mutex struct{
state int32
sema uint32
}</p>
<p>Mutex 是一个互斥锁，可以床位其他结构体的字段，零值为解锁状态。Mutex类型的锁和Goroutine无关，可以由不同的Goroutine加锁和解锁。
Lock() 锁住m，如果m已经加锁，阻塞到m解锁
Unlock() 方法解锁，如果m未加锁，就会导致运行时错误。
读写互斥锁：RWMutex,简称读写锁，该锁可以同时被多个读取者持有或被唯一写入者持有。RWMutex可以创建为其他结构体字段；零值为解锁状态。RWMutex类型的锁也和Goroutine无关，可以由不同的Goroutine加读取锁/写入锁和解读取锁/写入锁。
读写锁，写操作互斥，读写互斥，读读不互斥。
Lock() 将rw锁定为写入状态，禁止其他Goroutine读取或者写入
Unlock()方法解除rw的写入锁，如果rw未加入锁会导致运行时错误。
RLock() 将rw锁定为读取状态，禁止其他Goroutine写入，但不禁止读取
RUnlock()方法解除rw的读取锁，如果rw未加读取锁会导致运行时错误。</p>
</li>
<li>
<p>条件变量
type Cond struct{
noCopy noCopy
L Locker
notify notifyList
checker copyChecker
}
Cond实现了一个条件变量，一个Goroutine结合第，供Goroutine等待或者宣布某事件的发生。每个Cond实例都有一个相关的锁（一般是<em>Mutex或</em>RWMutex类型的值），它必须在改变条件时，或者调用Wait()方法时保持锁定。Cond可以创建为其他结构体的字段，Cond在开始使用后不能被复制。
NewCond() 使用锁1创建一个*Cond。Cond条件变量总是要和锁结合使用。
Broadcast()唤醒所有等待c的Goroutine。调用者在调用本方法时，建议保持c.L的锁定
Signal()唤醒等待c的一个Goroutine,建议保持c.L锁定。此方法通知给一个人
Wait()自行解锁，c.L并阻塞当前Goroutine，待线程恢复执行时，Wait()方法会在返回前锁定c.L。Wait()除非被Broadcast()或者Signal()唤醒，否则不会主动返回。此方法广播给所有人。</p>
</li>
<li>
<p>Hash与加密解密的区别？
Hash是将目标文本转换成具有相同长度的，不可逆的杂凑字符串，而加密是将目标文本转换成具有不同长度的、可逆的密文。
场景：如果被保护的数据仅用于比较验证，不需要还原成明文形式，则使用Hash，如果被保护数据以后需要被还原成明文，则使用加密。
对Hash的攻击方法：
1 寻找碰撞法- 王小云教授发布过寻找碰撞发改进算法。
2 穷举法，穷举法看似笨拙实则应用性广泛。所以密码尽量复杂，防止被快速穷举。</p>
</li>
<li>
<p>对称加密算法？
对称加密算法，也叫私钥加密算法，指加密和解密使用相同的密钥的加密算法。要求发送方和接收方在安全通信之前，商定一个秘钥。对称算法安全性依赖于秘钥。
优点：计算量小，加密速度快，加密效率高。
缺点：参与方要提前持有秘钥。
加密算法：DES、3DES、AES、RC2、RC4、RC5和Blowfish</p>
<p>DES：数据加密标准算法是加密和解密使用相同秘钥的加密算法，也叫做单秘钥算法和私钥加密算法，是传统的密钥算法。密钥长度是56位
AES：高级加密标准算法，更安全、效率更高。AES算法使用128位、192位或256位的密钥长度。2^64次方，穷举需要58万年。
加密模式：
ECB：电子密码本模式，最基本的加密，相同的明文将永远加密成相同的密文。
CBC：密码分组链接模式，明文被加密前要与前面的密文进行异或运算，因此只要选择不同的初始向量，相同的明文被加密后形成不同的密文。
CFB：加密反馈模式，分组加密后，按8位分组将密文和明文进行移位异或后得到输出，同时反馈会移位寄存器。优点是最小可以按字节进行加解密，也可以是n位的。
OFB：输出反馈模式，将分组密码作为同步序列密码运行和CFB相似。不过OFB用前一个n位密文输出分组反馈会移位寄存器，没有错误扩散问题。
填充方式：
PKCS5填充：每个填充的字节都记录了填充的总字节数。
ZEROS填充：全部填充为0的字节</p>
</li>
<li>
<p>非对称性加密算法？
非对称性加密又叫做公开密钥加密（public key cryptography）或者公钥加密，指加密和解密使用不同的密钥加密算法。公钥加密需要两个密钥，一个是公开密钥，另一个是私有密钥；一个用于加密，另一个用于解密。
RSA是最有影响力的公钥加密算法。其他常见的公钥加密算法有E1Game1，背包算法，Rabin，ECC（椭圆加密算法）</p>
<p>非对称加密的缺点是加解密速度远远慢于对称加密。加密消息的密钥不能解密消息。可以公开的为公钥，不公开的密钥称为私钥。私钥不通过任何途径向任何人提供。
两种：
1 公钥加密，私钥解密
2 私钥加密，公钥解密</p>
<p>前者是普通的非对称性加密，后者被称为数字签名</p>
</li>
<li>
<p>数字签名是什么？
数字签名（Digital Sinature） 又称公开密钥数字签名、电子签章，一种类似与写在纸上的普通的物理签名，但是使用了公钥加密领域的技术，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。数字签名可以验证数据的来源，可以验证数据传输过程中是否被修改。
实现方法：通过非对称性加密算法中的私钥加密，公钥解密的过程来实现的。私钥加密就是私钥签名，公钥解密就是公钥验证签名。
两部分：
使用私钥为消息创建签名算法，
允许任何人用公钥来验证签名的算法。</p>
</li>
<li>
<p>字符编码与解码
Base64 是一种基于64个可打印字符来表示二进制数据的编码方式。base64使用了26个小写字母，26个大写字母，10个数字以及2个符号（+，/）</p>
<p>Base58 一种基于文本的二进制编码方式。是Base64的子集，没有容易混淆的0O（大写O）l（小写L）I（大写的I）以及+和/。</p>
</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1793</wp:post_id>
		<wp:post_date><![CDATA[2024-03-02 20:57:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-02 12:57:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-04 13:13:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-04 05:13:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[golang%e7%9a%84%e9%9d%a2%e8%af%9550%e9%97%ae%ef%bc%88%e4%ba%8c%ef%bc%89%ef%bc%9f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Beego框架]]></title>
		<link>https://www.liritian.com/archives/beego%e6%a1%86%e6%9e%b6%e5%ae%89%e8%a3%85/</link>
		<pubDate>Mon, 04 Mar 2024 06:59:00 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1801</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Beego介绍与安装</h2>
<p>Beego是一个使用Go语言来开发Web应用额GoWeb框架，诞生于2012年。可以快速开发API、Web、后端服务等各种应用。
主要特点：</p>
<ul>
<li>简单化：使用MVC模型，支持RESTful;可以使用bee工具来提高开发效率，如果监控代码修改进行热编译、自动化测试代码、自动化打包部署。
-智能化：封装了路由、支持智能路由、智能监控、监控内存消耗、CPU使用以及Goroutine的运行状况。</li>
<li>模块化：对代码解耦封装、形成了session、cache、log、配置解析、性能监控、上下文操作、ORM等；</li>
<li>高性能： Beego采用原生的Go原生的HTTP请求，Goroutine的并发效率应付大流量Web应用和API应用。</li>
</ul>
<p>Beego安装</p>
<ol>
<li>mkdir beego</li>
<li>cd beego</li>
<li>go mod init beego</li>
<li>go install  github.com/beego/bee/v2@latest //先安装bee工具</li>
<li>安装完之后，bee 可执行文件默认存放在 $GOPATH/bin 里面，所以你需要把 $GOPATH/bin 添加到你的环境变量中，才可以进行下一步。
如果你本机设置了 GOBIN，那么上面的bee命令就会安装到 GOBIN 目录下，所以我们需要在环境变量中添加相关的配置信息</li>
</ol>
<pre><code>#go语言安装主根目录
export GOROOT=/usr/local/go #替换你的目录
#GOPATH 是自己的go项目路径，自定义设置
export GOPATH=/Users/Lee/www/golang #替换你的目录
#GOBIN 当我们使用go install命令编译后并且安装的二进制程序目录
export GOBIN=$GOPATH/bin
# 启用 Go Modules 功能
export GO111MODULE=on
# 配置 GOPROXY 环境变量。你可以换成你喜欢的 proxy
export GOPROXY=https://goproxy.cn,direct
# 加入环境变量中
export PATH=$PATH:$GOROOT/bin:$GOBIN</code></pre>
<p>安装完成之后 使用 bee version </p>
<pre><code>______
| ___ \
| |_/ /  ___   ___
| ___ \ / _ \ / _ \
| |_/ /|  __/|  __/
\____/  \___| \___| v2.1.0</code></pre>
<p>出现如此字样即安装ok,执行命令 bee new beego 即创建一个 beego项目。如果只是用来做api项目，可以用bee api beego，这样就不会有静态资源和view文件夹，多一个test文件夹。</p>
<p>bee run 命令可以启动并监控项目（热更新）
bee pack 目录用来发布应用的时候打包，会把项目打包成 zip 包，这样我们部署的时候直接把打包之后的项目上传，解压就可以部署了。</p>
<p>开发的时候最喜欢的命令：generate
可以一个命令生成 bee generate controller、model、view等方便快捷。</p>
<p>管理SQL的命令 migrate：
bee migrate： run all outstanding migrations
bee migrate rollback：rollback the last migration operation
bee migrate reset  ：rollback all migrations
bee migrate refresh：rollback all migrations and run them all again</p>
<h2>配置模块</h2>
<p>Beego 目前支持 INI、XML、JSON、YAML 格式的配置文件解析，也支持以 etcd 作为远程配置中心。
在conf/app.conf</p>
<h2>路由</h2>
<p>查看已经注册的所有路由：</p>
<pre><code class="language-golang">    tree := web.PrintTree()
    methods := tree[&quot;Data&quot;].(web.M)
    for k, v := range methods {
        fmt.Printf(&quot;%s =&gt; %v\n&quot;, k, v)
    }</code></pre>
<p>控制器风格的路由：
web.CtrlGet(&quot;api/user/:id&quot;, UserController.GetUserById)</p>
<p>注册函数式风格路由注册:
该风格比较接近 Go 本身的语法特性,使用该风格，非常简单，可以直接采用函数式的写法：</p>
<pre><code class="language-golang">func main() {
    web.Get(&quot;/hello&quot;, func(ctx *context.Context) {
        ctx.WriteString(&quot;hello, world&quot;)
    })

    web.Run()
}</code></pre>
<p>增加前缀：
ctrl := &amp;UserController{}
web.AutoPrefix(&quot;api&quot;, ctrl)</p>
<h3>获取路由参数</h3>
<p>/api/order/:id/detail
id := ctrl.Ctx.Input.Param(&quot;:splat&quot;)</p>
<p>如果是多段的，例如/api/*/name/*/detail，那么:splat只能获得最后一段的数据</p>
<p>/api/:username/profile
username := ctrl.Ctx.Input.Param(&quot;:username&quot;)</p>
<p>Get类 方法：
name := ctrl.GetString(&quot;name&quot;,&quot;jack&quot;) //默认值是jack</p>
<p>把输入转换为结构体：</p>
<pre><code class="language-golang">type MainController struct {
    web.Controller
}

func (ctrl *MainController) Post() {
    user := User{}
    err := ctrl.BindJSON(&amp;user)
    if err != nil {
        ctrl.Ctx.WriteString(err.Error())
        return
    }
    ctrl.Ctx.WriteString(fmt.Sprintf(&quot;%v&quot;, user))
}

type User struct {
    Age  int    `json:&quot;age&quot;`
    Name string `json:&quot;name&quot;`
}</code></pre>
<h3>web 上传和下载</h3>
<p>文件上传之后一般是放在系统的内存里面，如果文件的 size 大于设置的缓存内存大小，那么就放在临时文件中，默认的缓存内存是 64M，你可以通过如下来调整这个缓存内存大小:</p>
<p>web.MaxMemory = 1&lt;&lt;22
或者在配置文件中通过如下设置：</p>
<p>maxmemory = 1&lt;&lt;22
与此同时，Beego 提供了另外一个参数，MaxUploadSize来限制最大上传文件大小——如果你一次长传多个文件，那么它限制的就是这些所有文件合并在一起的大小。</p>
<p>默认情况下，MaxMemory应该设置得比MaxUploadSize小，这种情况下两个参数合并在一起的效果则是：</p>
<p>如果文件大小小于MaxMemory，则直接在内存中处理；
如果文件大小介于MaxMemory和MaxUploadSize之间，那么比MaxMemory大的部分将会放在临时目录；
文件大小超出MaxUploadSize，直接拒绝请求，返回响应码 413</p>
<p>GetFile（）该方法主要用于用户读取表单中的文件名 the_file，然后返回相应的信息，用户根据这些变量来处理文件上传、过滤、保存文件等。</p>
<p>SaveToFile(fromfile, tofile string) error：该方法是在 GetFile 的基础上实现了快速保存的功能。fromfile是提交时候表单中的name。</p>
<p>下载：
ctrl.Ctx.Output.Download(&quot;LICENSE&quot;, &quot;license.txt&quot;)</p>
<p>Download方法的第一个参数文件路径，第二个参数是用户保存到本地时候的文件名。
如果第一个参数使用的是相对路径，那么它代表的是从当前工作目录开始计算的相对路径</p>
<h2>XSRF跨站请求伪造</h2>
<p>跨站请求伪造(Cross-site request forgery) (opens new window)， 简称为 XSRF，是 Web 应用中常见的一个安全问题。
当前防范 XSRF 的一种通用的方法，是对每一个用户都记录一个无法预知的 cookie 数据，然后要求所有提交的请求（POST/PUT/DELETE）中都必须带有这个 cookie 数据。如果此数据不匹配 ，那么这个请求就可能是被伪造的。
直接在 main 入口处这样设置：
web.EnableXSRF = true
web.XSRFKEY = &quot;61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o&quot;
web.XSRFExpire = 3600
这样就需要前端传递给你的时候每次都要传递<code>xsrf</code>信息</p>
<p>两种方式：
在表单里面携带一个叫做 _xsrf 的字段，里面是 XSRF 的 Token;
在提交的请求的 HTTP HEADER 里面设置 X-Xsrftoken 或 X-Csrftoken，值就是 Token;</p>
<p>烦死了去跑步去。5km之后再来写。5.7km 跑完了接着写~</p>
<h2>Orm的增删改查：</h2>
<p>//单行插入</p>
<p>Insert(md interface{}) (int64, error)
InsertWithCtx(ctx context.Context, md interface{}) (int64, error)</p>
<p>InsertOrUpdate(md interface{}, colConflitAndArgs ...string) (int64, error)
InsertOrUpdateWithCtx(ctx context.Context, md interface{}, colConflitAndArgs ...string)</p>
<p>批量插入
InsertMulti(bulk int, mds interface{}) (int64, error)
InsertMultiWithCtx(ctx context.Context, bulk int, mds interface{}) (int64, error)</p>
<p>更新
Update(md interface{}, cols ...string) (int64, error) //会主动寻找主键
UpdateWithCtx(ctx context.Context, md interface{}, cols ...string) (int64, error)</p>
<p>使用主键来删除数据，定义：</p>
<p>Delete(md interface{}, cols ...string) (int64, error)
DeleteWithCtx(ctx context.Context, md interface{}, cols ...string) (int64, error)</p>
<p>读取
Read(md interface{}, cols ...string) error
ReadWithCtx(ctx context.Context, md interface{}, cols ...string) error</p>
<p>事务</p>
<pre><code class="language-golang">    // Beego will manage the transaction&#039;s lifecycle
    // if the @param task return error, the transaction will be rollback
    // or the transaction will be committed
    err := o.DoTx(func(ctx context.Context, txOrm orm.TxOrmer) error {
        // data
        user := new(User)
        user.Name = &quot;test_transaction&quot;

        // insert data
        // Using txOrm to execute SQL
        _, e := txOrm.Insert(user)
        // if e != nil the transaction will be rollback
        // or it will be committed
        return e
    })</code></pre>
<p>QuerySeter
// 获取 QuerySeter 对象，user 为表名
qs := o.QueryTable(&quot;user&quot;)
qs.Filter(&quot;profile<strong>age&quot;, 18) // WHERE profile.age = 18
qs.Filter(&quot;Profile</strong>Age&quot;, 18) // 使用字段名和 Field 名都是允许的
qs.Filter(&quot;profile<strong>age</strong>gt&quot;, 18) // WHERE profile.age &gt; 18</p>
<p>qs.Filter(&quot;name__iexact&quot;, &quot;slene&quot;)
// WHERE name LIKE 'slene'
// 大小写不敏感，匹配任意 'Slene' 'sLENE'</p>
<p>qs.Filter(&quot;name__icontains&quot;, &quot;slene&quot;)
// WHERE name LIKE '%slene%'
// 大小写不敏感, 匹配任意 'im Slene', 'im sLENE'</p>
<p>qs.Filter(&quot;name__istartswith&quot;, &quot;slene&quot;)
// WHERE name LIKE 'slene%'
// 大小写不敏感, 匹配任意以 'slene', 'Slene' 起始的字符串</p>
<p>qs.Filter(&quot;name__iendswithi&quot;, &quot;slene&quot;)
// WHERE name LIKE '%slene'
// 大小写不敏感, 匹配任意以 'slene', 'Slene' 结束的字符串</p>
<p>qs.Filter(&quot;profile_id__isnull&quot;, true)
// WHERE profile_id IS NULL</p>
<p>qs.Filter(&quot;profile__isnull&quot;, false)
// WHERE profile_id IS NOT NULL</p>
<h2>缓存模式</h2>
<p>Read Through
Read Through 缓存模式本质上就是帮助你在缓存没有的情况下去数据库加载数据，并且回写缓存
Random Expire
这个模式主要用于解决缓存雪崩问题，即大量的 key 在同一时间过期，那么就可以考虑在设置 key-value 的时候，给过期时间加上一个随机偏移量</p>
<p>Singleflight
在 key 不存在，或者查询缓存失败的情况下，会有多个 goroutine 尝试去加载数据，那么使用该模式可以确保，一个 key 在当前进程里面只有一个 goroutine 去加载数据</p>
<p>Bloom Filter
该模式用于高并发环境下快速判断 key 对应的数据是否存在，比较适合解决缓存穿透问题。</p>
<h2>日志模块</h2>
<p>log := logs.NewLogger()
logs.EnableFuncCallDepth(true) 日志默认不输出调用的文件名和文件行号,如果你期望输出调用的文件名和文件行号 设置为true</p>
<h2>数据校验</h2>
<p>go get github.com/beego/beego/v2/core/validation
u := User{&quot;man&quot;, 40}
valid := validation.Validation{}
valid.Required(u.Name, &quot;name&quot;)
valid.MaxSize(u.Name, 15, &quot;nameMax&quot;)
valid.Range(u.Age, 0, 18, &quot;age&quot;)</p>
<pre><code>type user struct {
Id     int
Name   string <code>valid:&quot;Required;Match(/^Bee.*/)&quot;</code> // Name 不能为空并且以 Bee 开头
Age    int    <code>valid:&quot;Range(1, 140)&quot;</code> // 1 <= Age <= 140，超出此范围即为不合法
Email  string <code>valid:&quot;Email; MaxSize(100)&quot;</code> // Email 字段需要符合邮箱格式，并且最大长度不能大于 100 个字符
Mobile string <code>valid:&quot;Mobile&quot;</code> // Mobile 必须为正确的手机号
IP     string <code>valid:&quot;IP&quot;</code> // IP 必须为一个正确的 IPv4 地址</code></pre>
<p>}</p>
<h2>定时任务</h2>
<p>tk1 := task.NewTask(&quot;tk1&quot;, &quot;0 12 <em> </em> <em> </em>&quot;, func(ctx context.Context) error { fmt.Println(&quot;tk1&quot;); return nil })</p>
<p>NewTask(tname string, spec string, f TaskFunc) *Task</p>
<p>tname: 任务名称
spec: 定时任务格式，请参考下面的详细介绍
f: 执行的函数</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1801</wp:post_id>
		<wp:post_date><![CDATA[2024-03-04 14:59:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-04 06:59:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-04 21:22:14]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-04 13:22:14]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[beego%e6%a1%86%e6%9e%b6%e5%ae%89%e8%a3%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[DevOps敏捷开发]]></title>
		<link>https://www.liritian.com/archives/devops-ooooops/</link>
		<pubDate>Wed, 06 Mar 2024 04:56:41 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1814</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>敏捷开发</h2>
<p>一个短迭代周期称为一个Sprint、每一个迭代的每个Sprint周期1-4周；</p>
<p>Scrum 采用迭代、增量的方法保持和增强可预见性，并控制风险；
3个特点:
1 透明性：
各个环节，保持高度可见性。影响交付成果的方面对参与交付的所有人、管理生产结果的人保持透明。管理生产结果的人不但需要看到过程的各个方面，而且必须理解他们看到的内容。
2 检验
检验必须足够频繁，确保能够及时发现开发过程中的偏差。还检验工作人员的技能水平和工作积极性
3 适应
检验结果的时候，发现不符合验收标准，而且最终产品是不合格的，需要对过程和材料进行调整。调整工作必须尽快展开，以进一步减少偏差。</p>
<p>实践：</p>
<ul>
<li>每日例会，检验sprint目标的达成情况，作出调整，从而提升次日工作价值。</li>
<li>在sprint计划会议中检验发布目标的达成情况，作出调整，从而提升下一个sprint的工作价值。</li>
<li>sprint回顾会议回顾已完成的sprint，并确定相应的改善措施，让后续的sprint更加高效，更令人满意。</li>
</ul>
<h3>Scrum的框架属性</h3>
<p>3种角色</p>
<ul>
<li>角色
产品负责人:负责最大化产品和开发团队的工作的价值
开发团队
Scrum Master</li>
<li>特点
开发团队是自组织的，没有人告诉开发团队成员如何把产品待办事项列表变成潜在可发布的功能。
开发团队都是跨只能得，团队作为一个整体拥有创造产品增量所需的全部技能。
不认可开发团队成员的头衔，无论承担哪种工作，均是开发者。
成员可以由自己的特长和专注领域，责任归属整个开发团队。
开发团队不包含如测试和业务分析等特定领域的子团队</li>
</ul>
<p>3种工作</p>
<ul>
<li>产品待办事项列表
一个持续完善的清单，随着产品和开发环境的变化而演进，是产品需求变动的唯一来源。</li>
<li>sprint待办事项列表
包含一组被当前sprint选出的产品待办事项列表条目，以及交付产品增量和实现sprint目标的计划。
通俗理解：对需求有了更好的理解而衍生的一些新的任务和开发过程中的bug。
Sprint燃尽图 展示了Sprint中剩余的工作量，它是一个反应工作量完成情况的趋势图。</li>
<li>产品增量
表示一个sprint完成的所有产品代表事项列表条目的总和，以及之前所有的sprint产生的增量的价值总和。</li>
</ul>
<p>事件</p>
<ul>
<li>
<p>sprint
其持续时间为一个月或者更短的时间，前一个结束，下一个sprint会立即开始</p>
</li>
<li>
<p>sprint计划会议
Sprint中要做的工作需要再Sprint计划会议中计划。由整个Scrum团队共同完成。</p>
</li>
<li>
<p>每日scrum站会
每日站会是一个以15分钟为限的时间，同步团队开发活动，并未接下来的24小时制定计划，需要检视自上次每日scrum站会以来完成的工作和预测下次每次scrum站会之前能够完成的工作。
内容：</p>
<ul>
<li>昨天，为了达成sprint目标，做了什么</li>
<li>今天，为了达成sprint目标，准备做什么</li>
<li>是否存在阻碍个人或开发团队达成sprint目标的障碍。
作用：促进开发团队成员的交流和沟通，减少其他会议数量，及时发现开发过程中需要移除的障碍，加快决策进度，以及提高团队成员的认知水平。   </li>
</ul>
</li>
<li>
<p>sprint评审会议
在sprint快结束时举行，用以检视交付的产品增量并按需调整产品待办事项列表。
通俗理解：拉上各方关系人，了解项目目前状况，收集反馈，探讨下一步工作，，结果是形成一个修订后的产品待办事项列表。</p>
</li>
<li>
<p>sprint回顾会议
团队检视自身并制定下一个sprint的改进计划。检视一下执勤啊优劣制定改进团队的工作方式的计划。</p>
</li>
</ul>
<h2>用户故事</h2>
<p>用户故事从用户的角度描述用户渴望得到的功能，它是DevOps价值输出的源头
三要素</p>
<ul>
<li>角色方面，存在场景和功能的区分。根据场景和功能匹配某个用户或某类用户。</li>
<li>活动，表示的是功能，体现在用户操作和对应的产品功能。</li>
<li>价值最终体现为客户得到的价值，最终价值是让产品得到市场的认可
3C原则：
Card：故事写在卡片上，包括简述、工作量估算、规则和完成标准。
Conversation：编写故事的人和客户或产品负责人的交流与沟通，确保理解没有偏差；
Confirmation：最终的验收测试课确认用户故事正确完成。</li>
</ul>
<p>INVEST原则：</p>
<ul>
<li>Idependent独立原则，尽可能保持故事独立。</li>
<li>Negotiate协商原则，内容需要协商，不包括太多细节</li>
<li>Valuable 原则，每个故事必须对用户有价值。</li>
<li>Estimatable 原则，团队需要评估优先级，工作量、工作计划、技术储备、技术实现和开发的工作量，最终估算故事需要的资源和用户故事本身的复杂度。</li>
<li>Small原则，工作量上尽可能的小，不超过10个理想人天，确保能够在一个sprint中完成。</li>
<li>Testable 原则，用户故事是可以测试的，不能测试就不能估算出完成时间和过程风险。</li>
</ul>
<p>用户故事的内容</p>
<ul>
<li>故事标题</li>
<li>故事描述：用户角色+活动内容+实现价值</li>
<li>规则描述：实现规则和名词定义。</li>
<li>验收标准：通过测试用例或业务验证用例</li>
<li>设计方案：包括实现的原型界面和交互规则</li>
<li>检查清单：将上线步骤进行分解。</li>
</ul>
<h2>领域驱动敏捷开发</h2>
<p>领域驱动是一种思维方式，特点是在于解决软件核心的复杂性问题。
敏捷其实是增量交付的过程，将大需求拆成小需求，将小需求进行快速的迭代交付。需要架构设计，业务设计和需求设计相互配合。</p>
<p>敏捷开发：通过敏捷团队内部协作进行能力输出，
领域驱动：通过架构设计降低系统的复杂度
二者松耦合状态
架构设计层面，领域驱动能更好的为敏捷开发赋能。
敏捷开发强调增量交付，领域驱动着眼全局，结合的过程中，需要进行边界的区分。较好的实践是通过同意的领域模型，在增量交付的过程中根据新的需求不断地进行底层框架的优化，并将优化内容更新至领域模型，通过协作，将信息传递至所有组织成员。</p>
<p>FDD 特征驱动开发（Feature Driven Development）是敏捷软件开发的一种，特点是强调特性驱动，快速迭代，保证敏捷开发过程快速，又能保证文档的全面和高质量，时间一般在2周内。
5个活动组成：
开发一个全局模型、建立以个特征列表、依据特征进行规划、一句特征进行设计和依据特征进行重构
3种角色：
领域专家、首席架构师、主程序员。</p>
<p>它的本质是针对增量交付过程提前进行定义和规划。</p>
<p>TDD（Test Driven Development TDD）测试驱动敏捷开发</p>
<ul>
<li>需要对敏捷开发团队成员进行约束，需要做到单元测试的前置，没有经过单元测试的类型，不允许交付持续地指定单元测试，不断地对单元测试哟哦哦那个李进行优化和补充。
是敏捷开发中的一种实践方式和技术，也是一种设计方法论。
测试驱动开发需要在开发功能代码之前，先编写单元测试用例代码，利用单元测试用例确定需要编写什么产品代码。
4个优点：</li>
<li>减轻敏捷开发团队成员的负担</li>
<li>覆盖大范围的单元测试，提供更高质量的产品代码，敏捷开发团队可以轻松的面对需求的变化和进行内部逻辑的优化。</li>
<li>将单元测试前置，有助于理解需求，在开发阶段，对需求的细节进行开发活动验证。</li>
<li>提升反馈速度，从而提升全局的开发效率。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1814</wp:post_id>
		<wp:post_date><![CDATA[2024-03-06 12:56:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-06 04:56:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 17:04:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 09:04:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[devops-ooooops]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="devops"><![CDATA[DevOps]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8f5f5b3fe4f354b971a9bf999d8b9bb4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[DevOps]]></title>
		<link>https://www.liritian.com/archives/devops/</link>
		<pubDate>Wed, 06 Mar 2024 09:14:57 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1825</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>认识DevOps</h2>
<p>DevOps: development 和 operations是一组过程、方法与系统的统称，用于促进软件开发部分、技术运营部门和质量保障部门的相互他沟通协作与整合。
核心价值：如何通过DevOps实现最终的价值交付和输出。
原生能力：通过工具辅助开发人员完成运维人员的部分工作，减少成本。
DevOps的流程是一个全局感念，贯穿需求交付、资源交付、软件交付、产品交付的整个过程，实现最终的价值交付。
流程的种类：
1 流程价值的流转
2 流程价值的跟踪
信息传输流程
需求交付流程
研发交付流程
项目管理流程
3 流程价值的复盘</p>
<p>为什么需要DevOps文化？
对于企业，文化具有统一思想和价值流向的作用。对于IT组织，DevOps文化的作用更为聚焦和纯粹，促使组织成员不断进行知识沉淀和过程管理并将结果反馈至组织，从而提升组织级的效能和质量。</p>
<p>文化特点：
1 具备全局的系统思维
2 关注业务需求是否契合IT组织文化
3 共担责任
4 勇于试错
5 善用数据，通过数据说话</p>
<h2>DevOps 周期表</h2>
<p>点击即可浏览</p>
<p><a href="https://digital.ai/wp-content/uploads/2023/12/digital-ai-periodic-table-of-devsecops_dec23.pdf">https://digital.ai/wp-content/uploads/2023/12/digital-ai-periodic-table-of-devsecops_dec23.pdf</a></p>
<p>源码管理：Git、Subversion、Bitbucket、GitHub、GitLab、Gerrit
数据库自动化：Delphix、Flyway、Redgate、Quest Toad
持续集成：Jenkins、GitLabCI、Travis CI、CircleCI、Gradle、Ant、Maven、Meister
测试自动化：Mocha
配置管理、Chef、RackHD、Salt、Ansible
部署管理：Rancher、Helm、Automic、CodeShip
容器管理：Docker、Docker Compose、Kubernetes、OpenVZ、Nomad、Tectonic
发布编排：Clarive、OpenMake、Spinnaker
云管理平台：AWS、Azure、Alibaba Cloud、GCP、Huawei Cloud、Tencent Cloud
智能运维管理：ELK、Zabbix、Rollbar、Fluentd
监控管理：Zabbix、YouTrack、Prometheus
安全管理：CyberArk、Snort、Burp Proxy、Charles
内部协作：Cisco Spark、Polarion、Morpheus</p>
<h2>持续集成和测试</h2>
<p>传统的DevOps中，3C是指Continuous Integration（持续集成）、Continuous Deployment（持续部署）、Continuous Delivery(持续交付)</p>
<p>后来逐渐演变为： Continuous Integration（持续集成）、Continuous Delivery(持续交付)，Continuous Operations(持续运营)</p>
<ul>
<li>持续集成：持续进行编译、测试、检查和形成制品的过程。源码仓库发生改变时，需要持续触发构建动作。
优点：
更早的发现缺陷，从而处理缺陷，提升效率和质量
及时的对持续集成过程中的数据进行采集和分析，最终形成反馈机制，推动交付团队进行优化。
通过代码的持续增量提交合并，以及持续集成的工具赋能，实现自动化代码的编译、自动化单元测试和自动化的集成测试，并更具数据反馈判断代码质量趋势和项目风险，同时可以判断增量代码的合理性，负责代码的成员可以及时收到反馈结果。</li>
</ul>
<h2>持续部署和持续交付</h2>
<p>持续部署（CD）经过代码构建、单元测试和集成测试后，形成产品化的程序制品、持续交付通过自动化技术手段将具备准出条件的程序制品发布至生产环境。</p>
<p>持续部署和持续集成、持续交付的区别</p>
<ul>
<li>流程上：
持续交付阶段，将程序制品上传制品库，形成产品级制品，交由运维团队进行生产环境部署活动。
持续部署阶段，将产品级制品，从制品库发布至生产环境。
持续集成：进行代码增量交付质量可靠的代码。</li>
<li>本质区别：
<ul>
<li>持续集成：解决软件开发过程中开发能力水平伸缩的问题。</li>
<li>持续部署：对代码交付物进行全面检查，形成产品级制品。对质量复盘，形成代码质量的终态闭环。</li>
<li>持续交付：用来优化项目交付和内部管理的过程，通过产品的反馈对项目评价。</li>
</ul></li>
</ul>
<h2>发布策略</h2>
<ul>
<li>
<p>单批次发布
也称粗暴发布，传统的发布方式；
优点：部署流程和发布过程简单，成本低。
缺点：导致业务中断、较差的用户体验。
场景：适用于非生产环境或非关键业务。</p>
</li>
<li>
<p>金丝雀发布
也称灰度发布，先发布一部分服务器，进行验证，合适就慢慢进行流量切分。
优点：对业务连续性和用户体验的影响较小。
缺点：对于持续部署的要求较高。
场景：超大规模的系统发布；</p>
</li>
<li>
<p>波浪发布</p>
<ul>
<li>也称为滚动发布，在金丝雀的基础上优化和改进，通过流量切分的方式进行班的流量转移。通过初始化发布服务器比例方式进行循环发布，直至所有新版本发布结束。</li>
<li>优点：发布过程中尽可能不影响用户体验，同事保持较高的业务连续性
缺点：发布速度较慢，需要较强的持续部署能力和较为完善的部署支撑工具。</li>
<li>场景：系统的扩缩容；业务连续性极高的系统，以及用户体验不能中断的场景。</li>
</ul>
</li>
<li>
<p>蓝绿发布
需要具备两套相同的系统，面向用户提供服务的叫绿色，面向DevOps价值交付个能力子域且即将准备发布，称为蓝色系统。两套系统区别在于系统版本和对外服务情况。
优点：发布和回滚快速，
缺点：蓝色系统不对外提供服务，造成资源浪费。蓝绿角色衔接问题，导致业务短暂中断。
场景：适合弹性伸缩的容器云场景，能够容忍短暂的业务中断和不佳的用户体验</p>
</li>
<li>
<p>红黑发布</p>
<ul>
<li>Netflix 公司采用的发布手段，利用AWS的特性。先创建新服务器，测试不通过，修正后，销毁新生成的服务器集群，通过，就指向新的集群，并销毁旧集群。
优点：业务系统服务始终在线，同时采用不可逆的方式进行发布。红黑发布和蓝绿发布的却在于，不需要保持冗余的在线服务。</li>
</ul>
</li>
<li>
<p>特性开关发布</p>
<ul>
<li>针对关键功能或者特定场景，有功能开关、A/B测试开关，运维开关和权限开关。
<ul>
<li>功能开关，功能版本和功能部署进行分离，利用代码中的功能逻辑控制对外服务的启用和关闭。
优点：实现面向业务和面向客户的解耦，新版本的升级切换和回滚的效率极高；
缺点：切换针对全量，如果新版有缺陷，容易对业务连续性和用户体验造成影响。对代码存在全能乳问题，代码逻辑变复杂不利于维护。</li>
<li>A/B测试开关：又叫实验开关，同一时间内提供多个版本对用户进行服务；利用负载均衡并通过流量路由进行流量的智能分发</li>
<li>运维开关：通过运维的角度对系统进行控制；场景：金融西戎的促投放限制，电商商品的抢购场景中的sku控制。</li>
<li>权限开关：对于某些功能的限制，仅向付费用户开放的一些功能。</li>
</ul></li>
</ul>
</li>
</ul>
<h2>微服务部署</h2>
<p>微服务架构（Microservice Architecture）是一种全新的架构，通过将功能分散到各个离散的服务中，实现对解决方案的解耦，从而降低系统的耦合度；就是把一个大型的应用程序或服务进行拆分，形成多个微服务程序，可扩展单个组件而不是整个应用程序堆栈，从满足服务等级协议要求。</p>
<ul>
<li>传统开发模式：单体式开发方式。
优点：开发模式简单便于对代码进行集中式管理。
缺点：所有人都在一个项目里，容易效率低下；所有代码功能耦合，代码维护困难；任何修改都全局代码构建，构建不灵活；牵一发动全身，无法满足高并发场景的业务需求。</li>
<li>微服务开发模式：通过分布式服务进行系统的业务功能整合；每个系统功能实现一个服务，模块之间极少存在框架的依赖。
优点：内部分工明确，快速进行增量交付；模块之间解耦，保证业务的连续性；根据访问量动态地调整服务的数量。根据模块的不同使用场景，选择不同的语言和框架；
缺点：拆分的过小，运维困难，网络链路见交互过多，服务的通信成本增加；随着服务的弹性伸缩，对代码的管理难度增加，对开发员要求高，成本会增加；</li>
</ul>
<p>与DevOps的关系
微服务架构可以更快的提升敏捷能力
微服务架构可以进行弹性的持续交付
微服务架构可以缩短测试周期，提升测试质量</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1825</wp:post_id>
		<wp:post_date><![CDATA[2024-03-06 17:14:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-06 09:14:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-07 08:58:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-07 00:58:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[devops]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="devops"><![CDATA[DevOps]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[DevOps-运维管理工具-Zabbix]]></title>
		<link>https://www.liritian.com/archives/devops-%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7-zabbix/</link>
		<pubDate>Thu, 07 Mar 2024 01:42:21 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1831</guid>
		<description></description>
		<content:encoded><![CDATA[<p>最受欢迎的3种自动化运维工具
Zabbix 使用占比 48.42%
Elstaticsearch 41.03%
Grafana 39.35%</p>
<h2>Zabbix 简介</h2>
<p>Zabbix 是一个企业级分布式开源监控系统，能够针对基础设施，如网络设备、服务器设备和操作系统进行健康度与完整性方面的监控，具备使用灵活的告警机制。基于采集后存储的数据提供出色的报表和数据可视化功能。</p>
<p>数据采集方面，支持主动轮询和被动捕获两种方式，所有报表、统计数据和配置参数都可以通过基于Web可视化的前端页面进行访问。</p>
<h3>能力和特性</h3>
<ul>
<li>数据采集方面：支持SNMP、IPMI、JMX和Agent等监控方式，具备自定义检测和间隔收集数据能力，还可以通过zabbix server、zabbix proxy 和zabbix agenet 进行分布式部署，分担数据采集的压力。</li>
<li>阈值方面：对故障阈值进行自定义设置。</li>
<li>告警方面：通过配置将告警内容进行抛送。</li>
<li>绘图方面：通过绘图引擎进行监控数据的实时绘图和聚合展示</li>
<li>配置方面：通过模板和单独添加的方式进行配置，配置项以继承的方式进行配置传递，它还可以对监控对象进行分组和分类。</li>
<li>设备发现方面：通过agent的自动注册和自动发现机制，能够简便的释放纳管压力。</li>
<li>API方面：提供了完善的API和程序级的访问接口，提供第三方接口快速接入和访问。</li>
</ul>
<h3>Zabbix的组件和工作流程</h3>
<ul>
<li>zabbix server， 核心组件，用来获取zabbix agent状态和接受监控数据，所有配置，数据和统计结果都通过zabbix server 存在zabbix database中。
<ul>
<li>通过主动或者被动方式进行数据采集，判断是否达到阈值，从而使用触发器报警并通知给用户。</li>
</ul></li>
<li>zabbix database 是zabbix的数据库，用于存放除zabbix server配置意外的所有数据。</li>
<li>zabbix Web GUI 是zabbix的web 接口。</li>
<li>zabbix agent 是zabbix的客户端，用于对目标进行资源和应用的监控，如磁盘，CPU，内存和网卡，同时将收集的数据报送至 zabbix server
<ul>
<li>流程上，agent收集监控工目标的的信息，上报至server处理，发现异常，server回主动触发响应并进行报警动作。agent提供主动和被动两种检查模式。在被动模式中，agent主动应答数据请求，server 或者proxy 主动发起数据请求，agent处理后会送结果；主动模式中，zabbix agent需要定时主动请求server 以索取监控项列表，然后将对应的值上传至zabbix server</li>
</ul></li>
<li>zabbix proxy 是zabbix server的功能扩展，能够代替zabbix server 进行监控数据汇集，主要用于分布式采集和性能的负载，一般称为代理。proxy 代替server，收集监控数据并上报，收集的数据会先行落地以进行中专，在架构中，proxy是可选的，海量监控项时，proxy可以有效降低分布式环境中单一server的负载，以及server的处理和读写波峰。</li>
</ul>
<h2>安装Zabbix</h2>
<p>安装系统Mac，前提安装MySQL、apache、PHP
1.安装Mysql
wget <a href="https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.23-macos10.13-x86_64.tar.gz">https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.23-macos10.13-x86_64.tar.gz</a>
解压：tar -zxvf mysql-5.7.23-macos10.13-x86_64.tar.gz
mv mysql-5.7.23-macos10.13-x86_64 /usr/local/mysql</p>
<p>cd /usr/local/mysql
执行初始化命令并记录生成的临时 root 密码
sudo bin/mysqld --initialize --user=mysql
注意查看临时密码：
A temporary password is generated for root@localhost: moJwy8UeyQ&amp;2
启动mysql
support-files/mysql.server start</p>
<pre><code>Starting MySQL
 SUCCESS!</code></pre>
<p>在mysql/bin/下执行  ./mysqladmin -u root -p password
然后输入上述密码，会让你更新密码</p>
<p>tips:如果有问题，请尝试 chown _mysql:mysql /usr/local/mysql</p>
<p>2.安装apache
sudo apachectl -v 查看是否已经有了
Server version: Apache/2.4.51 (Unix)
Server built:   Feb 12 2022 02:40:22</p>
<p>3.安装php
php -v
PHP 7.4.33 (cli) (built: Feb 26 2024 08:55:40) ( NTS )
Copyright (c) The PHP Group
Zend Engine v3.4.0, Copyright (c) Zend Technologies
with Zend OPcache v7.4.33, Copyright (c), by Zend Technologies</p>
<p>4.安装zabbix
wget <a href="https://cdn.zabbix.com/zabbix/sources/stable/6.4/zabbix-6.4.12.tar.gz">https://cdn.zabbix.com/zabbix/sources/stable/6.4/zabbix-6.4.12.tar.gz</a>
解压压缩包
tar -zxvf zabbix-6.4.12.tar.gz
cd zabbix-6.4.12</p>
<p>编译：
./configure --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1831</wp:post_id>
		<wp:post_date><![CDATA[2024-03-07 09:42:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-07 01:42:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-08 15:28:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-08 07:28:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[devops-%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7-zabbix]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="post_format" nicename="post-format-gallery"><![CDATA[相册]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[DevOps-运维管理工具-Ansible]]></title>
		<link>https://www.liritian.com/archives/devops-%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7-ansible/</link>
		<pubDate>Fri, 08 Mar 2024 07:27:30 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1836</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Ansible 简介</h2>
<p>Ansible 基于python2-paramiko模块开发，具备众多运维工具的优点，可以实现系统的批量配置、程序批量部署和批量运行命令。Ansilbe 基于模块实现自动化输出能力，本质上是一个框架，本身没有批量部署能力，真正具有批量部署能力的是Ansilbe中所运行的模块。</p>
<ul>
<li>能力
<ul>
<li>模块管理</li>
<li>负责内部插件之间的通信和监控</li>
<li>负责管理资源清单</li>
<li>负责内部模块额管理；</li>
<li>具备多任务模式、并可以进行参数优化配置（核心功能）</li>
</ul></li>
<li>特性
<ul>
<li>无客户端模式，不需要再被管理主机上安装客户端软件。</li>
<li>无server端概念，通过命令方式打通管道；</li>
<li>通过模块实现多语言支持能力；</li>
<li>使用YAML语言定制playbook；</li>
<li>可以实现多级指挥</li>
<li>轻量级和易用性。</li>
</ul></li>
</ul>
<h2>Ansible的playbook</h2>
<p>Ansible 有两种使用方式：playbook和AdHoc。</p>
<p>playbook 是一个配置管理系统，依托ansible 的框架实现批量机器的交互，它具有一些有点和特性。可以对执行过程进行编排，有序执行，对象分类和编组，有同步和异步的方式发起。</p>
<p>AdHoc，用/usr/bin/ansible 程序执行任务，使用playbook主要是将执行计划通过源码进行控制，进行配置的规范审核，同时进行配置的推送。</p>
<p>playbook的语言格式是YAML，避免让playbook 变成一种编程语言或者脚本。
由一个或者多个play构成，每个play中，角色通过映射的方式来定义，如有一组机器被映射成已知定义的角色。play中的内容称为task，，每一次task就是对ansible模块的一次调用。</p>
<p>主机和用户
play中基本都包含主机（hosts）和用户（remote_user）。</p>
<p>task列表
每一个play都包含一个任务列表，也就是task列表，每个task在其所对应的主机或主机组上执行完毕之后，才会触发执行下一个task。
运行playbook时，执行顺序是从上到下的，如有一个host执行task失败，那这个host会被从playbook的rotation列中移除，同时需要对playbook进行修正，修正后重新执行，而不是继续执行。task的目的是执行一个module，module具有幂等特性，重复执行，只会执行必要的变动。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1836</wp:post_id>
		<wp:post_date><![CDATA[2024-03-08 15:27:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-08 07:27:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-08 15:27:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-08 07:27:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[devops-%e8%bf%90%e7%bb%b4%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7-ansible]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="devops"><![CDATA[DevOps]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Golang框架-go-zero初识篇]]></title>
		<link>https://www.liritian.com/archives/golang%e6%a1%86%e6%9e%b6-go-zero%e5%88%9d%e8%af%86%e7%af%87/</link>
		<pubDate>Sat, 16 Mar 2024 13:49:41 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1874</guid>
		<description></description>
		<content:encoded><![CDATA[<p>在当今云原生技术的浪潮中，微服务架构作为一种灵活、可扩展的架构模式，受到了越来越多企业的青睐。而在构建微服务时，选择一个高效、易用的框架至关重要。在我最近的探索中，我发现了一个令人印象深刻的工具：Go-Zero。</p>
<ul>
<li>Go-Zero 是什么？
Go-Zero 是一个用于构建高性能微服务的 Go 语言框架。它提供了一整套工具和组件，包括 RPC 框架、服务注册与发现、配置管理、日志记录等，旨在简化微服务的开发过程，并提供可靠的解决方案。</li>
</ul>
<p>由国内的Tal tech团队开源，为国人点赞。</p>
<ul>
<li>
<p>为什么选择 Go-Zero？</p>
<ul>
<li>
<p>高性能：Go-Zero 基于 Go 语言开发，具有出色的性能和并发能力，适用于处理高并发的场景。</p>
</li>
<li>
<p>简单易用：Go-Zero 提供了清晰简洁的 API 设计，易于上手和使用。它遵循了 Go 语言的设计哲学，使得开发者能够快速构建微服务应用。</p>
</li>
<li>
<p>完整解决方案：Go-Zero 提供了一套完整的微服务开发解决方案，包括服务端和客户端的各种功能，如服务注册与发现、负载均衡、熔断器等，让开发者可以专注于业务逻辑的实</p>
</li>
</ul>
<pre><code>官网文档原话：
轻松获得支撑千万日活服务的稳定性
内建级联超时控制、限流、自适应熔断、自适应降载等微服务治理能力，无需配置和额外代码
微服务治理中间件可无缝集成到其它现有框架使用
极简的 API 描述，一键生成各端代码
自动校验客户端请求参数合法性
大量微服务治理和并发工具包</code></pre>
</li>
</ul>
<h2>goctl</h2>
<p>go control
goctl 是 go-zero 的内置脚手架，是提升开发效率的一大利器，可以一键生成代码、文档、部署 k8s yaml、dockerfile 等。
安装：
go install github.com/zeromicro/go-zero/tools/goctl@latest</p>
<p>执行goctl -version 看是否成功安装</p>
<h2>Api</h2>
<p>api 是 go-zero 自研的领域特性语言,不是指平常的那些接口</p>
<pre><code>文件名 demo/api/user.api

syntax = &quot;v1&quot;

info (
    title:   &quot;api demo&quot;
    desc:    &quot;演示如何编写 api 文件&quot;
    author:  &quot;Jack lee&quot;
    date:    &quot;2024 年 03 月 17 日&quot;
    version: &quot;v1&quot;
)

type UpdateReq {
    Arg1 string `json:&quot;arg1&quot;`
}

type ListItem {
    Value1 string `json:&quot;value1&quot;`
}

type LoginReq {
    Username string `json:&quot;username&quot;`
    Password string `json:&quot;password&quot;`
}

type LoginResp {
    Name string `json:&quot;name&quot;`
}

type FormExampleReq {
    Name string `form:&quot;name&quot;`
}

type PathExampleReq {
    // path 标签修饰的 id 必须与请求路由中的片段对应，如
    // id 在 service 语法块的请求路径上一定会有 :id 对应，见下文。
    ID string `path:&quot;id&quot;`
}

type PathExampleResp {
    Name string `json:&quot;name&quot;`
}

@server (
    jwt:        Auth // 对当前 Foo 语法块下的所有路由，开启 jwt 认证，
    prefix:     /v1 // 对当前 Foo 语法块下的所有路由，新增 /v1 路由前缀，
    group:      g1 // 对当前 Foo 语法块下的所有路由，路由归并到 g1 目录下，
    timeout:    3s // 对当前 Foo 语法块下的所有路由进行超时配置
    middleware: AuthInterceptor // 对当前 Foo 语法块下的所有路由添加中间件
    maxBytes:   1048576 // 对当前 Foo 语法块下的所有路由添加请求体大小控制，单位为 byte,goctl 版本 &gt;= 1.5.0 才支持
)
service Foo {
    // 定义没有请求体和响应体的接口，如 ping
    @handler ping
    get /ping

    // 定义只有请求体的接口，如更新信息
    @handler update
    post /update (UpdateReq)

    // 定义只有响应体的结构，如获取全部信息列表
    @handler list
    get /list returns ([]ListItem)

    // 定义有结构体和响应体的接口，如登录
    @handler login
    post /login (LoginReq) returns (LoginResp)

    // 定义表单请求
    @handler formExample
    post /form/example (FormExampleReq)

    // 定义 path 参数
    @handler pathExample
    get /path/example/:id (PathExampleReq) returns (PathExampleResp)
}</code></pre>
<p>在api目录里执行一下</p>
<pre><code>goctl api go -api user.api -dir .

第一个api指的是根据api类型的生成代码，
go指 生成go的代码(支持dart、ts、kt(kotlin))
-api 指用哪个api 
-dir . 生成的代码放到当前目录下</code></pre>
<pre><code>生成后的代码结构
.
└── api
    ├── etc
    │   └── foo.yaml
    ├── foo.go
    ├── internal
    │   ├── config
    │   │   └── config.go
    │   ├── handler
    │   │   ├── g1
    │   │   │   ├── formexamplehandler.go
    │   │   │   ├── listhandler.go
    │   │   │   ├── loginhandler.go
    │   │   │   ├── pathexamplehandler.go
    │   │   │   ├── pinghandler.go
    │   │   │   └── updatehandler.go
    │   │   └── routes.go
    │   ├── logic
    │   │   └── g1
    │   │       ├── formexamplelogic.go
    │   │       ├── listlogic.go
    │   │       ├── loginlogic.go
    │   │       ├── pathexamplelogic.go
    │   │       ├── pinglogic.go
    │   │       └── updatelogic.go
    │   ├── middleware
    │   │   └── authinterceptormiddleware.go
    │   ├── svc
    │   │   └── servicecontext.go
    │   └── types
    │       └── types.go
    └── user.api</code></pre>
<h2>proto 语法</h2>
<p>Protocol buffers 是 Google 的语言中立、平台中立、可扩展的结构化数据序列化机制——像 XML，但更小、更快、更简单。您定义了一次数据的结构化方式，然后您可以使用特殊生成的源代码轻松地将结构化数据写入各种数据流并使用各种语言从中读取结构化数据（说人话就是，用pb语法写的代码，可以生成不同的语言的版本）</p>
<p>来写个简单的</p>
<pre><code>文件名：user/rpc/user.proto

syntax = &quot;proto3&quot;;

package user;

option go_package = &quot;./user&quot;;

message IdRequest{
  string id = 1;
}

message UserResponse{
  string id = 1;
  string name = 2;
  bool gender = 3;
}

service User{
  rpc getUser(IdRequest) returns(UserResponse);
}

执行命令：
goctl rpc protoc user/rpc/user.proto --go_out=user/rpc/types --go-grpc_out=user/rpc/types --zrpc_out=user/rpc

生成的代码结构

└── rpc
    ├── etc
    │   └── user.yaml
    ├── internal
    │   ├── config
    │   │   └── config.go
    │   ├── logic
    │   │   └── getuserlogic.go
    │   ├── server
    │   │   └── userserver.go
    │   └── svc
    │       └── servicecontext.go
    ├── types
    │   └── user
    │       ├── user.pb.go
    │       └── user_grpc.pb.go
    ├── user.go
    ├── user.proto
    └── userclient
        └── user.go</code></pre>
<p>接着在
user/rpc/user.yaml补充etcd的内容</p>
<p>Name: user.rpc
ListenOn: 127.0.0.1:8080
Etcd:
Hosts:</p>
<ul>
<li>127.0.0.1:2379
Key: user.rpc</li>
</ul>
<h2>etcd 下载</h2>
<p>下载压缩包，最新版本
wget <a href="https://github.com/etcd-io/etcd/releases/download/v3.5.12/etcd-v3.5.12-darwin-amd64.zip">https://github.com/etcd-io/etcd/releases/download/v3.5.12/etcd-v3.5.12-darwin-amd64.zip</a></p>
<p>解压etcd
unzip etcd-v3.5.12-darwin-amd64.zip</p>
<p>进入etcd 文件夹
cd etcd-v3.5.12-darwin-amd64
执行命令：
./etcd -version
启动etcd
./etcd &amp;</p>
<pre><code>简单的etcd命令
使用命令
./etcdctl put user.rpc 127.0.0.1:2379（只用这个就行）
./etcdctl delete user.rpc  删除
</code></pre>
<h2>配置微服务</h2>
<p>在/user/rpc/internal/logic/getuserlogic.go 中的GetUser方法中
添加</p>
<pre><code>    return &amp;user.UserResponse{
        Id:     &quot;1&quot;,
        Name:   &quot;Jack&quot;,
        Gender: true,
    }, nil</code></pre>
<p>1 在user/rpc 中执行， go run user.go 启动user的服务</p>
<p>2 在apipost中，新建-&gt;新建grpc-&gt;导入proto-&gt;本地导入，把user.proto文件上传。</p>
<p>然后输入服务器地址：127.0.0.1:8080，点击调用
就能看到返回了</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5431710691986_.pic_.png" alt="" /></p>
<ul>
<li>接着配置 video的服务，在这里调用user的服务</li>
</ul>
<p>新建一个文件video/api/video.api</p>
<pre><code>syntax = &quot;v1&quot;

info (
    author: &quot;jack&quot;
    date:   &quot;2023年3月17日&quot;
    desc:   &quot;first video in go-zero&quot;
)

type (
    VideoReq {
        Id string `path:&quot;id&quot;`
    }
    VideoRes {
        Id   string `json:&quot;id&quot;`
        Name int64  `json:&quot;name&quot;`
    }
)

service video {
    @handler getVideo
    get /api/videos/:id (VideoReq) returns (VideoReq)
}
</code></pre>
<p>执行命令</p>
<pre><code>cd video/api/

goctl api go -api video.api -dir .(注意有个点，代表当前目录)</code></pre>
<p>修改配置
在video/api/etc/video.yml中增加刚才的user的配置</p>
<pre><code>UserRpc:
  Etcd:
    hosts:
      - 127.0.0.1:2379
    Key: user.rpc</code></pre>
<p>1 在 video/api/internal/servicecontext.go中</p>
<pre><code>type ServiceContext struct {
    Config  config.Config
    UserRpc userclient.User # 增加user服务的信息
}

func NewServiceContext(c config.Config) *ServiceContext {
    return &amp;ServiceContext{
        Config:  c,
        UserRpc: userclient.NewUser(zrpc.MustNewClient(c.UserRpc)),# 增加user服务的信息
    }
}</code></pre>
<p>在video/api/internal/handler/getvideohandler.go的getvideo中
增加代码</p>
<pre><code>func (l *GetVideoLogic) GetVideo(req *types.VideoReq) (resp *types.VideoRes, err error) {
    // todo: add your logic here and delete this line

    user1, err := l.svcCtx.UserRpc.GetUser(l.ctx, &amp;user.IdRequest{
        Id: &quot;1&quot;,
    })

    if err != nil {
        return nil, err
    }

    return &amp;types.VideoRes{Id: req.Id, Name: user1.Name}, nil
}</code></pre>
<p>然后再video/api中执行  go run video.go 启动video 服务端口号 8888</p>
<p>这样在浏览器里访问刚才生成的路由
127.0.0.1:8888/api/videos/1
返回代码
{
&quot;id&quot;: &quot;1&quot;,
&quot;name&quot;: &quot;Jack&quot;
}</p>
<p>至此通过请求video的id，获取video的user结束。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1874</wp:post_id>
		<wp:post_date><![CDATA[2024-03-16 21:49:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-16 13:49:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-18 00:23:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-17 16:23:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[golang%e6%a1%86%e6%9e%b6-go-zero%e5%88%9d%e8%af%86%e7%af%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Golang 微服务框架go-zero]]></title>
		<link>https://www.liritian.com/archives/golang-%e5%be%ae%e6%9c%8d%e5%8a%a1%e6%a1%86%e6%9e%b6go-zero/</link>
		<pubDate>Tue, 19 Mar 2024 08:38:15 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1883</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>api文档 swagger</h2>
<ol>
<li>安装swagger
go install github.com/zeromicro/goctl-swagger@latest</li>
<li>执行生成user.json文件
goctl api plugin -plugin goctl-swagger=&quot;swagger -filename user.json -host 127.0.0.1:8080&quot; -api user.api -dir ./doc
其中user.api中的文件见上一篇blog
这里就是把user.json 放到当前目录下的doc文件夹中，注意这里的-host 就是swagger请求的路径
3.启动docker
docker run --rm -p 8087:8080 -e SWAGGER_JSON=/foo/user.json -v $PWD:/foo swaggerapi/swagger-ui
启动之后在浏览器访问
127.0.0.1:8083 就能看到swagger界面</li>
</ol>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5441710836443_.pic_.png" alt="" /></p>
<p>在这里面接口/api/users/info请求的地址 就是上面host的地址</p>
<h2>go-zero 使用mysql</h2>
<ul>
<li>
<p>创建一个表
model/user.sql</p>
<pre><code class="language-sql">CREATE TABLE `user` (
                    `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
                    `username` varchar(36) DEFAULT NULL,
                    `password` varchar(64) DEFAULT NULL,
                    PRIMARY KEY (`id`),
                    KEY `user_index` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></pre>
</li>
<li>
<p>生成model
goctl model mysql ddl --src user.sql --dir .
结果如下</p>
<p>├── user.sql
├── usermodel.go
├── usermodel_gen.go
└── vars.go</p>
</li>
<li>
<p>api文件</p>
</li>
</ul>
<pre><code class="language-golang">type LoginRequest {
    Username string `json:&quot;username&quot;`
    Password string `json:&quot;password&quot;`
}

@server (
    prefix: /api/users
)
service users {
    @handler login
    post /login returns (string)
}</code></pre>
<p>执行goctl api go -api user.api -dir . 后结果如下</p>
<p>├── etc
│   └── users.yaml
├── internal
│   ├── config
│   │   └── config.go
│   ├── handler
│   │   ├── loginhandler.go
│   │   └── routes.go
│   ├── logic
│   │   └── loginlogic.go
│   ├── svc
│   │   └── servicecontext.go
│   └── types
│       └── types.go
├── user.api
└── users.go</p>
<ul>
<li>配置
1 在etc/user.yaml 里增加 mysql的配置
Mysql:
DataSource: root:root@tcp(127.0.0.1:3306)/zero_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local
2 在internal/config/config.go 中
<pre><code class="language-go">type Config struct {
    rest.RestConf
    //增加以下内容
    Mysql struct {
        DataSource string
    }
}</code></pre>
<p>3 在internal/svc/servicecontext.go中</p></li>
</ul>
<pre><code class="language-go">type ServiceContext struct {
    Config    config.Config
    UserModel model.UserModel
    Mysql     struct {
        DataSource string
    }
}

func NewServiceContext(c config.Config) *ServiceContext {
    mysqlConn := sqlx.NewMysql(c.Mysql.DataSource)
    return &amp;ServiceContext{
        Config:    c,
        UserModel: model.NewUserModel(mysqlConn),
    }
}
</code></pre>
<p>就可以使用 </p>
<pre><code>type (
    userModel interface {
        Insert(ctx context.Context, data *User) (sql.Result, error)
        FindOne(ctx context.Context, id int64) (*User, error)
        FindOneByUserName(ctx context.Context, username string) (*User, error)
        Update(ctx context.Context, data *User) error
        Delete(ctx context.Context, id int64) error
    }</code></pre>
<p>定义的方法了</p>
<p>例如在loginlogic中</p>
<pre><code>func (l *LoginLogic) Login() (user *model.User, err error) {
    id := int64(1)
    res, err := l.svcCtx.UserModel.FindOne(l.ctx, id)
    if err != nil {
        return res, err
    }
    fmt.Println(res)
    return res, nil
}</code></pre>
<h2>go-zero 使用gorm</h2>
<p>1 安装gorm
go get -u gorm.io/gorm
go get gorm.io/driver/mysql</p>
<p>2 配置yaml文件
Mysql:
DataSource: root:root@tcp(127.0.0.1:3306)/zero_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local</p>
<p>3 在servicecontext.go中 调整代码如下</p>
<pre><code class="language-golang">type ServiceContext struct {
    Config config.Config
    //增加DB字段
    DB     *gorm.DB
}

func NewServiceContext(c config.Config) *ServiceContext {
    mysqlDb := InitGorm(c.Mysql.DataSource)
    return &amp;ServiceContext{
        Config: c,
        DB:     mysqlDb,
    }
}

func InitGorm(MysqlDataSource string) *gorm.DB {
    db, err := gorm.Open(mysql.Open(MysqlDataSource), &amp;gorm.Config{})
    if err != nil {
        panic(&quot;连接mysql数据库失败, error=&quot; + err.Error())
    } else {
        fmt.Println(&quot;连接mysql数据库成功&quot;)
    }
    return db
}</code></pre>
<p>4 在loginlogic中可以使用了</p>
<pre><code>func (l *LoginLogic) Login(req *types.Request) (resp *sql.NullString, err error) {

    var user model.User
    //gorm语法
    err = l.svcCtx.DB.Take(&amp;user, &quot;username = ?&quot;, req.Name).Error

    if err != nil {
        return nil, err
    }

    return &amp;user.Username, nil
}</code></pre>
<h2>RPC服务分组</h2>
<p>就是把多个服务的代码分开不同的文件夹来存放</p>
<pre><code>syntax = &quot;proto3&quot;;
package user;
option go_package = &quot;./user&quot;;

message UserInfoRequest{
  uint32  user_id = 1;//序列号的位置
}

message UserInfoResponse{
  uint32  user_id = 1;
  string username = 2;
}

message UserCreateRequest{
  string username = 1;
  string password = 2;
}

message UserCreateResponse{
  string err = 1;
}

service UserInfo{
  rpc UserInfo(UserInfoRequest) returns (UserInfoResponse);

}

service UserCreate{
  rpc UserCreate(UserCreateRequest) returns (UserCreateResponse);
}
</code></pre>
<p>执行命令：
goctl rpc protoc user.proto --go_out=./types --go-grpc_out=./types --zrpc_out=. --style goZero -m</p>
<p>这里是执行rpc的文件，输出文件夹为types, rpc的生成的文件为当前目录
--style 是文件夹命名风格，goZero 代表小驼峰样式。
-m 代表多个服务</p>
<p>生成的文件夹目录</p>
<pre><code>.
├── client
│   ├── usercreate
│   │   └── userCreate.go
│   └── userinfo
│       └── userInfo.go
├── etc
│   └── user.yaml
├── internal
│   ├── config
│   │   └── config.go
│   ├── logic
│   │   ├── usercreate
│   │   │   └── userCreateLogic.go
│   │   └── userinfo
│   │       └── userInfoLogic.go
│   ├── server
│   │   ├── usercreate
│   │   │   └── userCreateServer.go
│   │   └── userinfo
│   │       └── userInfoServer.go
│   └── svc
│       └── serviceContext.go
├── types
│   └── user
│       ├── user.pb.go
│       └── user_grpc.pb.go
├── user.go
└── user.proto

可以看到userCreate 和userInfo 分成两个文件夹</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1883</wp:post_id>
		<wp:post_date><![CDATA[2024-03-19 16:38:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-19 08:38:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-22 11:36:30]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-22 03:36:30]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[golang-%e5%be%ae%e6%9c%8d%e5%8a%a1%e6%a1%86%e6%9e%b6go-zero]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="go"><![CDATA[Go]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[英语口语连读、浊化、爆破]]></title>
		<link>https://www.liritian.com/archives/%e8%8b%b1%e8%af%ad%e5%8f%a3%e8%af%ad%e8%bf%9e%e8%af%bb%e3%80%81%e7%88%86%e7%a0%b4/</link>
		<pubDate>Wed, 20 Mar 2024 07:07:15 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1889</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>单音节单词</h3>
<p>定义：单词里面只有一个元音的叫单音节单词；
单音节单词 先升后降调</p>
<h3>多音节单词</h3>
<p>定义：单词里面有多个元音的叫多音节单词</p>
<h3>音标表</h3>
<ul>
<li>单元音</li>
</ul>
<table>
<thead>
<tr>
<th>类别</th>
<th>前元音</th>
<th>前元音</th>
<th>前元音</th>
<th>中元音</th>
<th>中元音</th>
<th>后元音</th>
<th>后元音</th>
<th>后元音</th>
</tr>
</thead>
<tbody>
<tr>
<td>长元音</td>
<td>/i/</td>
<td></td>
<td></td>
<td>/ʌ/</td>
<td>/ɝ/</td>
<td>/ɑ/</td>
<td></td>
<td>/u/</td>
</tr>
<tr>
<td>短元音</td>
<td>/ɪ/</td>
<td>/ɛ/</td>
<td>/æ/</td>
<td>/ə/</td>
<td>/ɚ/</td>
<td></td>
<td>/ɔ/</td>
<td>/ʊ/</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>双元音
<img src="https://www.liritian.com/wp-content/uploads/2024/03/5461710918358_.pic_.png" alt="" /></p>
</li>
<li>
<p>辅音</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>类别</th>
<th>辅音</th>
<th>辅音</th>
<th>辅音</th>
<th>辅音</th>
<th>辅音</th>
<th>辅音</th>
<th>辅音</th>
<th>辅音</th>
<th style="text-align: left;"></th>
<th style="text-align: left;"></th>
</tr>
</thead>
<tbody>
<tr>
<td>清辅音</td>
<td>/p/</td>
<td>/t/</td>
<td>/k/</td>
<td>/f/</td>
<td>/s/</td>
<td>/θ/</td>
<td>/ʃ/</td>
<td>/tʃ/</td>
<td style="text-align: left;">/tr/</td>
<td style="text-align: left;">/ts/</td>
</tr>
<tr>
<td>浊辅音</td>
<td>/b/</td>
<td>/d/</td>
<td>/g/</td>
<td>/v/</td>
<td>/z/</td>
<td>/ð/</td>
<td>/ʒ/</td>
<td>/dʒ/</td>
<td style="text-align: left;">/dr/</td>
<td style="text-align: left;">/dz/</td>
</tr>
<tr>
<td>其他辅音</td>
<td>/m/</td>
<td>/n/</td>
<td>/ŋ/</td>
<td>/h/</td>
<td>/r/</td>
<td>/l/</td>
<td>/w/</td>
<td>/j/</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>
<h3>爆破音</h3>
<ul>
<li>爆破音一共有6个：t、d、b、p、g、k</li>
<li>失去爆破：当一个爆破音的后面紧跟着另一个爆破音时，前一个爆破音只按其发音部位做好发音口形、形成阻碍，而不爆破出来，稍微停顿后即发出后面的辅音；</li>
<li>摩擦音：[f]、[v]、[s]、[z]、[dz]、[ts]、[z]、[h]，当爆破音后面紧跟着摩擦音时，只有轻微爆破，也称为不完全爆破。</li>
<li>爆破音后面紧跟鼻音[m]、[n]或舌边音[l]时，也会形成不完全爆破。
爆破音加l</li>
<li>注重音节：重音后的第一个元音叫注重音节，这个时候开始升调</li>
</ul>
<h3>音标</h3>
<ul>
<li>国际音标是IPA，英式音标，KK音标是美式的</li>
<li><img src="https://www.liritian.com/wp-content/uploads/2024/03/5481710918368_.pic_.png" alt="" /></li>
<li>不同
<ul>
<li>KK的长音 [i],短音[I],[ɛ]  red</li>
<li>[ə] 发音 attack ,[ɚ] 轻度卷舌 paper [ɝ] 重度卷舌 her</li>
<li>
</li>
<li>IPA的长音 [i:],短音[I],[e] red</li>
<li>
</li>
</ul></li>
</ul>
<h3>连音</h3>
<p>摩擦音：[f] [v] [ʃ] [ʒ] [θ] [ð] [s] [z] [r] [h]
n,s在连音的时候 发两遍</p>
<h3>连读基础</h3>
<ul>
<li>
<p>连读：连起来读；同一个意群中，发生的单词连音。</p>
<ul>
<li>目的：帮助练习听力</li>
<li>
<p>分类：</p>
<ul>
<li>
<p>辅音+元音：stand up</p>
<ul>
<li>辅音结尾，元音开头：
<ul>
<li>good afternoon【d+a=&gt;dae】</li>
<li>put it on [t_it_on]</li>
<li>look at it [k_at_it]</li>
<li>look around[k_a]</li>
<li>that's enough of that&#x20;</li>
</ul></li>
</ul>
</li>
<li>
<p>元音+元音：
以/i:/ /i/+元音 中间插入半元音（j）</p>
<ul>
<li>
<p>I am [ai j m]</p>
</li>
<li>
<p>be over /be j over/</p>
</li>
<li>
<p>he is [hi\:jis]</p>
</li>
<li>
<p>be on time [bi\:jon time]</p>
</li>
<li>
<p>以/u:/ /u/+元音 中间插入半元音 （w）</p>
</li>
<li>
<p>do it</p>
</li>
<li>
<p>two apples</p>
</li>
<li>
<p>Take it easy [ke_it_ea]</p>
</li>
<li>
<p>you are [ju\:wr]</p>
</li>
<li>
<p>who else [hu\:wels]</p>
</li>
<li>
<p>实质是在元音之间插入半元音/j/ 或者/w/</p>
</li>
<li>
<p>规则：前面的单词以元音音素e或者i结尾，紧随其后的单词以元音开头，在两个单词之间插入半元音/j/过度，同样的而以u或o结尾，插入半元音/w/过度</p>
</li>
</ul>
</li>
<li>
<p>r/re+元音</p>
<ul>
<li>如果前一个词是以-r 或者-re 结尾，后一个词是以元音开头，这时的r 或re 不但要发/ r / ，而且还要与后面的元音拼起来连读。</li>
<li>I looked for it here and there.</li>
<li>
<p>But where is my cup?</p>
<p>Where are your brother and sister?</p>
</li>
<li>
</li>
<li>
<p>注意：如果一个音节的前后都有字母r，即使后面的词以元音开头，也不能连读。</p>
<p>例如：The black clouds are coming nearer and nearer. （nearer与and不可连读）</p>
</li>
</ul>
</li>
<li>
<p>字母 l、n、r +元音多个音 </p>
<ul>
<li>fill in /fill lin/</li>
<li>an egg  /an negg/</li>
<li>your eyes /your reyes/</li>
</ul>
</li>
<li>
<p>辅音+辅音: good luck</p>
<ul>
<li>指音的同化</li>
<li>4种方式\:x+y 代表 以x音标为结尾+以y音标为开头
<ul>
<li>t+j变音为/tʃ/ [next year got you]</li>
<li>d+j变音为/d3/ [would you could you]</li>
<li>s+j变音为/ʃ/ [miss you bless you]</li>
<li>z+j变音为/3/ [who's your friend? where's your home?]</li>
</ul></li>
</ul>
</li>
<li>
<p>辅音结尾+h  </p>
<ul>
<li>击穿</li>
<li>find him /fin dim/</li>
<li>my friend has /my frien das/</li>
<li>Must he go? [mʌsti:]</li>
<li>For him [fɔ\:rɪm]</li>
<li>Leave him. / li\:vɪm /</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>意群：按照语义划分的，连读现象只出现在同一个意群内，意群与意群之间的两个单词即使符合上连读规则，也不连读。
<ul>
<li>“I’ll be back in an hour”中的“in an hour”是一个意群</li>
<li>I hope it will get a little warmer 中的 i hope 是一个意群，所以hope 不与后面it 连读</li>
<li>
</li>
</ul></li>
<li>
<p>浊化：
主要涉及爆破音的清辅音（如/p/、/t/、/k/）在特定条件下的发音变化。</p>
<p>当这些清辅音出现在/s/音之后，且与其后的元音音素相连时，通常会发生浊化。
浊化后的发音分别是/b/、/d/、/g/和/z/。</p>
<p>例如，在单词“student”中，/t/音在重读时浊化为/d/；
在“open”中，/p/音在两个元音之间浊化为/b/。</p>
<p>浊化不仅限于单音节单词，也适用于双音节或多音节单词。
在双音节或多音节单词中，如果/s/和清辅音位于同一个音节中，则会发生浊化。
例如，“discuss”中的/k/音浊化为/g/，“expected”中的/p/音浊化为/b/。</p>
<p>需要注意的是，如果/s/和清辅音不位于同一个音节中，或者组合后面没有接元音，则不会发生浊化。</p>
</li>
<li>
<p>爆破：</p>
<ul>
<li>
<p>失去爆破，或者叫不完全爆破，只须做出发音的准备，但并不发音，稍稍停顿后就发后面的音。</p>
<ul>
<li>6个爆破音【t、d、k、g、p、b】中的任意2个相临时，前一个爆破音会失去爆破，即做好这个发音的姿势，稍做停顿后即发后面的爆破音。</li>
<li>bi(g) bus</li>
<li>re(d) coat</li>
<li>wha(t) time</li>
<li>ol(d) pi(c)ture</li>
<li>put i(t) down</li>
<li>chea(p) book</li>
<li>li(k)e it</li>
<li>not good pople [no tgoo dpeople ]</li>
<li>相同辅音只读一次
bad day bad的d 省略</li>
</ul>
</li>
<li>
<p>完全爆破
完全爆破则是指爆破辅音完全释放气流的情况。这种发音发生在辅音在单词的开始或中间位置时，或者在某些语音环境下。例如，&quot;pie&quot; 中的 /p/ 发音为一个完全的爆破声音。</p>
</li>
</ul>
</li>
</ul>
<h2>重读、弱读</h2>
<pre><code>实词重读：拉长、放慢、音量
虚词弱读： 加快、缩短、连读

五大语调规则：
1 陈述句用降调
2 特殊疑问句降调
what did you have for breakfast ?
3 一般疑问句升调
Are you tired ?
4 列举或选择，先升后降
I like hotdogs，hamburgers and donuts。
5 句子没说完，先升后降
I called you ，but no one answered。</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1889</wp:post_id>
		<wp:post_date><![CDATA[2024-03-20 15:07:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-20 07:07:15]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-20 17:00:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-20 09:00:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%8b%b1%e8%af%ad%e5%8f%a3%e8%af%ad%e8%bf%9e%e8%af%bb%e3%80%81%e7%88%86%e7%a0%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%ae%97%e6%b3%95%e5%92%8c%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[其他]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[novarique.top]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[leroykane@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://novarique.top</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[218.6.121.111]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-03-26 08:02:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-03-26 00:02:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You're really a good webmaster. The website loading speed is amazing.
It seems that you are doing any distinctive trick.
Furthermore, the contents are masterpiece. you've done a excellent job on this topic!
Similar here: <a href="https://camilashop.top" rel="nofollow ugc">bezpieczne zakupy</a> and also here:
<a href="https://novarique.top" rel="nofollow ugc">Sklep internetowy</a>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[英语的连读规则]]></title>
		<link>https://www.liritian.com/archives/%e8%8b%b1%e8%af%ad%e7%9a%84%e8%bf%9e%e8%af%bb%e8%a7%84%e5%88%99/</link>
		<pubDate>Wed, 20 Mar 2024 10:42:30 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1897</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>连读 linking</h2>
<h3>辅音+元音</h3>
<p>1 辅元连读
take it all
take的k 发成g  /take git all/</p>
<p>2 不送气
p、k、t 在非重读音节的情况下不送气，不是浊化
例如open 中p 发成不送气的b /oben/，apple中的p 发为b</p>
<p>3 flap t （闪音）
water 、party （在舌头快贴到上颚的时候立马离开，ttttt）
letter 中的t 为flap t （闪音：美式发音才有，听起来像d，有些地方称之为浊化，其实是闪音）</p>
<p>not at all：英音就是黄教主的 “闹太套”
not at all ：not中a 美音/nɑːt/ at 中发梅花音 ae 所以读起来像 /nɑ: dae dɔːl/</p>
<p>4 l、n、r、m、ŋ
在音节里面读两遍
light L:比如love、like的发音L
dark L：发的像/ɜ:l/,舌头划向小舌头</p>
<h2>连读 Insertion</h2>
<h3>元+元</h3>
<p>fire /fai(j)ər/</p>
<p>a e i :j
o u :w</p>
<p>fire in the hole
do it
you and i (you wen nai) 增加一个w
he and i （hi j nai）增加一个j
playing （plei j ng）增加一个j</p>
<h2>略读 Gemination 辅+辅</h2>
<p>完全相同的：
tt、td、dt、dd、
直接省略前面一个，只读后面一个
gas station： /ga station/
from me /fro me/
got it // 失去爆破的时候是 got it 后面的it的t 爆掉</p>
<p>前浊+后清</p>
<p>have fun /hai fun/ 清化
浊辅音+浊辅音 不省略：teach children、orange juice</p>
<p>失去爆破：good time 的d 只做口型，不发音
类似的有 sit down、not to</p>
<h2>吞音 Geminitation</h2>
<p>失去爆破
不完全失去爆破
无声除阻
p、b、d、t、k、g</p>
<p>除了tt、td、dt、dd、以外的跟其他的辅音
如：
good boy /goo d(有形无声) boy/</p>
<p>that fly t要爆破
top shelf /p 爆破 ，绝望主妇/</p>
<h2>吞音 Glottal stop</h2>
<p>声门闭塞音
喉塞音</p>
<p>经常出现在 /ən/中
written /rit(/ə/)n
captain /其中p 爆破，t 吞音 读成 ca''ən/</p>
<h2>略读 H-dropping音</h2>
<p>H击穿音
he、him、her、his</p>
<p>Did he /did hi=&gt;dɪ di/
Give him 5 bucks /givm/
tell him /tel ləm/
take his letter /tegiz letter/ 不送气的g
i wanna make her breakfast /magər/</p>
<h2>略读G-dropping</h2>
<p>going /go(w) in/ 由原来的ŋ 变成了 win/
how are you doing /how jə du wən/</p>
<h2>变音Fusion同化（融合）</h2>
<p>t+j=[tʃ]
what about you
d+j=dʒ
would you/could you
s+j=ʃ
this year
z+j = ʒ</p>
<h2>弱读、缩写、其他</h2>
<p>can't的t会被吞音，如果是升调是cant，不是则是can
/kən/
have /hər/ how long have you been
and/ but/ to/ of/ was /do you /does 都会弱读为ə (shwa)</p>
<p>want to = wanna  因为第一个 t省略，n后面的t和d也省略，所以就变成了wanna/wʌnə/
gonna= going to
gotta = have got to
ain't = be not/have not
I'am = aim
he's
she's
we're /wə'r/
it'll /idl/
they'll
清辅音+不送气
speak /sbeak/
stop /sdɔ:p/ 后面是元音的 要变成不送气
disclose /disclose 注意：后面+辅音是不变成不送气的/</p>
<p>p]、[t]、[k]、[f]、[s]、[θ]、[ʃ]、[tʃ]、[tr]、[ts]，而浊辅音则包括[b]、[d]、[g]、[v]、[z]、[ʒ]、[e]、[dʒ]、[dr]、[dz]</p>
<p>/ɑ:/ /ʌ/ /ɔ:/ /ɒ/ /ɜ:/ /ə/ /i:/ /ɪ/ /u:/ /ʊ/ /e/ /æ/ /eɪ/ /aɪ/ /ɔɪ/ /ɪə/ /eə/ /ʊə/ /əʊ/ /aʊ/ /ŋ/</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1897</wp:post_id>
		<wp:post_date><![CDATA[2024-03-20 18:42:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-20 10:42:30]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-20 20:21:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-20 12:21:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%8b%b1%e8%af%ad%e7%9a%84%e8%bf%9e%e8%af%bb%e8%a7%84%e5%88%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%ae%97%e6%b3%95%e5%92%8c%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[其他]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ChatGPT-openAI 生成文本、图片]]></title>
		<link>https://www.liritian.com/archives/chatgpt-openai-api%e8%ae%bf%e9%97%ae/</link>
		<pubDate>Fri, 22 Mar 2024 03:33:14 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1900</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>OPEANAI</h2>
<p>关键概念</p>
<ul>
<li>文本生成模型</li>
<li>Assistantst 助手 </li>
<li>Embeddings （嵌入）</li>
<li>Tokens</li>
</ul>
<p>1文本生成模型</p>
<p>OpenAI的文本生成模型(通常被称为生成预训练转换器或简称“GPT”模型)，如GPT-4和GPT-3.5，已经被训练以理解自然和形式语言。
像GPT-4这样的模型允许文本输出来响应它们的输入。
这些模型的输入也被称为“提示”。设计提示符本质上是如何“编程”像GPT-4这样的模型，通常是通过提供如何成功完成任务的说明或一些示例。像GPT-4这样的模型可以用于各种各样的任务，包括内容或代码生成、摘要、对话、创意写作等等。</p>
<p>2.助手</p>
<p>助手指的是实体，在OpenAI API的情况下，这些实体由大型语言模型(如GPT-4)提供支持，能够为用户执行任务。
这些助手基于嵌入在模型上下文窗口中的指令进行操作。他们通常还可以使用工具，让助手执行更复杂的任务，如运行代码或从文件中检索信息。</p>
<p>3 嵌入</p>
<p>嵌入是一段数据(例如一些文本)的矢量表示，旨在保留其内容和/或其含义的各个方面。在某些方面相似的数据块往往比不相关的数据具有更紧密的嵌入。OpenAI提供文本嵌入模型，将文本字符串作为输入，并产生嵌入向量作为输出。嵌入在搜索、聚类、推荐、异常检测、分类等方面都很有用。在我们的嵌入指南中阅读更多关于嵌入的信息。助手API允许您在自己的应用程序中构建AI助手。Assistant有指令，可以利用模型、工具和知识来响应用户查询。助手API目前支持三种类型的工具:代码解释器、检索和函数调用。</p>
<p>4 token</p>
<p>文本生成和嵌入模型处理称为Token的文本块。记号表示常见的字符序列。例如，字符串“tokenization”被分解为“token”和“ization”，而像“the”这样的短而常见的单词则被表示为单个token。请注意，在句子中，每个单词的第一个标记通常以空格字符开头。查看我们的标记器工具来测试特定的字符串，看看它们是如何被转换成标记的。作为一个粗略的经验法则，对于英语文本，1个标记大约是4个字符或0.75个单词。</p>
<p>需要记住的一个限制是，对于文本生成模型，提示符和生成的输出之和不能超过模型的最大上下文长度。对于嵌入模型(不输出token)，输入必须短于模型的最大上下文长度。每个文本生成和嵌入模型的最大上下文长度可以在模型索引中找到。</p>
<h2>GPT</h2>
<p>generative pre-trained transformers</p>
<p>ChatGPT为openAI 的模型提供了一个聊天界面和一系列内置功能，如集成浏览、代码执行、插件等等。</p>
<h2>设置API keys</h2>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5601711072644_.pic_.jpg" alt="" /></p>
<h2>设置环境变量</h2>
<p>vim ~/.bash_profile
export OPENAI_API_KEY=刚才设置的key
source ~/.bash_profile
用 echo $OPENAI_API_KEY 显示出来则表示配置成功</p>
<h2>请求openAI</h2>
<p>1 小试牛刀</p>
<pre><code class="language-curl">curl https://api.openai.com/v1/chat/completions   -H &quot;Content-Type: application/json&quot;   -H &quot;Authorization: Bearer $OPENAI_API_KEY&quot;   -d &#039;{
    &quot;model&quot;: &quot;gpt-3.5-turbo&quot;,
    &quot;messages&quot;: [
      {
        &quot;role&quot;: &quot;system&quot;,
        &quot;content&quot;: &quot;You are a poetic assistant, skilled in explaining complex programming concepts with creative flair.&quot;
      },
      {
        &quot;role&quot;: &quot;user&quot;,
        &quot;content&quot;: &quot;Compose a poem that explains the concept of recursion in programming.&quot;
      }
    ]
  }&#039;</code></pre>
<p>返回：</p>
<pre><code class="language-json">{&quot;model&quot;:&quot;gpt-3.5-turbo-0125&quot;,&quot;object&quot;:&quot;chat.completion&quot;,&quot;usage&quot;:{&quot;prompt_tokens&quot;:39,&quot;completion_tokens&quot;:159,&quot;total_tokens&quot;:198},&quot;id&quot;:&quot;chatcmpl-95PoUmKllYJkz4IbnUuAq6wjwSfg7&quot;,&quot;created&quot;:1711077894,&quot;choices&quot;:[{&quot;index&quot;:0,&quot;delta&quot;:null,&quot;message&quot;:{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;In the realm of code, a concept lies, sublime,\nA recursion, a loop of a different kind,\nLike a mirror reflecting its own design,\nA function calls itself, a loop refined.\n\nA base case ensures the cycle&#039;s end,\nWithout it, forever the function will bend,\nThrough layers of calls, the solution extends,\nEach step closer to where the answer attends.\n\nAs the function unwinds, the values accrue,\nEach call processing, the task it must do,\nTill the base case is met, the cycle is through,\nRecursion, a dance, elegant and true.\n\nIn the world of code, a concept so fine,\nRecursion weaves patterns, a complex design,\nA loop that mirrors, a loop that defines,\nAn infinite loop, in a finite line.&quot;},&quot;finish_reason&quot;:&quot;stop&quot;}]}</code></pre>
<p>诗文大意：</p>
<p>在代码的领域中，有一个概念存在，崇高而卓越，是一种递归，一种不同类型的循环，就像一面镜子反射着自身的设计，一个函数调用自身，一个循环被完善。
基本情况确保了循环的结束，没有它，函数将永远弯曲，通过层层调用，解决方案扩展，每一步都更接近答案所在的地方。
当函数展开时，值累积，每个调用都在处理必须完成的任务，直到满足基本情况，循环结束，递归，一种优雅而真实的舞蹈。
在代码的世界中，有一个如此精妙的概念，递归编织着模式，一个复杂的设计，一个反映、定义的循环，一个无限循环，在有限的线路上。</p>
<p>tips:
如果不能访问外网：请使用 国内的平台 <a href="https://aiproxy.io/">https://aiproxy.io/</a> 然后使用自己的key，<del>注意要至少充值一个月 30块rmb</del></p>
<p>请求的时候把api.openai.com 换成 aiproxy.io，其他URI保持一致即可。</p>
<p>2 再试牛刀</p>
<p>curl <a href="https://api.aiproxy.io/v1/chat/completions">https://api.aiproxy.io/v1/chat/completions</a>   -H &quot;Content-Type: application/json&quot;   -H &quot;Authorization: Bearer $OPENAI_API_KEY&quot;   -d '{
&quot;model&quot;: &quot;gpt-4&quot;,
&quot;messages&quot;: [
{
&quot;role&quot;: &quot;system&quot;,
&quot;content&quot;: &quot;You are a golang assistant, skilled in explaining complex programming concepts with creative flair.&quot;
},
{
&quot;role&quot;: &quot;user&quot;,
&quot;content&quot;: &quot;请问golang的gozero 生成ddl的代码.&quot;
}
]
}'</p>
<p>返回值</p>
<pre><code class="language-json">{
  &quot;model&quot;: &quot;gpt-4-0613&quot;,
  &quot;object&quot;: &quot;chat.completion&quot;,
  &quot;usage&quot;: {
    &quot;prompt_tokens&quot;: 41,
    &quot;completion_tokens&quot;: 366,
    &quot;total_tokens&quot;: 407
  },
  &quot;id&quot;: &quot;chatcmpl-95QPUE3mYpijE36JNAiLdHvddFhUN&quot;,
  &quot;created&quot;: 1711080188,
  &quot;choices&quot;: [
    {
      &quot;index&quot;: 0,
      &quot;delta&quot;: null,
      &quot;message&quot;: {
        &quot;role&quot;: &quot;assistant&quot;,
        &quot;content&quot;: &quot;GoZero 是一个以最佳实践为设计目标的web和rpc框架，它含有丰富的功能如：内嵌了模式生成器和代码生成器，能够自动化很多繁琐的工作。\n\n生成DDL的代码可以通过goctl来实现，首先需要在goctl中定义.sql文件，如：\n\n```sql\nCREATE TABLE `user`\n(\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#039;primary key&#039;,\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#039;creation time&#039;,\n  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#039;update time&#039;,\n  `access_key` varchar(50) NOT NULL DEFAULT &#039;&#039; COMMENT &#039;access key&#039;,\n  `secret_key` varchar(50) NOT NULL DEFAULT &#039;&#039; COMMENT &#039;secret key&#039;,\n  `deleted` tinyint(3) NOT NULL DEFAULT &#039;0&#039; COMMENT &#039;is deleted&#039;,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1 COMMENT=&#039;api key&#039;;\n```\n\n然后通过goctl的model命令生成Go语言的模型代码：\n\n```bash\ngoctl model mysql ddl -src=./sql/*.sql -dir=./\n```\n\n这个命令会扫描所有.sql文件，转化为对应的Go语言模型代码，然后在指定的目录（这里是当前目录）生成这些代码。\n\n这样你就可以使用这些代码进行数据库操作了。使用这种方式，可以保证模型代码的一致性以及减少出错的可能性。&quot;
      },
      &quot;finish_reason&quot;: &quot;stop&quot;
    }
  ]
}</code></pre>
<p>来吧解释一下请求参数和返回参数：</p>
<p>请求参数：</p>
<ul>
<li>model 代表算法模型 例如gpt-4-turbo-preview or gpt-3.5-turbo（官方建议用这俩）</li>
<li>message
<ul>
<li>system 代表是openai 那边的服务</li>
<li>content中的内容，就是告诉gpt，你要假扮自己是一个什么样的助手，这一段可以省略。</li>
<li>user 代表用户，一般就是调用方，content是要问的内容</li>
</ul></li>
</ul>
<p>返回参数：</p>
<ul>
<li>id 唯一标识符</li>
<li>created 时间戳</li>
<li>choices 对话完成选项，可能有多个
<ul>
<li>index 代表choices中的下标，从0开始</li>
<li>message.role 消息所属者的角色</li>
<li>message.content 回复的内容</li>
</ul></li>
<li>finish_reason: 结束的原因，一般是stop（代表回答完了），还有length（请求中的token达到了一次请求的指定最大数量）、tool_calls（调用了其他工具） 、content_filter（由于内容过滤的标签省略了内容）</li>
<li>usage : 完整请求的统计
<ul>
<li>prompt_tokens的数量</li>
<li>completion_tokens的数量</li>
<li>total_tokens 是上面两个tokens的数量相加</li>
</ul></li>
</ul>
<h2>图像生成</h2>
<p>Images API提供了三种与图像交互的方法: </p>
<ul>
<li>基于文本提示从零开始创建图像(DALL·e3和DALL·e2) </li>
<li>基于新的文本提示(仅限DALL·e2)，通过让模型替换已有图像的某些区域来创建图像的编辑版本。 </li>
<li>创建现有映像的变体(仅限DALL·e2)</li>
</ul>
<p>我们来画一个光头强?(这个想法很可怕)
curl <a href="https://api.aiproxy.io/v1/images/generations">https://api.aiproxy.io/v1/images/generations</a> \
-H &quot;Content-Type: application/json&quot; \
-H &quot;Authorization: Bearer $OPENAI_API_KEY&quot; \
-d '{
&quot;model&quot;: &quot;dall-e-3&quot;,
&quot;prompt&quot;: &quot;请帮我画一个熊出没里的光头强和熊大熊二游泳的照片&quot;,
&quot;n&quot;: 1,
&quot;size&quot;: &quot;1024x1024&quot;,
&quot;style&quot;:&quot;vivid&quot;
&quot;quality&quot;:&quot;hd&quot;,
&quot;response_format&quot;: &quot;url&quot;
}'</p>
<p>Must be one of vivid or natural. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for dall-e-3</p>
<ol>
<li>model：用的模型算法</li>
<li>promt: 图片的文字描述</li>
<li>n: 生成图片的张数 1-10，dall-e-3 支持一张。</li>
<li>quality:生成图片的质量，hd代表高清，默认是 standard,</li>
<li>response_format:返回图片格式，可以是url和b64_json,url有效期为一个小时</li>
<li>size: 图片像素大小，1024x1024, 1792x1024, 1024x1792 dall-e-3 只支持一种。
7.style: 生成图片的风格样式，值可以是 vivid或者natural，vivid 会倾向于生成超真实的和富有冲击力的图片，natural 会更自然少一点真实的感觉。</li>
</ol>
<p>中文提示词，openAI 会觉得有安全风险，给拒绝了。</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5641711090281_.pic_.jpg" alt="" /></p>
<p>图片太大了，所以拍照上传了。由有道翻译为英文后生成的图片。</p>
<p>{&quot;error&quot;:{&quot;message&quot;:&quot;Your request was rejected as a result of our safety system. Your prompt may contain text that is not allowed by our safety system.&quot;,&quot;type&quot;:&quot;invalid_request_error&quot;,&quot;param&quot;:null,&quot;code&quot;:&quot;content_policy_violation&quot;}}</p>
<p>oh no fxxxk it，这是光头强么？</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/10211711085564_.pic_hd.png" alt="" /></p>
<p>来换点关键词来玩吧</p>
<p>&quot;prompt&quot;: &quot;castle、princess、firework、white horse、flowers&quot;,</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5651711090450_.pic_.jpg" alt="" />
&quot;prompt&quot;: &quot;girl、white skin、blonde、hot&quot;</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5671711090502_.pic_.jpg" alt="" /></p>
<p>&quot;prompt&quot;: &quot;girl、white skin、blonde、hot、bikini、beach、175cm&quot;
<img src="https://www.liritian.com/wp-content/uploads/2024/03/5661711090478_.pic_.jpg" alt="" /></p>
<p>返回值：</p>
<pre><code>{
  &quot;created&quot;: 1711086356,
  &quot;data&quot;: [
    {
      &quot;url&quot;: &quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-U6qFOYHUqO6dq5DuGnlIG37Z/user-U3PuI1SNnb4XLkBynhFQhOsr/img-DNY9KDMHda5JZytxwPuC1IeH.png?st=2024-03-22T04%3A45%3A56Z&amp;se=2024-03-22T06%3A45%3A56Z&amp;sp=r&amp;sv=2021-08-06&amp;sr=b&amp;rscd=inline&amp;rsct=image/png&amp;skoid=6aaadede-4fb3-4698-a8f6-684d7786b067&amp;sktid=a48cca56-e6da-484e-a814-9c849652bcb3&amp;skt=2024-03-21T20%3A59%3A41Z&amp;ske=2024-03-22T20%3A59%3A41Z&amp;sks=b&amp;skv=2021-08-06&amp;sig=wAjpdhlEe/vsem/lJLqwtEFbpCzU6%2BZyfWk8gGtf0Vs%3D&quot;,
      &quot;b64_json&quot;: null,
      &quot;revised_prompt&quot;: &quot;A fit Caucasian woman with sun-kissed blonde hair stands tall on a beach. She is dressed in a stylish bikini and her height is approximately 175cm. The golden rays of the sun add a warm overlay to the scene. She basks in the light, her footsteps leaving gentle imprints in the sand. Besides the sensual splash of waves reaching the shore, the scene is mostly quiet and serene.&quot;
    }
  ]
}</code></pre>
<p>revised_prompt: 修正过的提示词，这里根据promt的输入，进行扩展与编写细节，从而生成的文案。
created: 生成图片的时间戳。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1900</wp:post_id>
		<wp:post_date><![CDATA[2024-03-22 11:33:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-22 03:33:14]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-22 15:24:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-22 07:24:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chatgpt-openai-api%e8%ae%bf%e9%97%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd"><![CDATA[AI]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_955ce17ca35ce88925d3cfd388dfc781]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[img.topfapgirls]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[robbin_wilmer@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://eblog.hu/redirect.php?redirect_to=https%3A%2F%2Fyandex.ru%2Fsearch%2F%3Ftext%3Dhost%253Awww.topfapgirls1.com%26lr%3D103587</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[130.185.154.42]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-04-03 08:38:32]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-04-03 00:38:32]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you've noticed a group of those vagina clips or OnlyFans leaked - <a href="https://eblog.hu/redirect.php?redirect_to=https%3A%2F%2Fyandex.ru%2Fsearch%2F%3Ftext%3Dhost%253Awww.topfapgirls1.com%26lr%3D103587" rel="nofollow ugc">img.topfapgirls</a>, you'll get what "start kitty" methods.
It's fundamentally how the vagina goes to help to make space for the dick.
Some persons phone it "wide open vulva." The 
vagina possesses this constant activity kudos to a skinny part of 
drag at the beginning and a simple interior filling. But the vulva is not the 
nearly all hypersensitive portion, hence men shouldn't anxiety about coming in contact with it.
It's pet beds to feel the vagina while receiving chaotic, but fellas want 
to continue their arms in examine to refrain from any incidents.
The vagina is all about muscle tissues and little strong openings for 
G-spot and sperm action. Hence if a man desires to ejaculation, he's gotta employ his fingers to receive there.
The nearness and squeezing of the vagina will be good for folks and for reaching that nice place.
It's all about transferring back again and on and up and down during love-making.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Protocol buffers （ProtoBuf)]]></title>
		<link>https://www.liritian.com/archives/protocol-buffers-%ef%bc%88protobuf/</link>
		<pubDate>Fri, 22 Mar 2024 14:50:01 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1926</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Protocol Buffers（简称protobuf）是一种轻量级、高效的数据交换格式，由Google开发，用于结构化数据序列化，类似于XML或JSON，但更加高效、更小、更快。它们旨在用于通信协议、数据存储等领域，适用于各种语言。</p>
<h2>协议定义</h2>
<p>Protocol Buffers 通过一种简单的语言来定义数据结构，然后使用特定的编译器将这些定义转换为不同编程语言的类文件。这些类文件包含用于序列化和反序列化数据的代码，以及数据结构的访问方法。</p>
<h2>语法要点</h2>
<p>Protocol Buffers 的语法主要包含以下要点：</p>
<ul>
<li>
<p>消息定义（Message Definition）：使用 message 关键字定义消息，类似于类的定义。每个消息包含一个或多个字段。</p>
<pre><code class="language-protobuf">message Person {
    required int32 id = 1;
    required string name = 2;
    optional string email = 3;
}</code></pre>
</li>
<li>
<p>字段类型（Field Types）：字段可以具有多种数据类型，包括基本数据类型（如整数、浮点数、布尔值、字符串等）以及其他消息类型。</p>
</li>
<li>
<p>字段修饰符（Field Modifiers）：字段可以标记为 required（必需）、optional（可选）或 repeated（重复）。</p>
<ul>
<li>required：字段必须在消息中存在且不为空。</li>
<li>optional：字段可以存在，也可以为空。</li>
<li>repeated：字段可以重复出现，相当于数组或列表。</li>
</ul>
</li>
<li>
<p>字段标识号（Field IDs）：每个字段都有一个唯一的标识号，用于在消息中标识字段。这些标识号应该是正整数，并且在消息中必须是唯一的。</p>
<p>标识号范围是 1 到 536870911（2^29 - 1），其中 1 到 15 用于更小的消息大小。
保留了标识号 19000 到 19999 用于特殊目的。</p>
</li>
<li>
<p>默认值（Default Values）：可以为字段指定默认值，在字段没有被设置时将使用该默认值。</p>
<pre><code class="language-protobuf">message Person {
required int32 id = 1;
required string name = 2;
optional string email = 3 [default = &quot;&quot;];
}</code></pre>
<p>示例
下面是一个简单的示例，展示了如何使用 Protocol Buffers 定义一个消息并进行序列化和反序列化：</p>
<pre><code class="language-protobuf">syntax = &quot;proto3&quot;;
message Person {
int32 id = 1;
string name = 2;
repeated string emails = 3;
}</code></pre>
<p>然后，通过 Protocol Buffers 提供的编译器将该定义文件编译成目标语言的类文件，以便在应用程序中使用。</p>
</li>
</ul>
<h2>数据类型</h2>
<p>Protocol Buffers 支持多种字段类型，这些类型用于定义消息中的各种数据。下面是 Protocol Buffers 中常用的字段类型：</p>
<p>基本数据类型（Scalar Types）：</p>
<p>double：双精度浮点数（64位）。
float：单精度浮点数（32位）。
int32：有符号 32 位整数。Varint 编码。
int64：有符号 64 位整数。Varint 编码。
uint32：无符号 32 位整数。Varint 编码。
uint64：无符号 64 位整数。Varint 编码。
sint32：有符号 32 位整数，使用 ZigZag 编码。
sint64：有符号 64 位整数，使用 ZigZag 编码。
fixed32：固定 32 位整数。固定 4 个字节。
fixed64：固定 64 位整数。固定 8 个字节。
sfixed32：有符号固定 32 位整数。固定 4 个字节。
sfixed64：有符号固定 64 位整数。固定 8 个字节。
bool：布尔值，只能是 true 或 false。
string：字符串。
bytes：原始字节序列。
复合类型（Composite Types）：</p>
<p>message：其他消息类型。
enum：枚举类型。
特殊类型（Special Types）：</p>
<p>Any：表示任意消息类型。
Duration：表示时间段。
Timestamp：表示时间戳。
FieldMask：用于指定要更新的消息字段。
Struct：表示任意结构化数据。
集合类型（Collections Types）：</p>
<p>repeated：用于表示数组或列表，可以包含零个或多个元素。</p>
<h2>安装protocol buffers</h2>
<p>下载安装包
wget <a href="https://github.com/protocolbuffers/protobuf/releases/download/v26.0/protobuf-26.0.tar.gz">https://github.com/protocolbuffers/protobuf/releases/download/v26.0/protobuf-26.0.tar.gz</a></p>
<p>解压
tar -zxvf protobuf-26.0.tar.gz</p>
<p>测试安装结果
protoc --version </p>
<h2>生成一个看看</h2>
<p>编写一份以.proto为扩展名的文件response.proto</p>
<pre><code>syntax = &quot;proto3&quot;;
option go_package = &quot;./;proto&quot;;
// 定义数据结构，message 你可以想象成java的class，c语言中的struct
message Response {
  string data = 1;   // 定义一个string类型的字段，字段名字为data, 序号为1
  int32 status = 2;   // 定义一个int32类型的字段，字段名字为status, 序号为2
}</code></pre>
<p>生成golang的代码，需要安装插件
<code>go install github.com/golang/protobuf/protoc-gen-go@latest</code></p>
<p>执行代码：
protoc --go_out=. response.proto
其中--go_out代表输出golang代码，protoc 还支持其他语言类型，如PHP、JAVA 等</p>
<pre><code>--cpp_out=OUT_DIR           指定代码生成目录，生成 C++ 代码
  --csharp_out=OUT_DIR        指定代码生成目录，生成 C# 代码
  --java_out=OUT_DIR          指定代码生成目录，生成 java 代码
  --js_out=OUT_DIR            指定代码生成目录，生成 javascript 代码
  --objc_out=OUT_DIR          指定代码生成目录，生成 Objective C 代码
  --php_out=OUT_DIR           指定代码生成目录，生成 php 代码
  --python_out=OUT_DIR        指定代码生成目录，生成 python 代码
  --ruby_out=OUT_DIR          指定代码生成目录，生成 ruby 代码</code></pre>
<p>就会生成一份名为 response.pb.go的文件</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1926</wp:post_id>
		<wp:post_date><![CDATA[2024-03-22 22:50:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-22 14:50:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-22 23:00:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-22 15:00:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[protocol-buffers-%ef%bc%88protobuf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%bd%91%e7%bb%9c%e5%8d%8f%e8%ae%ae"><![CDATA[网络协议]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Stable Diffusion-AI绘画工具]]></title>
		<link>https://www.liritian.com/archives/stable-diffusion-ai%e7%bb%98%e7%94%bb%e5%b7%a5%e5%85%b7/</link>
		<pubDate>Sat, 23 Mar 2024 12:45:47 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1929</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Stable Diffusion是一种AI绘画生成工具,由Stability AI 出品。今天他们的ceo 辞职了。</p>
<p>试用了一下nijiMidjourney，它们要收费，且不好用，就果断放弃了。B站看了一下stable diffusion的效果还可以的，就下载下来玩一下</p>
<h2>先决条件</h2>
<p>1、梯子 dddd（懂的都懂）
2、git 拉取stable_diffusion_webui的代码
3、python 3.10.6 版本，其他的版本可能会出现很多问题。</p>
<h2>安装python</h2>
<p>我用mac电脑
<a href="https://www.python.org/downloads/release/python-3106/">https://www.python.org/downloads/release/python-3106/</a>
下载里面的
macOS 64-bit universal2 installer 其他的可以自行下载
这tame的是个pkg包，安装完成之后 有个python laucher，打开就好了，是个火箭形状的。</p>
<p>在命令行 输入python3 可以进入python的交互界面，就证明安装ok了</p>
<h2>下载stable_diffusion_webui</h2>
<p>如果有梯子，临时的把代理端口改到自己的梯子端口
export https_proxy=<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a> http_proxy=<a href="http://127.0.0.1:7890">http://127.0.0.1:7890</a> all_proxy=socks5://127.0.0.1:7890</p>
<p>下载代码：
git clone <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui.git">https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</a></p>
<h2>启动安装 webui</h2>
<p>cd stable-diffusion-webui
执行命令 <code>./webui.sh</code>
当出现
<code>Running on local URL:  http://127.0.0.1:7860</code></p>
<p>在浏览器访问
127.0.0.1:7860 这时候就安装成功了，如果不喜欢白色的主题，可以用黑色主题</p>
<p><code>http://127.0.0.1:7860?__theme=dark</code> 看起来顺眼多了~</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5701711198217_.pic_.png" alt="" /></p>
<p>其中prompt 就是提示词，negative prompt 就是反向提示词，这个举个例子就能知道了，
如果prompt 是这样，
a cat running in a beautiful garden，那么生成的小猫在花园里，就有花的存在。
<img src="https://www.liritian.com/wp-content/uploads/2024/03/5741711205614_.pic_.png" alt="" /></p>
<p>如果negative prompt 里面输入了 flower ，那么生成的画面里面就没有花了。</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5751711205614_.pic_.png" alt="" /></p>
<h2>汉化</h2>
<p>记得CMD里面要把https_proxy 改成代理的</p>
<p>打开页面 <a href="http://127.0.0.1:7860">http://127.0.0.1:7860</a>
1 点击里面有个<code>extension-&gt;avaliable</code>,勾选掉 localization 的对号，点击load from 按钮。
2 然后下面会出现一堆语言包，搜索Zh，选择简体中文版的（有simplied Chinese字样的），点击install，
3 接着点击上面的 <code>settings</code>,出现的页面有<code>Reload UI</code>
4 点击extension，在install 面板确认刚才的汉化包已经被选中了，点击<code>Apply and Restart UI</code>
5 再次点击settings，在左侧找到 <code>User interface</code>,在右面最顶部找到localization，下拉选择zh_CN,然后在页面的顶上会出现 <code>Apply settings</code> 按钮，点击之后，再点击右边的<code>Reload UI</code>,之后就是中文页面了。</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5781711261059_.pic_.jpg" alt="stable-diffusion 中文界面" />
如果有问题，请参照问题3解决。若仍不成功，英文版的将就着吧。</p>
<h2>界面介绍</h2>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5711711200627_.pic_.png" alt="" /></p>
<ul>
<li>1 Sampling method 就是采用的采样算法</li>
<li>2 Sampling steps 采样深度，深度越大采样越精准，比如一张图，深度越深，图的细节就比较多一点。</li>
<li>3  Width Height 就是宽高 右边的上下箭头就是交换宽高的数值，如果宽高很小，图片就会失真。</li>
<li>4 Batch count 批次，一次生成几批图</li>
<li>5 Batch size 批量，一次生成几张图</li>
<li>6 CFG Scale： Classfier free guidance scale （提示词引导系数），用来控制模型在生成图像的时候，多大程度的符合你的提示词。
<pre><code>1 代表大多忽略你的提示
3 更有创意
7 遵循提示和自由之间的良好平衡，默认值是7
15 更加遵守提示
30 严格按照提示执行</code></pre>
<p>如果值太高，图像的颜色会饱和。提示词越往后占的权重就越小，如果cfg Scale 比较小，就可能会忽略后面的提示词。</p></li>
<li>7 seed 种子值：
在生成图像的时候，生成一些初始参数，种子值会控制图像的内容，每一个图像都有种子值；种子值右边的绿色循环小按钮，代表可以使用上一次生成的图像的种子值。
说人话就是，你上次生成了一图，结果感觉差点什么装饰，你还想再这个图上继续作画，那么就把种子值填进去，再生成的图片基本就是差不多同样的。</li>
<li>8 Hires.fix 高清修复，会变更宽高。</li>
</ul>
<p>图片输出区的介绍：
<img src="https://www.liritian.com/wp-content/uploads/2024/03/5731711201850_.pic_.png" alt="" />
从左往右：
1 生成图片保存的目录
2 save 可以把图片下载到本地
3 zip 就是打包图片</p>
<h2>图生图</h2>
<p>点击 img2img，可以仿照一张图片的样子，根据提示词（promt）去生成另一张,我试了一下我的照片，可能由于颜值过于强大，生成Trump和Putin 都不太像。
原始图片：
<img src="https://www.liritian.com/wp-content/uploads/2024/03/sts.jpg" alt="" /></p>
<p>prompt: Donald Trump,analog style
negative prompt: nsfw, lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry, bad feet,</p>
<p>Sampling steps:32
Denoising strengh: 0.5
生成图片：
<img src="https://www.liritian.com/wp-content/uploads/2024/03/5771711241353_.pic_.png" alt="" /></p>
<p>emmm,也不能说一点不像吧</p>
<h2>LoRA 模型（微调模型）</h2>
<p>生成这种辣眼睛的东西，实在不是初衷~，萝莉、御女才是宅男的最爱啊。
1 去 <a href="https://civitai.com/">https://civitai.com/</a> 网站 搜索 doll likeness （网红脸）内容，进行下载
然后放在 <code>stableDiffusion/stable-diffusion-webui/models/Lora</code>中；
2 同样是上面的网站，搜索 chilloutmix 大模型，然后放到
<code>stableDiffusion/stable-diffusion-webui/models/Stable-diffusion</code>中；
3 安装插件 <code>kohya</code>，仍然是extensions-&gt;avaliable,搜索一下 &quot;Kohya-ss Additional Networks models&quot;,点击安装。
查看已经安装，出现有个插件地址是<code>https://github.com/kohya-ss/sd-webui-additional-networks.git</code>;就已经安装成功了。
应用之后，会出现一个 <code>Additional Networks</code>,中文是可附加网络。</p>
<p>点击”文生图“，点击LoRa 按钮，选择刚才下载的一些微调模型，会在promt那里出现
&lt;lora:Korean Male Model 1.0:1&gt; 可以参加多个，注意后面的1是权重，多个模型累加是1就行</p>
<p>demo:
prompt:
&lt;lora:Korean Male Model 1.0:0.5&gt; </p>
<lora:RussianDoll:0.5>

girl during the day, best quality, bright sunshine,sunlight on the face, masterpiece,(photorealistic:1),ultra high res,highres,lovely,illustration, delicate,8k wallpaper, soft lighting, official art,long hair,beautiful girl

negative prompt:
(((simple background))),monochrome ,lowres, bad anatomy,bad hands,text,error,missing fingers, extra digit,fewer digits, cropped,worst quality low quality,noral quality,jpeg artifacts signature,,watermark, usename, blurry,ugly,pregnant,vore,duplicate, morbid,mut ilated,tran nsexual, hermaphrodite,long neck,mutated hands,poorly drawn hands pooly drawn face, mutation,deformed, bad proportions,malformed limbs,extra limbs,cloned face,disfigured,gross proportions,(((missing arms)),(((missing legs))),(((extra arms))),(((extra legs))),public hair, plump,bad legs,error legs, bad feet,NSFW,anime,cartoon, hairy, painting,sketch, drawing, easynegative,foot, straps,glare, lowres,shadow,extra legs, badeye, chid,

结果 
![](https://www.liritian.com/wp-content/uploads/2024/03/5821711264030_.pic_.png)

虽然有点假，好歹不辣眼睛了 哈哈哈哈。

 <lora:Korean Male Model 1.0:1> 再用比重为1的韩国女性模型，同样的提示词

 ![](https://www.liritian.com/wp-content/uploads/2024/03/5831711264153_.pic_.png)

ε=(´ο｀*)))唉~ 顺眼多了是不是。生成四张来试试

![](https://www.liritian.com/wp-content/uploads/2024/03/5841711264209_.pic_hd.png)

还是可以的这微调模型。

## 遇到的问题
问题1 ：

```
FileNotFoundError: No checkpoints found. When searching for checkpoints
```
解决：
Stable-diffusion模型没有下载完成,需要手动下载大约4个G，请慎重选择

cd stable-diffusion-webui/models/Stable-diffusion
4个G哦，网速不给力 下死个人（我下了一个小时。。。）
```
wget https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned-emaonly.safetensors
```

问题2：
启动 webui.sh 报错，因为我开启了代理，不开代理访问不了外网，开了就报错。
```
ImportError: Using SOCKS proxy, but the &amp;#039;socksio&amp;#039; package is not installed. Make sure to install httpx using &#x60;pip install httpx[socks]&#x60;
```
解决方法：
1 pip3 install socksio，如果ok，再启动，很遗憾我的不行
2 编辑./webui.sh，在最后一行增加pip3 install socksio。这次ok了

问题3：更换中文语言的时候报错
```
 &lt;urlopen error [ssl: certificate_verify_failed] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)&gt;

```
因为安装包下载的，没有执行 <code>Install Certificates.command</code>
在访达里面找到python3.10->双击 Install Certificates.command，弹出一个框，等待跑完就结束了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1929</wp:post_id>
		<wp:post_date><![CDATA[2024-03-23 20:45:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-23 12:45:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-10 12:11:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-10 04:11:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stable-diffusion-ai%e7%bb%98%e7%94%bb%e5%b7%a5%e5%85%b7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd"><![CDATA[AI]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Stable Diffusion-生成AI图片]]></title>
		<link>https://www.liritian.com/archives/stable-diffusion-ai%e7%bb%98%e7%94%bb%e5%b7%a5%e5%85%b7-%e7%94%9f%e6%88%90ai%e5%9b%be%e7%89%87/</link>
		<pubDate>Sun, 24 Mar 2024 07:35:09 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1966</guid>
		<description></description>
		<content:encoded><![CDATA[<p>书接上回~</p>
<p>下载两个模型： 2个模型 单个7.7G，慎入。
anything-v3
<a href="https://huggingface.co/ckpt/anything-v3.0/resolve/main/anything-v3.0.safetensors?download=true">https://huggingface.co/ckpt/anything-v3.0/resolve/main/anything-v3.0.safetensors?download=true</a></p>
<p>stable-diffusion-v1.5
<a href="https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned.safetensors?download=true">https://huggingface.co/runwayml/stable-diffusion-v1-5/resolve/main/v1-5-pruned.safetensors?download=true</a></p>
<h2>寻找一个模板</h2>
<p>去 civitai.com 搜索anything-v3,找一张图片，点击右下角的information图片，找到promt和negative prompt，复制后，放到sd里面，然后把其他的信息，Sampler、Steps、Seed等都拿回来，然后试着生成一张。</p>
<h2>来个美女</h2>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5911711283264_.pic_.png" alt="" /></p>
<p>prompt：</p>
<pre><code>8k,extremely detailed CG unity 8k wallpaper,ray tracing:1,light on face:0.75,photorealistic,cinematic composition:1.3,Accent Lighting:1,delicate,beautiful detailed,colourful,finely detailed,intricate details,scenery,perfect face shape,high quality,high precision,professional lighting,photon mapping,raytracing,radiosity,physically-based rendering,official art,(8k, RAW photo, best quality, masterpiece:1.2),(realistic, photo-realistic:1.37),illustration,Amazing,wallpaper,(masterpiece),(best quality),(ultra detailed),(ultra realistic),(Best character details:1.36),nikon d750 f/1.4 55mm,dynamic angle,professional lighting,photon mapping,radiosity,physically-based rendering,The colorful jelly flew through the air and landed on the young girl,enhancing her mesmerizing appearance.,cinematic shot + dynamic composition,incredibly detailed,sharpen,details + intricate detail + professional lighting,film lighting + 35mm + anamorphic + lightroom + cinematography + bokeh + lens flare + film grain + HDR10 + 8K + Roger Deakins,((cinematic)),high fashion,luxurious,extravagant,stylish,sensual,opulent,elegance,stunning beauty,professional,high contrast,detailed,lora:wlqc_20230821082603:0.7,</code></pre>
<p>negative prompt:</p>
<pre><code>nsfw,logo,text,badhandv4,EasyNegative,ng_deepnegative_v1_75t,rev2-badprompt,verybadimagenegative_v1.3,negative_hand-neg,mutated hands and fingers,poorly drawn face,extra limb,missing limb,disconnected limbs,malformed hands,ugly,</code></pre>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5921711283722_.pic_.png" alt="" /></p>
<p>其他参数参考一下，model: majicmixSombre_v20.safetensors [5c9a81db7a],可以在civitai.com上找到这个model的。</p>
<h2>太美了</h2>
<p>因为生成的图片因为老是面部处理的细节不好，有个身材巨棒的美女，看起来向流鼻血了一样，我就在discord上咨询了其他的朋友，他们给的建议是的 adetailer。先看成品：
<img src="https://www.liritian.com/wp-content/uploads/2024/03/5931711284840_.pic_hd.png" alt="" /></p>
<p>哇哇哦~，太棒了
点击扩展-&gt;从网址安装-&gt;输入网址：<a href="https://github.com/Bing-su/adetailer.git，-&gt;安装-&gt;应用更改并重启">https://github.com/Bing-su/adetailer.git，->安装->应用更改并重启</a></p>
<p>在新出现的Adetailer界面，点击<code>启用 After Detailer</code>,模型选择<code>face_yolov8n.pt</code>,其他默认，生成之后，会再生成一次，有个进度条。生成出来的图片就很好看了~</p>
<h2>美就多来几张</h2>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5941711286363_.pic_.jpg" alt="" /></p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5971711286482_.pic_hd.png" alt="" /></p>
<h2>换种风格</h2>
<p>prompt:</p>
<pre><code>Best quality, masterpiece, ultra high res, (photorealistic:1.4), raw photo, 1girl, waist up, in coffeeshop, deep shadow, dark theme,sexy,big breast</code></pre>
<p>negative prompt:</p>
<pre><code>ng_deepnegative_v1_75t, (badhandv4:1.2), (worst quality:2), (low quality:2), (normal quality:2), lowres, bad anatomy, bad hands, ((monochrome)), ((grayscale)) watermark，strange finger,missing finger,more finger</code></pre>
<p>其他参数
seed: 4039673012
model: euler a
steps:30
cfg:7
依旧开启 adetailer
face_yolov8n.pt</p>
<p><img src="https://www.liritian.com/wp-content/uploads/2024/03/5981711286959_.pic_hd.png" alt="" />
<img src="https://www.liritian.com/wp-content/uploads/2024/03/6011711289204_.pic_hd.png" alt="" /><img src="https://www.liritian.com/wp-content/uploads/2024/03/6001711289191_.pic_hd.png" alt="" /></p>
<p>有些其他的不能发出来。自己留着欣赏吧</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1966</wp:post_id>
		<wp:post_date><![CDATA[2024-03-24 15:35:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-24 07:35:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-25 08:39:48]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-25 00:39:48]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[stable-diffusion-ai%e7%bb%98%e7%94%bb%e5%b7%a5%e5%85%b7-%e7%94%9f%e6%88%90ai%e5%9b%be%e7%89%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd"><![CDATA[AI]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[LLM和Fune-tuning]]></title>
		<link>https://www.liritian.com/archives/llm%e5%92%8cfune-tuning/</link>
		<pubDate>Mon, 25 Mar 2024 00:58:21 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=1989</guid>
		<description></description>
		<content:encoded><![CDATA[<p>有过Stable-diffusion 神奇的出图经历之后，我在想他们是怎么做到的？带着这个问题，来了解一下其中原理的前世今生。</p>
<h2>大语言模型 LLM</h2>
<h3>1 什么是LLM</h3>
<p>LLM是大语言模型（Large Language Model）的缩写，是一种基于深度学习的自然语言处理技术，可以生成和理解人类语言。大语言模型通过在海量的文本数据上进行训练，学习到了语言的结构和规律，从而可以生成符合语法和语义规则的文本，并回答各种自然语言问题。随着技术的不断发展，大语言模型在自然语言处理领域的应用越来越广泛，包括机器翻译、文本生成、智能问答、情感分析等方面。</p>
<h3>2 LLM的发展历史</h3>
<p>LLM（Large Language Model）的发展历史可以追溯到自然语言处理和机器学习的早期研究。以下是LLM发展历史的一些关键里程碑：</p>
<ul>
<li>早期研究：
在20世纪50年代，自然语言处理（NLP）的研究开始兴起，早期的尝试主要集中在基于规则的方法上，这些方法需要人工编写大量的规则来处理语言。然而，这些方法在处理复杂的语言现象时遇到了困难。</li>
<li>统计语言模型的出现：
为了克服基于规则的方法的局限性，研究人员开始探索统计语言模型。这些模型使用大量的文本数据来自动学习语言的统计规律。早期的统计语言模型包括n-gram模型和隐马尔可夫模型（HMM）。</li>
<li>神经网络的兴起：
在20世纪80年代和90年代，神经网络开始被应用于NLP任务中。最初的神经网络模型相对简单，如前馈神经网络和循环神经网络（RNN）。然而，由于计算资源的限制和训练数据的稀缺性，这些模型在当时的表现并不出色。</li>
<li>深度学习的崛起：
随着计算资源的提升和大数据时代的到来，深度学习在自然语言处理领域取得了显著的突破。特别是2006年深度置信网络（DBN）的提出和2012年卷积神经网络（CNN）在图像识别领域的成功应用，为深度学习的快速发展奠定了基础。</li>
<li>循环神经网络和长短期记忆网络：
在深度学习背景下，循环神经网络（RNN）开始被广泛应用于处理序列数据，如文本。然而，传统的RNN在处理长序列时存在梯度消失或梯度爆炸的问题。为了解决这个问题，长短期记忆网络（LSTM）和门控循环单元（GRU）被提出并广泛应用于NLP任务中。</li>
<li>Transformer模型的出现：
2017年，Google提出了Transformer模型，该模型完全基于注意力机制（Attention Mechanism）来处理序列数据。与传统的RNN和CNN相比，Transformer具有更强的并行计算能力和更远的依赖关系建模能力。这一突破性的架构为后续的大型语言模型（LLM）奠定了基础。</li>
<li>大型预训练语言模型的发展：
随着Transformer模型的成功应用，研究人员开始探索更大规模的语言模型。这些模型在大量的文本数据上进行预训练，并可以通过微调（Fine-tuning）或提示（Prompting）的方式适应各种NLP任务。例如，GPT系列模型（如GPT-2、GPT-3）和BERT模型都是在这一时期涌现出来的代表性工作。这些大型预训练语言模型在各项NLP基准任务上取得了显著的性能提升，并推动了自然语言处理领域的快速发展。</li>
</ul>
<h3>LLM的技术原理</h3>
<p>LLM（Large Language Model）的技术原理主要基于深度学习中的Transformer架构。Transformer是一种基于自注意力（Self-Attention）机制的神经网络结构，它通过多层叠加的自注意力机制和前馈神经网络，对输入序列进行编码和解码，从而实现自然语言处理任务。</p>
<p>在LLM中，Transformer架构被用于训练大规模的语言模型。这些模型通常具有数十亿甚至千亿级别的参数，通过在海量的文本数据上进行预训练，学习语言的语法、语义和上下文信息等特征。预训练过程中，模型通过自监督学习（Self-Supervised Learning）的方式，利用输入序列中的上下文信息来预测被掩盖（Masked）或部分删除的单词，从而学习语言的内在规律和表示方法。</p>
<p>一旦预训练完成，LLM可以被用于各种自然语言处理任务，如文本分类、情感分析、问答系统、机器翻译等。在这些任务中，LLM可以接收输入的文本数据，并通过已学习的语言表示方法将其转换为向量表示，进一步通过分类器或生成器等组件实现相应的功能。</p>
<p>此外，LLM还可以通过微调（Fine-Tuning）或提示学习（Prompt Learning）等方式适应特定的任务和数据集。微调是指在预训练模型的基础上，使用特定任务的标注数据进行进一步的训练，以调整模型的参数和优化性能。提示学习则是一种更为灵活的方法，它通过在输入序列中添加特定的提示信息（Prompt），引导模型生成符合任务要求的输出序列。这种方法不需要对模型进行额外的训练，因此可以快速适应不同的任务和场景。</p>
<h2>LLM常用的大模型</h2>
<p>GPT 系列：由 OpenAI 推出的 Generative Pre-trained Transformer 系列，包括 GPT、GPT-2 、GPT-3 、GPT-4 等模型。
BERT：由 Google 推出的 Bidirectional Encoder Representations from Transformers，是一种非常流行的预训练语言模型。
XLNet：由谷歌提出，结合了 Transformer 和自注意力机制的优势，具有更好的建模能力。
T5：由 Google 提出，使用了 Transformer 架构，统一了文本理解和生成任务。
Megatron-LM：由 NVIDIA 提出的大规模语言模型框架，支持超大规模模型训练。
Turing-NLG：由 Microsoft 提出，是一个大型预训练语言模型
Gemini Ultra：谷歌最大、最有能力的模型，适用于高度复杂的任务。</p>
<h2>Fine-tuning （微调）模型</h2>
<p>Fine-tuning的本质</p>
<p>Fine-tuning（微调）：通过特定领域数据对预训练模型进行针对性优化，以提升其在特定任务上的性能。</p>
<p>一、微调的定义</p>
<p>大模型微调是利用特定领域的数据集对已预训练的大模型进行进一步训练的过程。它旨在优化模型在特定任务上的性能，使模型能够更好地适应和完成特定领域的任务。</p>
<p>二、微调的核心原因</p>
<p>定制化功能：微调的核心原因是赋予大模型更加定制化的功能。通用大模型虽然强大，但在特定领域可能表现不佳。通过微调，可以使模型更好地适应特定领域的需求和特征。</p>
<p>领域知识学习：通过引入特定领域的数据集进行微调，大模型可以学习该领域的知识和语言模式。这有助于模型在特定任务上取得更好的性能。</p>
<p>三、微调与超参数优化</p>
<p>微调过程中，超参数的调整至关重要。超参数如学习率、批次大小和训练轮次等需要根据特定任务和数据集进行调整，以确保模型在训练过程中的有效性和性能。</p>
<h3>微调的前世今生：</h3>
<ul>
<li>迁移学习的兴起：</li>
</ul>
<p>迁移学习是一种机器学习方法，其核心思想是利用一个任务中学习到的知识来改善另一个相关任务的学习效果。在计算机视觉和自然语言处理等领域，研究者们开始意识到，预训练的模型在某些相关任务上可以取得不错的效果，因此便提出了迁移学习的概念。
预训练模型的出现：</p>
<p>随着深度学习的发展，研究者们提出了一系列强大的预训练模型，比如自然语言处理领域的 Word2Vec、GloVe，以及图像处理领域的 VGG、ResNet 等。这些模型在大规模数据上进行预训练，学习到了丰富的特征表示。</p>
<ul>
<li>Fine-tuning 的概念引入：</li>
</ul>
<p>Fine-tuning 基于迁移学习的思想，是将一个预训练好的模型应用于特定的任务，并在此基础上微调模型的参数以适应目标任务。在这种方法中，模型的底层参数通常被保持不变，而高层参数则根据特定任务的数据进行微调。
Fine-tuning 的应用：</p>
<p>在自然语言处理领域，比如情感分析、命名实体识别等任务，研究者们通常会使用预训练的语言模型（比如 BERT、GPT 等）作为基础模型，然后在特定任务的数据集上进行微调，以达到更好的效果。
在计算机视觉领域，例如目标检测、图像分类等任务，也可以采用类似的方法，使用预训练的模型（如 ResNet、Inception 等）进行微调，以适应特定的数据集和任务要求。</p>
<ul>
<li>Fine-tuning 的优势：</li>
</ul>
<p>Fine-tuning 能够充分利用预训练模型在大规模数据上学到的通用知识，从而使模型在特定任务上的表现更加出色。
相比于从头开始训练模型，Fine-tuning 往往需要更少的数据和计算资源，能够更快速地实现模型的迭代和优化。</p>
<p>总的来说，Fine-tuning 模型的前世是迁移学习的概念，它的今生则是在预训练模型的基础上进行微调，成为了许多机器学习任务中的一种常用技术。</p>
<h3>常用的微调模型</h3>
<p>Prompt Tuning
Prompt Tuning的出发点，是基座模型(Foundation Model)的参数不变，为每个特定任务，训练一个少量参数的小模型，在具体执行特定任务的时候按需调用。</p>
<p>Prefix Tuning
Prefix Tuning的灵感来源是，基于Prompt Engineering的实践表明，在不改变大模型的前提下，在Prompt上下文中添加适当的条件，可以引导大模型有更加出色的表现。</p>
<p>LoRA：
LoRa（Low-Rank Adaptation）是一种基于低秩适应的微调技术。它通过在LLM的权重矩阵上应用分解低秩矩阵，将模型的参数量大幅减少，从而降低计算复杂度和内存需求。这使得LoRa在保持模型性能的同时，能够在有限的计算资源下进行高效的微调。</p>
<p>我昨天下载的几个LoRa模型，就用在大模型生成的图片上，进行精修处理。LLM就好比是个摄影师，LoRa 可以理解为后期对照片PS的工作人员。</p>
<p>网上有句话：微调模型就是，颜值不高，花不起韩国整容的钱，只好用化妆品来修饰一下。</p>
<h2>几个网站：</h2>
<p>Huggingface:
<a href="https://huggingface.co/models">https://huggingface.co/models</a> <strong>注意不是com 是co</strong></p>
<p>对于AI开发者的GitHub，提供了模型、数据集（文本|图像|音频|视频）、类库（比如transformers|peft|accelerate）、教程等。</p>
<p>Discord:
<a href="https://discord.com/">https://discord.com/</a>
在Discord上，你可以使用AI来增强与朋友的对话——你可以一起进行头脑风暴，一起创作，一起制作表情包。里面的人都很友好，还有个哥们纠正我的语法问题。</p>
<p>Civitai:
<a href="https://civitai.com/">https://civitai.com/</a></p>
<p>Civitai是一个专注于使用和探索稳定扩散AI艺术模型的AI工具。它是一个平台，为AI爱好者、艺术家和开发者等用户提供了一个中心化的数字空间，用户可以在这里访问、互动并可能对AI生成的艺术模型库作出贡献。Civitai的角色、特点和好处包括：作为AI艺术模型的中心集散地，拥有大量模型的库；促进社区活跃，支持用户互动和合作；易于使用，支持模型贡献和定制；通过提供广泛的艺术模型库，促进创新和创造力；为学习和发展AI技术提供实践途径；提供社区支持，让用户可以从同好中获得建议和支持；使更多用户能够轻松接触和利用先进的AI艺术模型</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1989</wp:post_id>
		<wp:post_date><![CDATA[2024-03-25 08:58:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-25 00:58:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-25 10:01:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-25 02:01:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[llm%e5%92%8cfune-tuning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd"><![CDATA[AI]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[How to learn any language in six months]]></title>
		<link>https://www.liritian.com/archives/how-to-learn-any-language-in-six-months/</link>
		<pubDate>Mon, 01 Apr 2024 01:08:28 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=2003</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Chris Lonsdale - New Zealand 、Neurolinguist, psychologist, educator</p>
<p>Have you ever held a question in mind for so long that it becomes part of how you think?</p>
<p>Maybe even part of who you are as a person?</p>
<p>Well I've had a question in my mind for many, many years and that is: how can you speed up learning?</p>
<p>Now, this is an interesting question because if you speed up learning you can spend less time at school。</p>
<p>And if you learn really fast, you probably wouldn't have to go to school at all.</p>
<p>Now, when I was young, school was sort of okay but I found quite often that school got in the way of learning so I had this question in mind: how do you learn faster?</p>
<p>And this began when I was very, very young. When I was about eleven years old I wrote a letter to researchers in the Soviet Union, asking about hypnopaedia, this is sleep learning, where you get a tape recorder, you put it beside your bed and it turns on in the middle of the night when you're sleeping, and you're supposed to be learning from this.</p>
<p>A good idea, unfortunately it doesn't work.</p>
<p>But, hypnopaedia did open the doors to research in other areas and we've had incredible discoveries about learning that began with that first question.</p>
<p>I went on from there to become passionate about psychology and I have been involved in psychology in many ways for the rest of my life up until this point.</p>
<p>In 1981 I took myself to China and I decided that I was going to be native level in Chinese inside two years.</p>
<p>Now, you need to understand that in 1981, everybody thought Chinese was really, really difficult and that a westerner could study for ten years or more and never really get very good at it.</p>
<p>And I also went in with a different idea which was: taking all of the conclusions from psychological research up to that point and applying them to the learning process.</p>
<p>What was really cool was that in six months I was fluent in Mandarin Chinese and took a little bit longer to get up to native.</p>
<p>But I looked around and I saw all of these people from different countries struggling terribly with Chinese, I saw Chinese people struggling terribly to learn English and other languages, and so my question got refined down to: how can you help a normal adult learn a new language quickly, easily and effectively?</p>
<p>Now this is a really, really important question in today's world.</p>
<p>We have massive challenges with environment. We have massive challenges with social dislocation, with wars, all sorts of things going on and if we can't communicate we're really going to have difficulty solving these problems.</p>
<p>So we need to be able to speak each other's languages. This is really, really important.</p>
<p>The question then is how do you do that? Well, it's actually really easy.</p>
<p>You look around for people who can already do it, you look for situations where it's already working and then you identify the principles and apply them.</p>
<p>It's called modeling and I've been looking at language learning and modeling language learning for about fifteen to twenty years now.</p>
<p>And my conclusion, my observation from this is that any adult can learn a second language to fluency inside six months.</p>
<p>Now when I say this, most people think I'm crazy, this is not possible. So let me remind everybody of the history of human progress, it's all about expanding our limits.</p>
<p>In 1950 everybody believed that running one mile in four minutes was impossible and then Roger Bannister did it in 1956 and from there it's got shorter and shorter.</p>
<p>100 years ago everybody believed that heavy stuff doesn't fly。</p>
<p>Except it does and we all know this. How does heavy stuff fly?</p>
<p>We reorganize the materials using principles that we have learned from observing nature, birds in this case.</p>
<p>And today we've gone ever further, so you can fly a car. You can buy one of these for a couple hundred thousand US dollars.</p>
<p>We now have cars in the world that can fly.</p>
<p>And there's a different way to fly that we've learned from squirrels.</p>
<p>So all you need to do is copy what a flying squirrel does, build a suit called a wing suit and off you go, you can fly like a squirrel.</p>
<p>Now, most people, a lot of people, I wouldn't say everybody but a lot of people think they can't draw.</p>
<p>However there are some key principles, five principles that you can apply to learning to draw and you can actually learn to draw in five days.</p>
<p>So, if you draw like this, you learn these principles for five days and apply them and after five days you can draw something like this.</p>
<p>Now I know this is true because that was my first drawing and after five days of applying these principles that was what I was able to do.</p>
<p>And I looked at this and I went ‘wow,' so that's how I look like when I'm concentrating so intensely that my brain is exploding.</p>
<p>So, anybody can learn to draw in five days and in the same way, with the same logic, anybody can learn a second language in six months.</p>
<p>How: there are five principles and seven actions.</p>
<p>There may be a few more but these are absolutely core.</p>
<p>And before I get into those I just want to talk about two myths, dispel two myths.</p>
<p>The first is that you need talent.</p>
<p>Let me tell you about Zoe.</p>
<p>Zoe came from Australia, went to Holland, was trying to learn Dutch, struggling a great deal and finally people were saying: ‘you're completely useless,' ‘you're not talented,' ‘give up,' ‘you're a waste of time' and she was very, very depressed.</p>
<p>And then she came across these five principles, she moved to Brazil and she applied them and within six months she was fluent in Portuguese, so talent doesn't matter.</p>
<p>People also think that immersion in a new country is the way to learn a language.</p>
<p>But look around Hong Kong, look at all the westerners who've been here for ten years, who don't speak a word of Chinese.</p>
<p>Look at all the Chinese living in America, Britain, Australia, Canada who have been there ten, twenty years and they don't speak any English.</p>
<p>Immersion per se doesn't not work, why?</p>
<p>Because a drowning man cannot learn to swim.</p>
<p>When you don't speak a language you're like a baby and if you drop yourself into a context which is all adults talking about stuff over your head, you won't learn.</p>
<p>So, what are the five principles that you need to pay attention to;</p>
<p>first: there are four words, attention, meaning, relevance and memory, and these interconnect in very important ways. Especially when you're talking about learning.</p>
<p>Come with me on a journey through a forest.</p>
<p>You go on a walk through a forest and you see something like this.</p>
<p>Little marks on a tree, maybe you pay attention, maybe you don't.</p>
<p>You go another fifty metres and you see this.</p>
<p>You should be paying attention.</p>
<p>Another fifty metres, if you haven't been paying attention, you see this.</p>
<p>And at this point, you're paying attention.</p>
<p>And you've just learned that this is important, it's relevant because it means this, and anything that is related, any information related to your survival is stuff that you're going to pay attention to and therefore you're going to remember it.</p>
<p>If it's related to your personal goals then you're going to pay attention to it, if it's relevant you're going to remember it.</p>
<p>So, the first rule, the first principle for learning a language is focus on language content that is relevant to you.</p>
<p>Which brings us to tools.</p>
<p>We master tools by using tools and we learn tools the fastest when they are relevant to us.</p>
<p>So let me share a story.</p>
<p>A keyboard is a tool.</p>
<p>Typing Chinese a certain way, there are methods for this. That's a tool.</p>
<p>I had a colleague many years ago who went to night school;</p>
<p>Tuesday night, Thursday night, two hours each night, practicing at home, she spent nine months, and she did not learn to type Chinese.</p>
<p>And one night we had a crisis.</p>
<p>We had forty eight hours to deliver a training manual in Chinese.</p>
<p>And she got the job, and I can guarantee you in forty eight hours, she learned to type Chinese because it was relevant, it was important, it was meaningful, she was using a tool to create value.</p>
<p>So the second tool for learning a language is to use your language as a tool to communicate right from day one. As a kid does.</p>
<p>When I first arrived in China I didn't speak a word of Chinese, and on my second week I got to take a train ride overnight.</p>
<p>I spent eight hours sitting in the dining car talking to one of the guards on the train。He took an interest in me for some reason, and we just chatted all night in Chinese and he was drawing pictures and making movements with his hands and facial expressions and piece by piece by piece I understood more and more.</p>
<p>But what was really cool, was two weeks later, when people were talking Chinese around me, I was understanding some of this and I hadn't even made any effort to learn that.</p>
<p>What had happened</p>
<p>I'd absorbed it that night on the train,</p>
<p>which brings us to the third principle</p>
<p>When you first understand the message, then you will acquire the language unconsciously.</p>
<p>And this is really, really well documented now, it's something called comprehensible input and there's twenty or thirty years of research on this. Stephen Krashen, a leader in the field has published all sorts of these different studies and this is just from one of them.</p>
<p>The purple bars show the scores on different tests for language.</p>
<p>The purple people were people who had learned by grammar and formal study, the green ones are the ones who learned by comprehensible input.</p>
<p>So, comprehension works.</p>
<p>Comprehension is key and language learning is not about accumulating lots of knowledge.</p>
<p>In many, many ways it's about physiological training.</p>
<p>A woman I know from Taiwan did great at English at school, she got A grades all the way through, went through college, A grades, went to the US and found she couldn't understand what people were saying.</p>
<p>And people started asking her: ‘are you deaf?'</p>
<p>And she was.</p>
<p>English deaf.</p>
<p>Because we have filters in our brain that filter in the sounds that we are familiar with and they filter out the sounds of languages we're not.</p>
<p>And if you can't hear it, you won't understand it and if you can't understand it, you're not going to learn it.</p>
<p>So you actually have to be able to hear these sounds.</p>
<p>And there are ways to do that but it's physiological training.</p>
<p>Speaking takes muscle.</p>
<p>You've got forty-three muscles in your face, you have to coordinate those in a way that you make sounds that other people will understand.</p>
<p>If you've ever done a new sport for a couple of days, then you know how your body feels. And it hurts.</p>
<p>If your face is hurting you're doing it right.</p>
<p>And the final principle is state.</p>
<p>Psycho-physiological state.</p>
<p>If you're sad, angry, worried, upset, you're not going to learn.</p>
<p>Period.</p>
<p>If you're happy, relaxed, in an Alpha brain state, curious, you're going to learn really quickly, and very specifically you need to be tolerant of ambiguity.</p>
<p>If you're one of those people who needs to understand 100% every word you're hearing, you will go nuts, because you'll be incredibly upset all the time, because you're not perfect.</p>
<p>If you're comfortable with getting some, not getting some, just paying attention to what you do understand, you're going to be fine, you'll be relaxed and you'll be learning quickly.</p>
<p>So based on those five principles, what are the seven actions that you need to take?</p>
<p>Number one: listen a lot.</p>
<p>I call it brain soaking。</p>
<p>You put yourself in a context where you're hearing tons and tons and tons of a language and it doesn't matter if you understand it or not。</p>
<p>You're listening to the rhythm ,you're listening to the patterns that repeat, you're listening to things that stand out。</p>
<p>So, just soak your brain in this.</p>
<p>The second action: is that you get the meaning first, even before you get the words.</p>
<p>You go “Well how do I do that?”，</p>
<p>I don't know the words. Well, you understand what these different postures mean.</p>
<p>Human communication is body language in many, many ways, so much body language.</p>
<p>From body language you can understand a lot of communication, therefore, you're understanding, you're acquiring through comprehensible input.</p>
<p>And you can also use patterns that you already know.</p>
<p>If you're a Chinese speaker of Mandarin and Cantonese and you go Vietnam, you will understand 60% of what they say to you in daily conversation, because Vietnamese is about 30% Mandarin, 30% Cantonese.</p>
<p>The third action: start mixing.</p>
<p>You probably have never thought of this but if you've got ten verbs, ten nouns and ten adjectives you can say one thousand different things.</p>
<p>Language is a creative process.</p>
<p>What do babies do?</p>
<p>Okay: me, bat(h)， now， okay, that's how they communicate.</p>
<p>So start mixing, get creative, have fun with it, it doesn't have to be perfect it just has to work.</p>
<p>And when you're doing this you focus on the core.</p>
<p>What does that mean?</p>
<p>Well any language has high frequency content.</p>
<p>In English 1000 words covers 85% of anything you're ever going to say in daily communication.</p>
<p>3000 words gives you 98% of anything you're going to say in daily conversation.</p>
<p>You got 3000 words, you're speaking the language.</p>
<p>The rest is icing on the cake.</p>
<p>And when you're just begging with a new language start with the tool box.</p>
<p>Week number one in your new language you say things like: ‘how do you say that?'</p>
<p>‘I don't understand,'</p>
<p>‘repeat that please,'</p>
<p>‘what does that mean,'</p>
<p>all in your target language.</p>
<p>You're using it as a tool, making it useful to you, it's relevant to learn other things about the language.</p>
<p>It's by week two that you should be saying things like: ‘me,' ‘this,' ‘you,' ‘that,' ‘give,' you know, ‘hot,' simple pronouns, simple nouns, simple verbs, simple adjectives, communicating like a baby.</p>
<p>And by the third or fourth week, you're getting into what I call glue words.</p>
<p>‘Although,' ‘but,' ‘therefore,' these are logical transformers that tie bits of a language together, allowing you to make more complex meaning。</p>
<p>At that point you're talking。</p>
<p>And when you're doing that, you should get yourself a language parent.</p>
<p>If you look at how children and parents interact, you'll understand what this means.</p>
<p>When a child is speaking, it'll be using simple words, simple combinations, sometimes quite strange, sometimes very strange pronunciation and other people from outside the family don't understand it.</p>
<p>But the parents do.</p>
<p>And so the kid has a safe environment, gets confidence.</p>
<p>The parents talk to the children with body language and with simple language which they know the child understands.</p>
<p>So we have a comprehensible input environment that's safe, we know it works otherwise none of you would speak your mother tongue.</p>
<p>15:55 So you get yourself a language parent, who's somebody interested in you as a person who will communicate with you essentially as an equal, but pay attention to help you understand the message.</p>
<p>There are four rules of a language parent.</p>
<p>Spouses by the way are not very good at this, okay?</p>
<p>But the four rules are, first of all, they will work hard to understand what you mean even when you're way off beat.</p>
<p>Secondly, they will never correct your mistakes.</p>
<p>Thirdly they will feed back their understanding of what you are saying so you can respond appropriately and get that feedback and then they will use words that you know.</p>
<p>The sixth thing you have to do, is copy the face.</p>
<p>You've got to get the muscles working right, so you can sound in a way that people will understand you.</p>
<p>There's a couple of things you do.</p>
<p>One is that you hear how it feels, and feel how it sounds which means you have a feedback loop operating in your face, but ideally if you can look at a native speaker and just observe how they use their face, let your unconscious mind absorb the rules, then you're going to be able to pick it up.</p>
<p>And if you can't get a native speaker to look at, you can use stuff like this: [slides].</p>
<p>And the final idea here, the final action you need to take is something that I call “direct connect.”</p>
<p>What does this mean?</p>
<p>Well most people learning a second language sort of take the mother tongue words and take the target words and go over them again and again in their mind to try and remember them.</p>
<p>Really inefficient.</p>
<p>What you need to do is realize that everything you know is an image inside your mind, it's feelings,</p>
<p>if you talk about fire you can smell the smoke you can hear the crackling, you can see the flames,</p>
<p>so what you do, is you go into that imagery and all of that memory and you come out with another pathway.</p>
<p>So I call it ‘same box, different path.'</p>
<p>You come out of that pathway, you build it over time you become more and more skilled at just connecting the new sounds to those images that you already have, into that internal representation.</p>
<p>And over time you even become naturally good at that process, that becomes unconscious.</p>
<p>So, there are five principles that you need to work with, seven actions, if you do any of them, you're going to improve。</p>
<p>And remember these are things under your control as the learner.</p>
<p>Do them all and you're going to be fluent in a second language in six months.</p>
<p>Thank you.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2003</wp:post_id>
		<wp:post_date><![CDATA[2024-04-01 09:08:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-01 01:08:28]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-01 09:10:04]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-01 01:10:04]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-learn-any-language-in-six-months]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%ae%97%e6%b3%95%e5%92%8c%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84"><![CDATA[其他]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[深入理解域名解析：从原理到实践]]></title>
		<link>https://www.liritian.com/archives/%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3%e5%9f%9f%e5%90%8d%e8%a7%a3%e6%9e%90%ef%bc%9a%e4%bb%8e%e5%8e%9f%e7%90%86%e5%88%b0%e5%ae%9e%e8%b7%b5/</link>
		<pubDate>Mon, 06 May 2024 02:41:41 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=2015</guid>
		<description></description>
		<content:encoded><![CDATA[<ol>
<li>
<p>引言
域名解析是互联网中一个至关重要的基础设施，它允许我们使用人类可读的域名来访问互联网上的各种资源，如网站、邮件服务器、文件服务器等。本文将深入探讨域名解析的原理、工作流程以及常见的解析记录类型，帮助读者更好地理解域名解析的工作机制。</p>
</li>
<li>
<p>域名解析的基础概念
2.1 什么是域名解析？
域名解析（Domain Name Resolution）是将域名转换为与之对应的 IP 地址的过程。在互联网上，计算机通信都是通过 IP 地址进行的，但是使用 IP 地址来访问网站不够直观，因此通过域名解析，可以将易于记忆的域名转换为对应的 IP 地址，从而方便用户访问网站。</p>
<p>2.2 DNS（Domain Name System）
DNS是域名解析系统的缩写，它是一个分布式数据库系统，用于存储域名与 IP 地址之间的映射关系。DNS系统由多级域名服务器组成，包括根域名服务器、顶级域名服务器、权威域名服务器和本地域名服务器等。</p>
</li>
<li>
<p>域名解析的工作原理
3.1 递归查询与迭代查询
域名解析过程可以分为递归查询和迭代查询两种方式。递归查询是指客户端向本地域名服务器发起查询请求，本地域名服务器负责递归地向根域名服务器、顶级域名服务器和权威域名服务器发起查询，直到找到与之对应的 IP 地址。而迭代查询是指本地域名服务器向根域名服务器发起查询请求，根域名服务器返回指向顶级域名服务器的地址，本地域名服务器再向顶级域名服务器发起查询请求，依次迭代查询，直到找到与之对应的 IP 地址。</p>
<p>3.2 解析过程详解
用户在浏览器中输入一个域名，如&quot;www.example.com&quot;。
浏览器向本地域名服务器发起查询请求，询问域名对应的 IP 地址。
如果本地域名服务器已经缓存了该域名的解析结果，则直接返回给浏览器；否则，本地域名服务器将向根域名服务器发起查询请求。
根域名服务器返回指向顶级域名服务器的地址。
本地域名服务器向顶级域名服务器发起查询请求。
顶级域名服务器返回指向权威域名服务器的地址。
本地域名服务器向权威域名服务器发起查询请求。
权威域名服务器返回该域名对应的 IP 地址。
本地域名服务器将解析结果返回给浏览器，并缓存该解析结果。</p>
</li>
<li>
<p>常见的解析记录类型
4.1 A 记录
A 记录用于将域名解析为 IPv4 地址。</p>
<p>4.2 AAAA 记录
AAAA 记录用于将域名解析为 IPv6 地址。</p>
<p>4.3 CNAME 记录
CNAME 记录用于将域名解析为另一个域名，实现域名的重定向。</p>
<p>4.4 MX 记录
MX 记录用于指定邮件服务器的地址。</p>
<p>4.5 TXT 记录
TXT 记录用于存储与域名相关的任意文本信息。</p>
</li>
<li>
<p>域名解析的优化与加速
5.1 DNS 缓存
为了减少解析时间，提高用户访问速度，DNS 使用了缓存机制，将解析结果缓存到本地域名服务器或客户端，下次再次访问相同的域名时，直接从缓存中获取解析结果。</p>
<p>5.2 DNS 负载均衡
为了提高解析的稳定性和性能，DNS 还可以实现负载均衡，将请求分发到多个服务器上，从而降低单个服务器的负载，提高整体系统的可靠性和性能。</p>
</li>
</ol>
<p>喃喃自语：
域名解析是互联网中不可或缺的重要环节，它通过将域名转换为 IP 地址，实现了人类与计算机之间的交互。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2015</wp:post_id>
		<wp:post_date><![CDATA[2024-05-06 10:41:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-05-06 02:41:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-05-06 10:41:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-05-06 02:41:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b7%b1%e5%85%a5%e7%90%86%e8%a7%a3%e5%9f%9f%e5%90%8d%e8%a7%a3%e6%9e%90%ef%bc%9a%e4%bb%8e%e5%8e%9f%e7%90%86%e5%88%b0%e5%ae%9e%e8%b7%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e7%bd%91%e7%bb%9c%e5%8d%8f%e8%ae%ae"><![CDATA[网络协议]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[L1、L2、L3 缓存的作用和原理]]></title>
		<link>https://www.liritian.com/archives/l1%e3%80%81l2%e3%80%81l3-%e7%bc%93%e5%ad%98%e7%9a%84%e4%bd%9c%e7%94%a8%e5%92%8c%e5%8e%9f%e7%90%86/</link>
		<pubDate>Sat, 06 Apr 2024 06:20:59 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=2017</guid>
		<description></description>
		<content:encoded><![CDATA[<p>在计算机系统中，CPU缓存扮演着至关重要的角色。CPU缓存是一种高速缓存存储器，用于暂时存储CPU频繁访问的数据和指令，以加快数据访问速度和提高计算效率。现代CPU通常包含三级缓存（L1、L2、L3缓存），它们具有不同的特性和功能，但都对系统性能起着至关重要的作用。</p>
<ol start="2">
<li>
<p>CPU缓存的基本原理
2.1 L1缓存
L1缓存是位于CPU核心内部的一级缓存，距离CPU核心最近，速度也是最快的。它通常分为数据缓存（L1 D-cache）和指令缓存（L1 I-cache）。L1缓存的作用是存储最常用的数据和指令，以提供快速的访问速度。</p>
<p>2.2 L2缓存
L2缓存是位于CPU核心和主内存之间的二级缓存，容量比L1缓存大，但速度稍慢。L2缓存通常也分为数据缓存和指令缓存，用于存储相对不常用但仍然频繁访问的数据和指令。</p>
<p>2.3 L3缓存
L3缓存是位于CPU核心和主内存之间的最后一级缓存，是整个CPU芯片上所有核心共享的缓存。L3缓存的容量通常更大，但速度相对较慢。它用于存储对所有CPU核心都共享的数据和指令，以提高整体系统的性能。</p>
</li>
<li>
<p>CPU缓存的性能影响
3.1 命中和未命中
CPU缓存的性能影响与缓存命中率密切相关。当CPU需要访问某个数据或指令时，首先会在缓存中查找。如果数据或指令在缓存中找到，即发生了缓存命中（Cache Hit），CPU可以直接从缓存中获取数据或指令，以极快的速度执行。相反，如果数据或指令未在缓存中找到，即发生了缓存未命中（Cache Miss），CPU必须从主内存中加载数据或指令，这会导致额外的延迟和性能损失。</p>
<p>3.2 缓存一致性
由于现代CPU通常具有多个核心和多级缓存，因此必须考虑缓存一致性的问题。缓存一致性指的是各级缓存中的数据保持一致的状态，以避免数据不一致导致的错误和异常。为了确保缓存一致性，CPU采用了各种技术和协议，如缓存一致性协议（MESI协议）和缓存一致性控制（Cache Coherence）。</p>
</li>
<li>
<p>CPU缓存的优化策略
4.1 局部性原理
局部性原理是指程序在运行过程中访问数据和指令具有局部性的特点，即程序往往会频繁访问相邻的数据和指令。基于局部性原理，可以采用预取（Prefetching）和缓存替换策略等优化技术，提高缓存命中率和系统性能。</p>
<p>4.2 缓存优化指导
针对不同的应用场景和硬件架构，可以采用一系列缓存优化指导，包括数据对齐（Data Alignment）、循环优化（Loop Optimization）、代码重排（Code Reordering）等，以最大程度地利用CPU缓存的性能</p>
</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2017</wp:post_id>
		<wp:post_date><![CDATA[2024-04-06 14:20:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-06 06:20:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-05-06 14:22:27]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-05-06 06:22:27]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[l1%e3%80%81l2%e3%80%81l3-%e7%bc%93%e5%ad%98%e7%9a%84%e4%bd%9c%e7%94%a8%e5%92%8c%e5%8e%9f%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-05-06]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[2024 人工智能与职场研究报告-人民大学报告（转）]]></title>
		<link>https://www.liritian.com/archives/2024-%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%e4%b8%8e%e8%81%8c%e5%9c%ba%e7%a0%94%e7%a9%b6%e6%8a%a5%e5%91%8a/</link>
		<pubDate>Mon, 20 May 2024 11:19:08 +0000</pubDate>
		<dc:creator><![CDATA[jack_ss]]></dc:creator>
		<guid isPermaLink="false">https://www.liritian.com/?p=2020</guid>
		<description></description>
		<content:encoded><![CDATA[<ol>
<li>宏观篇·社会</li>
<li>中观篇·企业</li>
<li>围观篇·个人</li>
<li>趋势篇·未来</li>
</ol>
<h1>宏观篇社会</h1>
<p>人工智能(AI)自诞生以来，理论和技术日益成熟，应用领域也不断扩大。特别是以ChatGPT 为代表的生成式人工智能（AI）技术快速演
变，有望成为继蒸汽、电力、信息技术之后，再一次飞跃式提升生产力的技术变革力量。
• 中国市场的生成式AI商业应用规模亦正在快速增长中，据《中国AI 数字商业展望2021-2025》报告预测：到2025 年，中国生成式AI商
业应用规模将达到2070 亿元，未来五年的年均增速84%。
• 人工智能模型可以分为“分析式人工智能”(Analytical AI)和“生成式人工智能”(Generative AI) (Glikson和Woolley，2020)。其中生成式人工
智能是第四次工业革命的关键技术。这一变革被称为工业4.0，其基础在于通过智能技术实现产业的数字化、网络化和智能化。AI在此
过程中发挥着至关重要的作用。
• 除了分析和判断功能之外，生成式AI的核心能力是“创造”，生成全新的内容。2022 年底，OpenAI 的ChatGPT 以强大的内容生成能力令
世界瞩目，2024 年2 月OpenAI 发布的 SORA 再次引发全世界关注。
• 中国政府高度重视AI的发展，并将其视为第四次工业革命的标准，通过加强AI科技创新、推动AI深度赋能实体经济、推进AI伦理建设等
方面加快推动该领域技术发展。同时，我国也在积极提升人工智能治理能力，有效防控AI发展风险，并推动形成具有广泛共识的国际
人工智能治理方案。
• 在全球生成式人工智能的发展中，中国不仅占据了重要地位，而且在某些关键技术领域达到了世界领先水平。中国的大模型能力尤其
值得关注，根据《2024年人工智能指数报告》，在全球著名的人工智能模型中，61个源自美国，而中国紧随其后，有15个模型上榜，
显示了中国在AI领域的强大实力和创新能力</p>
<h1>人工智能的发展综述</h1>
<p>人工智能（AI）技术，尤其是生成式AI，对社会已经产生了多方面影响。
• 首先，从人类福祉的角度来看，AI技术的发展受到了56%职场人士的认可，他们认为AI是未来发展的必然趋势，尤其在高职级员工和体
制内企业员工中得到了广泛的支持。然而，也有约30%的职场人表达了担忧：例如AI可能带来社会的不稳定以及威胁人类的独特性。
• 其次，在社会应用方面，47%的受访职场人士表示，他们所在的企业对AI技术持积极态度，特别是高层管理者。尽管如此，39%的受访
者担心AI的引入可能会导致整体职场收入下降，这一担忧在男性受访者中尤为显著。此外，38%的受访者认为，随着企业引入AI，个人
收入可能会受到影响，这种担忧在低职级、年轻和年长员工以及非体制内企业的员工群体中尤为常见。
• 最后，在职场就业方面，职场人士对AI的影响持有保守且差异化的态度。44%的人认为AI将创造大量新的工作机会，47%的人担心AI的
使用可能会导致大规模失业。在AI取代各类岗位的浪潮中，研发与创新类岗位显示出较强的抵抗力，而生产与制造类、财务会计类和
客服支持类岗位则面临较高的被替代风险。超过七成的人认为AI对他们当前工作内容的替代性不高，但高年龄、高职级和外资合资企
业的员工对职场危机感的认知更高。</p>
<p>人工智能模型可以分为“分析式人工智能”（Analytical AI）和“生成式人工智能”（Generative AI）两种。
• 2022年底，生成式AI ChatGPT系列以强大的内容生成能力和接近人类水平的“聪明”程度给人类世界带来巨大震撼。
• 也被称为决策式AI，指学习数据中的条件概率分布，根据已有数
据进行分析、判断、预测，应用模型主要用于推荐系统和风控系
统的辅助决策、用于自动驾驶和机器人的决策智能体，辅助用户
进行判断。
• 学习数据中的联合概率分布，并非简单分析已有数据而是学
习归纳已有数据后进行演绎创造，基于历史进行模仿式、缝
合式创作，生成全新的内容，也能解决判别问题。
分析式AI 生成式AI
2016-2021年，全球的人工智能市场规模从600亿美元扩大到近3000亿美
元，如此高速的发展背后是分析式AI大规模的成功应用，包括推荐系统、计
算机视觉、自然语言处理等技术。
分析式AI的推荐系统驱动了电商、视频等行业的飞速发展，图像识别技术推
动了智能驾驶和汽车行业的迭代。
字节跳动（ByteDance）、亚马逊（Amazon）、特斯拉（Tesla）等企业，
正是凭借分析式AI，如：推荐系统、计算机视觉、自然语言处理等技术上的
领先性，快速发展为全球领先的科技和数字化公司。
生成式AI的核心是“创造”，通过从数据中学习要素，进而生成全新的、
原创的内容或产品。不仅能够实现传统AI的分析、判断、决策功能，还能
够实现传统AI力所不及的创造性功能。
生成式AI已催生了营销、设计、建筑和内容领域的创造性工作，并开始在
生命科学、医疗、制造、 材料科学、媒体、娱乐、汽车、航空航天等领域
进行初步应用，为各个领域带来显著的生产力提升。
当前生成式AI最常见的应用场景是娱乐媒体中内容的辅助生产。随着生成
式AI的能力进一步成熟，部分专业内容生产者将被替代</p>
<p>生成式人工智能是第四次工业革命的关键技术。
• 生成式人工智能（AI）正逐渐成为第四次工业革命的核心驱动力。这场被称为工业4.0的变革，其基础在于通过智能技术实现产业的数
字化、网络化和智能化。AI在此过程中发挥着至关重要的作用，主要体现在以下几个方面：
• 智能化生产：AI技术的应用让生产过程变得更加智能化，包括智能制造、自动化装配线和无人运输车等，这些技术极大提升了生产效率和灵活性，同
时降低了成本。
• 数据驱动的决策：结合大数据分析和AI算法，企业能够对海量数据进行分析和学习，从而做出更精准的市场预测和生产计划，优化管理决策。
• 个性化服务和消费：AI能够根据用户的行为和偏好提供定制化的服务和产品，增强用户体验和满意度，这在零售、金融、教育、医疗等多个行业均有
广泛应用。
• 解决社会问题：AI技术在健康医疗、环境保护、城市管理等领域的应用展现了其在解决复杂社会问题时的潜力。
• 尽管AI技术为社会带来了前所未有的机遇，但也引发了包括就业市场结构性变化、数据隐私和安全、算法偏见等挑战。为了充分发挥AI
的潜力，需要持续的技术创新和解决伴随而来的挑战。
• AI具有解放重复性工作、低成本广泛应用以及带动生产关系变革的潜力。AI的核心价值在于其嵌入性，通过生物并行计算与机器并行计
算的融合，预示着生产力的文明级跨越。
• 随着AI技术的不断成熟和应用范围扩大，它将在塑造新质生产力、推动经济增长和解决社会问题等方面发挥更加重要的作用。同时，
社会各界需要共同努力，确保技术进步能够惠及社会各个层面，并积极应对由此带来的挑战</p>
<p>AI与人协作的三种模式：嵌入、副驾驶，代理。
• 人和AI协同的三种工作模式：第一种是AI Embedded（嵌入）模式。即原任务流不变，中间某个环节人不做了，交给AI，例如：写文
案，可以要求AI给几个引人入胜的标题。第二种是AI Copilot（副驾驶）模式。就是在保持原来任务流的情况下，AI提供捷径执行全部
任务，且全过程透明。第三种是AI Agent（代理/托管）模式，就是人类不用管任务怎么被执行，全交给AI去做。从AI技术现状来看，
第三种模式目前还不存在，也不不可靠，到不了完全可以离开人控制的程度。
• 未来1到2年成为主流的会是Copilot模式，兼顾安全和效率。人与AI并不是谁取代谁，而是共同完成工作，整体流程仍是由人来控制</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2020</wp:post_id>
		<wp:post_date><![CDATA[2024-05-20 19:19:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-05-20 11:19:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-05-20 19:25:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-05-20 11:25:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2024-%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%e4%b8%8e%e8%81%8c%e5%9c%ba%e7%a0%94%e7%a9%b6%e6%8a%a5%e5%91%8a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd"><![CDATA[AI]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mermaid]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_katex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_mathjax]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-sidebar-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[site-content-layout]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[theme-transparent-header-meta]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_prismjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_githuber_highlightjs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_sequence]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_is_githuber_flow_chart]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	